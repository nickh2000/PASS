
PASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc8  08007fc8  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd0  08007fd0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000105c  20000064  0800803c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c0  0800803c  000210c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c20  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e37  00000000  00000000  00035cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00038b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da5  00000000  00000000  00039cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027854  00000000  00000000  0003aa5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017558  00000000  00000000  000622b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2e14  00000000  00000000  00079809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f84  00000000  00000000  0016c620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001715a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d78 	.word	0x08007d78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08007d78 	.word	0x08007d78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <interpolate>:
uint8_t delay_denom = 255;
int* delay_nom;
int* delay_nom_low;


static inline int16_t interpolate(uint16_t x, uint8_t delay_n, uint16_t* array, int dir, uint16_t size) {
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60ba      	str	r2, [r7, #8]
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4603      	mov	r3, r0
 80005c8:	81fb      	strh	r3, [r7, #14]
 80005ca:	460b      	mov	r3, r1
 80005cc:	737b      	strb	r3, [r7, #13]
	return ((array[x % size] * (delay_denom - delay_n)+ array[(x + dir + size) % size] * delay_n) >> 8) - 32768;
 80005ce:	89fb      	ldrh	r3, [r7, #14]
 80005d0:	8b3a      	ldrh	r2, [r7, #24]
 80005d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80005d6:	fb01 f202 	mul.w	r2, r1, r2
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	b29b      	uxth	r3, r3
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	4413      	add	r3, r2
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <interpolate+0x7c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	7b7b      	ldrb	r3, [r7, #13]
 80005f0:	1acb      	subs	r3, r1, r3
 80005f2:	fb03 f102 	mul.w	r1, r3, r2
 80005f6:	89fa      	ldrh	r2, [r7, #14]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	441a      	add	r2, r3
 80005fc:	8b3b      	ldrh	r3, [r7, #24]
 80005fe:	4413      	add	r3, r2
 8000600:	8b3a      	ldrh	r2, [r7, #24]
 8000602:	fb93 f0f2 	sdiv	r0, r3, r2
 8000606:	fb00 f202 	mul.w	r2, r0, r2
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	4413      	add	r3, r2
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	7b7b      	ldrb	r3, [r7, #13]
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	440b      	add	r3, r1
 800061e:	121b      	asrs	r3, r3, #8
 8000620:	b29b      	uxth	r3, r3
 8000622:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000626:	b29b      	uxth	r3, r3
 8000628:	b21b      	sxth	r3, r3
}
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000000 	.word	0x20000000

0800063c <read_ADC_Channel>:

uint16_t read_ADC_Channel(ADC_HandleTypeDef* hadc, int channel) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef chConfig = { 0 };
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
	chConfig.Channel = channel;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	60bb      	str	r3, [r7, #8]
	chConfig.Rank = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
	chConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(hadc, &chConfig);
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	4619      	mov	r1, r3
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f001 fc00 	bl	8001e6c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(hadc);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f001 fa97 	bl	8001ba0 <HAL_ADC_Start>
	int status = HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000672:	f04f 31ff 	mov.w	r1, #4294967295
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f001 fb60 	bl	8001d3c <HAL_ADC_PollForConversion>
 800067c:	4603      	mov	r3, r0
 800067e:	61fb      	str	r3, [r7, #28]
		  if (status != HAL_OK) {
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <read_ADC_Channel+0x4e>
			Error_Handler();
 8000686:	f000 fe55 	bl	8001334 <Error_Handler>
		  }
	uint16_t val = HAL_ADC_GetValue(hadc);
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f001 fbe1 	bl	8001e52 <HAL_ADC_GetValue>
 8000690:	4603      	mov	r3, r0
 8000692:	837b      	strh	r3, [r7, #26]
//	HAL_ADC_Stop(hadc);

	return val;
 8000694:	8b7b      	ldrh	r3, [r7, #26]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	6078      	str	r0, [r7, #4]
//		audio_buf_high[i] = audio_buf_high_f[i];
//	}
//
//	counter ++;

	if(hsai == &hsai_BlockB1) return;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a74      	ldr	r2, [pc, #464]	; (800087c <HAL_SAI_TxCpltCallback+0x1dc>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	f000 80e1 	beq.w	8000874 <HAL_SAI_TxCpltCallback+0x1d4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b2:	b672      	cpsid	i
}
 80006b4:	bf00      	nop
	__disable_irq();
//	adc_get[0] = read_ADC_Channel(&hadc1, 0);
//	adc_get[1] = read_ADC_Channel(&hadc1, 3);
	adc_get[0] = read_ADC_Channel(&hadc1, 0);
 80006b6:	2100      	movs	r1, #0
 80006b8:	4871      	ldr	r0, [pc, #452]	; (8000880 <HAL_SAI_TxCpltCallback+0x1e0>)
 80006ba:	f7ff ffbf 	bl	800063c <read_ADC_Channel>
 80006be:	4603      	mov	r3, r0
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b70      	ldr	r3, [pc, #448]	; (8000884 <HAL_SAI_TxCpltCallback+0x1e4>)
 80006c4:	801a      	strh	r2, [r3, #0]
	adc_get[1] = adc_get[0];
 80006c6:	4b6f      	ldr	r3, [pc, #444]	; (8000884 <HAL_SAI_TxCpltCallback+0x1e4>)
 80006c8:	881a      	ldrh	r2, [r3, #0]
 80006ca:	4b6e      	ldr	r3, [pc, #440]	; (8000884 <HAL_SAI_TxCpltCallback+0x1e4>)
 80006cc:	805a      	strh	r2, [r3, #2]
//	adc_get[0] = adc_get[1];
//	delay_nom = (read_ADC_Channel(&hadc1, 4) - 2000) * 64 / 2048;



	audio_buf_high[circ_offset_high] = (adc_get[0] << 4);// should be 0
 80006ce:	4b6d      	ldr	r3, [pc, #436]	; (8000884 <HAL_SAI_TxCpltCallback+0x1e4>)
 80006d0:	881a      	ldrh	r2, [r3, #0]
 80006d2:	4b6d      	ldr	r3, [pc, #436]	; (8000888 <HAL_SAI_TxCpltCallback+0x1e8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b291      	uxth	r1, r2
 80006da:	4a6c      	ldr	r2, [pc, #432]	; (800088c <HAL_SAI_TxCpltCallback+0x1ec>)
 80006dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	audio_buf_low[circ_offset_low] = (adc_get[1] << 4);// - (1 << 15);
 80006e0:	4b68      	ldr	r3, [pc, #416]	; (8000884 <HAL_SAI_TxCpltCallback+0x1e4>)
 80006e2:	885a      	ldrh	r2, [r3, #2]
 80006e4:	4b6a      	ldr	r3, [pc, #424]	; (8000890 <HAL_SAI_TxCpltCallback+0x1f0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	0112      	lsls	r2, r2, #4
 80006ea:	b291      	uxth	r1, r2
 80006ec:	4a69      	ldr	r2, [pc, #420]	; (8000894 <HAL_SAI_TxCpltCallback+0x1f4>)
 80006ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	circ_offset_high = (circ_offset_high + 1) % AUDIO_HIGH_BUF_SIZE;
 80006f2:	4b65      	ldr	r3, [pc, #404]	; (8000888 <HAL_SAI_TxCpltCallback+0x1e8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	1c5a      	adds	r2, r3, #1
 80006f8:	4b67      	ldr	r3, [pc, #412]	; (8000898 <HAL_SAI_TxCpltCallback+0x1f8>)
 80006fa:	fb83 1302 	smull	r1, r3, r3, r2
 80006fe:	11d9      	asrs	r1, r3, #7
 8000700:	17d3      	asrs	r3, r2, #31
 8000702:	1acb      	subs	r3, r1, r3
 8000704:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	4a5e      	ldr	r2, [pc, #376]	; (8000888 <HAL_SAI_TxCpltCallback+0x1e8>)
 8000710:	6013      	str	r3, [r2, #0]
	circ_offset_low = (circ_offset_low + 1) % AUDIO_LOW_BUF_SIZE;
 8000712:	4b5f      	ldr	r3, [pc, #380]	; (8000890 <HAL_SAI_TxCpltCallback+0x1f0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	4a60      	ldr	r2, [pc, #384]	; (800089c <HAL_SAI_TxCpltCallback+0x1fc>)
 800071a:	fb82 1203 	smull	r1, r2, r2, r3
 800071e:	441a      	add	r2, r3
 8000720:	1211      	asrs	r1, r2, #8
 8000722:	17da      	asrs	r2, r3, #31
 8000724:	1a8a      	subs	r2, r1, r2
 8000726:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800072a:	fb01 f202 	mul.w	r2, r1, r2
 800072e:	1a9a      	subs	r2, r3, r2
 8000730:	4b57      	ldr	r3, [pc, #348]	; (8000890 <HAL_SAI_TxCpltCallback+0x1f0>)
 8000732:	601a      	str	r2, [r3, #0]


	int dir = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
	if (*delay_nom < 0) dir = -1;
 8000738:	4b59      	ldr	r3, [pc, #356]	; (80008a0 <HAL_SAI_TxCpltCallback+0x200>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	da02      	bge.n	8000748 <HAL_SAI_TxCpltCallback+0xa8>
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	617b      	str	r3, [r7, #20]
	//Fill the 12 subwoofers
	uint16_t buff_offset = ((AUDIO_LOW_BUF_SIZE >> 1) + AUDIO_LOW_BUF_SIZE + circ_offset_low);
 8000748:	4b51      	ldr	r3, [pc, #324]	; (8000890 <HAL_SAI_TxCpltCallback+0x1f0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	b29b      	uxth	r3, r3
 800074e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000752:	817b      	strh	r3, [r7, #10]
	uint16_t buff_index = buff_offset;
 8000754:	897b      	ldrh	r3, [r7, #10]
 8000756:	813b      	strh	r3, [r7, #8]
	uint8_t i = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	74fb      	strb	r3, [r7, #19]
	int int_delay = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
	while (i < NUM_LOW_SPEAKERS) {
 8000760:	bf00      	nop
				AUDIO_LOW_BUF_SIZE);
		int_delay += *delay_nom_low;
		i ++;
	}
//	Fill the first 4 tweeters into the remaining space in DAC 1
	buff_offset = ((AUDIO_HIGH_BUF_SIZE >> 1) + AUDIO_HIGH_BUF_SIZE + circ_offset_high);
 8000762:	4b49      	ldr	r3, [pc, #292]	; (8000888 <HAL_SAI_TxCpltCallback+0x1e8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800076c:	817b      	strh	r3, [r7, #10]
	int_delay = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
	while (i < 16) {
 8000772:	e03a      	b.n	80007ea <HAL_SAI_TxCpltCallback+0x14a>
		buff_index = (int_delay / delay_denom + buff_offset + AUDIO_HIGH_BUF_SIZE) % AUDIO_HIGH_BUF_SIZE;
 8000774:	4b4b      	ldr	r3, [pc, #300]	; (80008a4 <HAL_SAI_TxCpltCallback+0x204>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000780:	897b      	ldrh	r3, [r7, #10]
 8000782:	4413      	add	r3, r2
 8000784:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000788:	4a43      	ldr	r2, [pc, #268]	; (8000898 <HAL_SAI_TxCpltCallback+0x1f8>)
 800078a:	fb82 1203 	smull	r1, r2, r2, r3
 800078e:	11d1      	asrs	r1, r2, #7
 8000790:	17da      	asrs	r2, r3, #31
 8000792:	1a8a      	subs	r2, r1, r2
 8000794:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000798:	fb01 f202 	mul.w	r2, r1, r2
 800079c:	1a9a      	subs	r2, r3, r2
 800079e:	4613      	mov	r3, r2
 80007a0:	813b      	strh	r3, [r7, #8]
		sai_fifo_a[i] = interpolate(buff_index,
				(int_delay * dir) % delay_denom,
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	fb02 f303 	mul.w	r3, r2, r3
 80007aa:	4a3e      	ldr	r2, [pc, #248]	; (80008a4 <HAL_SAI_TxCpltCallback+0x204>)
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80007b2:	fb01 f202 	mul.w	r2, r1, r2
 80007b6:	1a9b      	subs	r3, r3, r2
		sai_fifo_a[i] = interpolate(buff_index,
 80007b8:	b2d9      	uxtb	r1, r3
 80007ba:	8938      	ldrh	r0, [r7, #8]
 80007bc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	4a31      	ldr	r2, [pc, #196]	; (800088c <HAL_SAI_TxCpltCallback+0x1ec>)
 80007c6:	f7ff fef9 	bl	80005bc <interpolate>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	7cfb      	ldrb	r3, [r7, #19]
 80007d0:	4611      	mov	r1, r2
 80007d2:	4a35      	ldr	r2, [pc, #212]	; (80008a8 <HAL_SAI_TxCpltCallback+0x208>)
 80007d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				audio_buf_high, dir,
				AUDIO_HIGH_BUF_SIZE);
		int_delay += *delay_nom;
 80007d8:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <HAL_SAI_TxCpltCallback+0x200>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	4413      	add	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
		i++;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	3301      	adds	r3, #1
 80007e8:	74fb      	strb	r3, [r7, #19]
	while (i < 16) {
 80007ea:	7cfb      	ldrb	r3, [r7, #19]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	d9c1      	bls.n	8000774 <HAL_SAI_TxCpltCallback+0xd4>
	}
////////	//Fill the remaining 16 tweeters into DAC 2
	while (i < 32) {
 80007f0:	e03b      	b.n	800086a <HAL_SAI_TxCpltCallback+0x1ca>
		buff_index = (int_delay / delay_denom + buff_offset + AUDIO_HIGH_BUF_SIZE) % AUDIO_HIGH_BUF_SIZE;
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <HAL_SAI_TxCpltCallback+0x204>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	fb93 f2f2 	sdiv	r2, r3, r2
 80007fe:	897b      	ldrh	r3, [r7, #10]
 8000800:	4413      	add	r3, r2
 8000802:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000806:	4a24      	ldr	r2, [pc, #144]	; (8000898 <HAL_SAI_TxCpltCallback+0x1f8>)
 8000808:	fb82 1203 	smull	r1, r2, r2, r3
 800080c:	11d1      	asrs	r1, r2, #7
 800080e:	17da      	asrs	r2, r3, #31
 8000810:	1a8a      	subs	r2, r1, r2
 8000812:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000816:	fb01 f202 	mul.w	r2, r1, r2
 800081a:	1a9a      	subs	r2, r3, r2
 800081c:	4613      	mov	r3, r2
 800081e:	813b      	strh	r3, [r7, #8]
		sai_fifo_b[i - 16] = interpolate(buff_index,
				(int_delay * dir) % delay_denom,
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	fb02 f303 	mul.w	r3, r2, r3
 8000828:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <HAL_SAI_TxCpltCallback+0x204>)
 800082a:	7812      	ldrb	r2, [r2, #0]
 800082c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000830:	fb01 f202 	mul.w	r2, r1, r2
 8000834:	1a9b      	subs	r3, r3, r2
		sai_fifo_b[i - 16] = interpolate(buff_index,
 8000836:	b2d9      	uxtb	r1, r3
 8000838:	8938      	ldrh	r0, [r7, #8]
 800083a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <HAL_SAI_TxCpltCallback+0x1ec>)
 8000844:	f7ff feba 	bl	80005bc <interpolate>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	3b10      	subs	r3, #16
 8000850:	4611      	mov	r1, r2
 8000852:	4a16      	ldr	r2, [pc, #88]	; (80008ac <HAL_SAI_TxCpltCallback+0x20c>)
 8000854:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				audio_buf_high, dir,
				AUDIO_HIGH_BUF_SIZE);
		int_delay += *delay_nom;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_SAI_TxCpltCallback+0x200>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	4413      	add	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]
		i++;
 8000864:	7cfb      	ldrb	r3, [r7, #19]
 8000866:	3301      	adds	r3, #1
 8000868:	74fb      	strb	r3, [r7, #19]
	while (i < 32) {
 800086a:	7cfb      	ldrb	r3, [r7, #19]
 800086c:	2b1f      	cmp	r3, #31
 800086e:	d9c0      	bls.n	80007f2 <HAL_SAI_TxCpltCallback+0x152>
  __ASM volatile ("cpsie i" : : : "memory");
 8000870:	b662      	cpsie	i
}
 8000872:	e000      	b.n	8000876 <HAL_SAI_TxCpltCallback+0x1d6>
	if(hsai == &hsai_BlockB1) return;
 8000874:	bf00      	nop
//	sprintf(msg1, "adc2 is %d\r\n", delay_nom);
//	HAL_UART_Transmit(&huart3, msg1, strlen((char*)msg1), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart3, msg1, strlen((char*)msg1), HAL_MAX_DELAY);


}
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001a0 	.word	0x200001a0
 8000880:	20000080 	.word	0x20000080
 8000884:	200008e4 	.word	0x200008e4
 8000888:	20000f64 	.word	0x20000f64
 800088c:	20000c38 	.word	0x20000c38
 8000890:	20000f68 	.word	0x20000f68
 8000894:	20000968 	.word	0x20000968
 8000898:	51eb851f 	.word	0x51eb851f
 800089c:	b60b60b7 	.word	0xb60b60b7
 80008a0:	20000f58 	.word	0x20000f58
 80008a4:	20000000 	.word	0x20000000
 80008a8:	200008e8 	.word	0x200008e8
 80008ac:	20000928 	.word	0x20000928

080008b0 <write_DAC1>:
uint8_t dac_ctrl1 = 0b10000100;
uint8_t dac_ctrl2 = 0b10000;
uint8_t dac1_vol = 0b00010000;


void write_DAC1(uint8_t reg, uint8_t* data) {
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b0ba      	sub	sp, #232	; 0xe8
 80008b4:	af04      	add	r7, sp, #16
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, DAC1_ADDR << 1, reg,
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	b29a      	uxth	r2, r3
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	2301      	movs	r3, #1
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2108      	movs	r1, #8
 80008d2:	4827      	ldr	r0, [pc, #156]	; (8000970 <write_DAC1+0xc0>)
 80008d4:	f002 fc8c 	bl	80031f0 <HAL_I2C_Mem_Write>
 80008d8:	4603      	mov	r3, r0
 80008da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);
	char str_fail[100];
	char str_success[100] = "Success on DAC1!\r\n";
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <write_DAC1+0xc4>)
 80008e0:	f107 040c 	add.w	r4, r7, #12
 80008e4:	461d      	mov	r5, r3
 80008e6:	6828      	ldr	r0, [r5, #0]
 80008e8:	6869      	ldr	r1, [r5, #4]
 80008ea:	68aa      	ldr	r2, [r5, #8]
 80008ec:	68eb      	ldr	r3, [r5, #12]
 80008ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f0:	8a2b      	ldrh	r3, [r5, #16]
 80008f2:	7caa      	ldrb	r2, [r5, #18]
 80008f4:	8023      	strh	r3, [r4, #0]
 80008f6:	4613      	mov	r3, r2
 80008f8:	70a3      	strb	r3, [r4, #2]
 80008fa:	f107 031f 	add.w	r3, r7, #31
 80008fe:	2251      	movs	r2, #81	; 0x51
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f006 fdb4 	bl	8007470 <memset>
	if (ret != HAL_OK) {
 8000908:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800090c:	2b00      	cmp	r3, #0
 800090e:	d01d      	beq.n	800094c <write_DAC1+0x9c>
		sprintf(str_fail, "Error is %d on DAC1; Register=0x%02X, Data=0x%02x\r\n", HAL_I2C_GetError(&hi2c2), reg, *data);
 8000910:	4817      	ldr	r0, [pc, #92]	; (8000970 <write_DAC1+0xc0>)
 8000912:	f002 fd81 	bl	8003418 <HAL_I2C_GetError>
 8000916:	4601      	mov	r1, r0
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	4613      	mov	r3, r2
 8000926:	460a      	mov	r2, r1
 8000928:	4913      	ldr	r1, [pc, #76]	; (8000978 <write_DAC1+0xc8>)
 800092a:	f006 fd81 	bl	8007430 <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 800092e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fc6c 	bl	8000210 <strlen>
 8000938:	4603      	mov	r3, r0
 800093a:	b29a      	uxth	r2, r3
 800093c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <write_DAC1+0xcc>)
 8000946:	f004 ff62 	bl	800580e <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}
}
 800094a:	e00d      	b.n	8000968 <write_DAC1+0xb8>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fc5d 	bl	8000210 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b29a      	uxth	r2, r3
 800095a:	f107 010c 	add.w	r1, r7, #12
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <write_DAC1+0xcc>)
 8000964:	f004 ff53 	bl	800580e <HAL_UART_Transmit>
}
 8000968:	bf00      	nop
 800096a:	37d8      	adds	r7, #216	; 0xd8
 800096c:	46bd      	mov	sp, r7
 800096e:	bdb0      	pop	{r4, r5, r7, pc}
 8000970:	200000c8 	.word	0x200000c8
 8000974:	08007dc4 	.word	0x08007dc4
 8000978:	08007d90 	.word	0x08007d90
 800097c:	200002e4 	.word	0x200002e4

08000980 <write_DAC2>:

void write_DAC2(uint8_t reg, uint8_t* data) {
 8000980:	b5b0      	push	{r4, r5, r7, lr}
 8000982:	b0ba      	sub	sp, #232	; 0xe8
 8000984:	af04      	add	r7, sp, #16
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, DAC2_ADDR << 1, reg,
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	b29a      	uxth	r2, r3
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	2301      	movs	r3, #1
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2301      	movs	r3, #1
 80009a0:	2148      	movs	r1, #72	; 0x48
 80009a2:	4827      	ldr	r0, [pc, #156]	; (8000a40 <write_DAC2+0xc0>)
 80009a4:	f002 fc24 	bl	80031f0 <HAL_I2C_Mem_Write>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);
	char str_fail[100];
	char str_success[100] = "Success occured!\r\n";
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <write_DAC2+0xc4>)
 80009b0:	f107 040c 	add.w	r4, r7, #12
 80009b4:	461d      	mov	r5, r3
 80009b6:	6828      	ldr	r0, [r5, #0]
 80009b8:	6869      	ldr	r1, [r5, #4]
 80009ba:	68aa      	ldr	r2, [r5, #8]
 80009bc:	68eb      	ldr	r3, [r5, #12]
 80009be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c0:	8a2b      	ldrh	r3, [r5, #16]
 80009c2:	7caa      	ldrb	r2, [r5, #18]
 80009c4:	8023      	strh	r3, [r4, #0]
 80009c6:	4613      	mov	r3, r2
 80009c8:	70a3      	strb	r3, [r4, #2]
 80009ca:	f107 031f 	add.w	r3, r7, #31
 80009ce:	2251      	movs	r2, #81	; 0x51
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f006 fd4c 	bl	8007470 <memset>
	if (ret != HAL_OK) {
 80009d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d01d      	beq.n	8000a1c <write_DAC2+0x9c>
		sprintf(str_fail, "Error is %d on DAC2; Register=0x%02X, Data=0x%02x\r\n", HAL_I2C_GetError(&hi2c2), reg, *data);
 80009e0:	4817      	ldr	r0, [pc, #92]	; (8000a40 <write_DAC2+0xc0>)
 80009e2:	f002 fd19 	bl	8003418 <HAL_I2C_GetError>
 80009e6:	4601      	mov	r1, r0
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	4613      	mov	r3, r2
 80009f6:	460a      	mov	r2, r1
 80009f8:	4913      	ldr	r1, [pc, #76]	; (8000a48 <write_DAC2+0xc8>)
 80009fa:	f006 fd19 	bl	8007430 <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 80009fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fc04 	bl	8000210 <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <write_DAC2+0xcc>)
 8000a16:	f004 fefa 	bl	800580e <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}
}
 8000a1a:	e00d      	b.n	8000a38 <write_DAC2+0xb8>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fbf5 	bl	8000210 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	f107 010c 	add.w	r1, r7, #12
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <write_DAC2+0xcc>)
 8000a34:	f004 feeb 	bl	800580e <HAL_UART_Transmit>
}
 8000a38:	bf00      	nop
 8000a3a:	37d8      	adds	r7, #216	; 0xd8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a40:	200000c8 	.word	0x200000c8
 8000a44:	08007e0c 	.word	0x08007e0c
 8000a48:	08007dd8 	.word	0x08007dd8
 8000a4c:	200002e4 	.word	0x200002e4

08000a50 <HAL_UART_RxCpltCallback>:


// UART INTERRUPT SERIAL COM
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

	        // Re-enable the UART receive interrupt
	        //HAL_UART_Receive_IT(&huart3, (uint8_t *)&uart3_rx_byte, 1);
	    //}

    if (huart->Instance == USART3)  // Check which UART generated the interrupt (3)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a24      	ldr	r2, [pc, #144]	; (8000af0 <HAL_UART_RxCpltCallback+0xa0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d141      	bne.n	8000ae6 <HAL_UART_RxCpltCallback+0x96>
    {
        // Append the received character to the buffer, if it's not the newline
        // Also check if we haven't exceeded our buffer size (100 for now)
        if (receivedData != '\n' && commandLength < MAX_COMMAND_LENGTH - 1)
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <HAL_UART_RxCpltCallback+0xa4>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b0a      	cmp	r3, #10
 8000a6a:	d00e      	beq.n	8000a8a <HAL_UART_RxCpltCallback+0x3a>
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <HAL_UART_RxCpltCallback+0xa8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b62      	cmp	r3, #98	; 0x62
 8000a72:	dc0a      	bgt.n	8000a8a <HAL_UART_RxCpltCallback+0x3a>
        {
            commandBuffer[commandLength++] = receivedData;
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <HAL_UART_RxCpltCallback+0xa8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	491f      	ldr	r1, [pc, #124]	; (8000af8 <HAL_UART_RxCpltCallback+0xa8>)
 8000a7c:	600a      	str	r2, [r1, #0]
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_UART_RxCpltCallback+0xa4>)
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	b2d1      	uxtb	r1, r2
 8000a84:	4a1d      	ldr	r2, [pc, #116]	; (8000afc <HAL_UART_RxCpltCallback+0xac>)
 8000a86:	54d1      	strb	r1, [r2, r3]
 8000a88:	e028      	b.n	8000adc <HAL_UART_RxCpltCallback+0x8c>
        }
        else if (receivedData == '\n')  // Received a newline character
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <HAL_UART_RxCpltCallback+0xa4>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b0a      	cmp	r3, #10
 8000a92:	d123      	bne.n	8000adc <HAL_UART_RxCpltCallback+0x8c>
        {
            // Ensure the string is null-terminated
            commandBuffer[commandLength] = '\0';
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_UART_RxCpltCallback+0xa8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a18      	ldr	r2, [pc, #96]	; (8000afc <HAL_UART_RxCpltCallback+0xac>)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	54d1      	strb	r1, [r2, r3]

            if (commandLength > 0) {  // Check if there's something to process
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_UART_RxCpltCallback+0xa8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	dd12      	ble.n	8000acc <HAL_UART_RxCpltCallback+0x7c>

//                if (commandBuffer[0] == 'T' && commandLength == 1){
//                    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
//                }
                                // USB_input_Vol
			 *delay_nom = 2 * (atoi(&commandBuffer[9]) - 80);
 8000aa6:	4816      	ldr	r0, [pc, #88]	; (8000b00 <HAL_UART_RxCpltCallback+0xb0>)
 8000aa8:	f006 fc32 	bl	8007310 <atoi>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <HAL_UART_RxCpltCallback+0xb4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
			 *delay_nom_low = 3 * *delay_nom;
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_UART_RxCpltCallback+0xb4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_UART_RxCpltCallback+0xb8>)
 8000ac2:	6819      	ldr	r1, [r3, #0]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	600b      	str	r3, [r1, #0]


            }

            // Reset the buffer and counter for the next command
            memset(commandBuffer, 0, MAX_COMMAND_LENGTH);
 8000acc:	2264      	movs	r2, #100	; 0x64
 8000ace:	2100      	movs	r1, #0
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <HAL_UART_RxCpltCallback+0xac>)
 8000ad2:	f006 fccd 	bl	8007470 <memset>
            commandLength = 0;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_UART_RxCpltCallback+0xa8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
        }

        // Prepare to receive the next character regardless
        HAL_UART_Receive_IT(&huart3, (uint8_t*)&receivedData, 1);
 8000adc:	2201      	movs	r2, #1
 8000ade:	4905      	ldr	r1, [pc, #20]	; (8000af4 <HAL_UART_RxCpltCallback+0xa4>)
 8000ae0:	480a      	ldr	r0, [pc, #40]	; (8000b0c <HAL_UART_RxCpltCallback+0xbc>)
 8000ae2:	f004 ff17 	bl	8005914 <HAL_UART_Receive_IT>
    }
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40004800 	.word	0x40004800
 8000af4:	20000874 	.word	0x20000874
 8000af8:	200008dc 	.word	0x200008dc
 8000afc:	20000878 	.word	0x20000878
 8000b00:	20000881 	.word	0x20000881
 8000b04:	20000f58 	.word	0x20000f58
 8000b08:	20000f5c 	.word	0x20000f5c
 8000b0c:	200002e4 	.word	0x200002e4

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b16:	f000 ff7e 	bl	8001a16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1a:	f000 f8cb 	bl	8000cb4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b1e:	f000 f937 	bl	8000d90 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b22:	f000 fb3f 	bl	80011a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b26:	f000 fb17 	bl	8001158 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b2a:	f000 fae7 	bl	80010fc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000b2e:	f000 f9c5 	bl	8000ebc <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000b32:	f000 fab3 	bl	800109c <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8000b36:	f000 fa01 	bl	8000f3c <MX_SAI1_Init>
  MX_ADC1_Init();
 8000b3a:	f000 f951 	bl	8000de0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&uart3_rx_byte, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4948      	ldr	r1, [pc, #288]	; (8000c64 <main+0x154>)
 8000b42:	4849      	ldr	r0, [pc, #292]	; (8000c68 <main+0x158>)
 8000b44:	f004 fee6 	bl	8005914 <HAL_UART_Receive_IT>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __disable_irq();
//  HAL_ADC_Start_DMA(&hadc1, &adc_get, 2);
  sai_fifo_a[0] = 0x7000U;
 8000b4c:	4b47      	ldr	r3, [pc, #284]	; (8000c6c <main+0x15c>)
 8000b4e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000b52:	601a      	str	r2, [r3, #0]
  sai_fifo_b[0] = 0x7000U;
 8000b54:	4b46      	ldr	r3, [pc, #280]	; (8000c70 <main+0x160>)
 8000b56:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000b5a:	601a      	str	r2, [r3, #0]
  *delay_nom = 0;
 8000b5c:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <main+0x164>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
  int error;
  error = HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint32_t * )&sai_fifo_a, 16);
 8000b64:	2210      	movs	r2, #16
 8000b66:	4941      	ldr	r1, [pc, #260]	; (8000c6c <main+0x15c>)
 8000b68:	4843      	ldr	r0, [pc, #268]	; (8000c78 <main+0x168>)
 8000b6a:	f004 fc5f 	bl	800542c <HAL_SAI_Transmit_DMA>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
  char error_msg[50];
  sprintf(error_msg, "Error is %d on DMA1\r\n", error);
 8000b72:	463b      	mov	r3, r7
 8000b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b76:	4941      	ldr	r1, [pc, #260]	; (8000c7c <main+0x16c>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f006 fc59 	bl	8007430 <siprintf>
  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fb45 	bl	8000210 <strlen>
 8000b86:	4603      	mov	r3, r0
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4639      	mov	r1, r7
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	4835      	ldr	r0, [pc, #212]	; (8000c68 <main+0x158>)
 8000b92:	f004 fe3c 	bl	800580e <HAL_UART_Transmit>

  error = HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint32_t * )&sai_fifo_b, 16);
 8000b96:	2210      	movs	r2, #16
 8000b98:	4935      	ldr	r1, [pc, #212]	; (8000c70 <main+0x160>)
 8000b9a:	4839      	ldr	r0, [pc, #228]	; (8000c80 <main+0x170>)
 8000b9c:	f004 fc46 	bl	800542c <HAL_SAI_Transmit_DMA>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  sprintf(error_msg, "Error is %d on DMA2\r\n", error);
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ba8:	4936      	ldr	r1, [pc, #216]	; (8000c84 <main+0x174>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 fc40 	bl	8007430 <siprintf>
  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fb2c 	bl	8000210 <strlen>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	4829      	ldr	r0, [pc, #164]	; (8000c68 <main+0x158>)
 8000bc4:	f004 fe23 	bl	800580e <HAL_UART_Transmit>

  //HAL_Delay(1000);

  sprintf(error_msg, "UART good!\r\n");
 8000bc8:	463b      	mov	r3, r7
 8000bca:	492f      	ldr	r1, [pc, #188]	; (8000c88 <main+0x178>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f006 fc2f 	bl	8007430 <siprintf>

  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fb1b 	bl	8000210 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	4639      	mov	r1, r7
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	4820      	ldr	r0, [pc, #128]	; (8000c68 <main+0x158>)
 8000be6:	f004 fe12 	bl	800580e <HAL_UART_Transmit>

  write_DAC1(PLL_CLK_CTRL0, &pll_clk_data);
 8000bea:	4928      	ldr	r1, [pc, #160]	; (8000c8c <main+0x17c>)
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fe5f 	bl	80008b0 <write_DAC1>
  write_DAC1(DAC_MUTE1, &mute1_data_DAC1);
 8000bf2:	4927      	ldr	r1, [pc, #156]	; (8000c90 <main+0x180>)
 8000bf4:	2009      	movs	r0, #9
 8000bf6:	f7ff fe5b 	bl	80008b0 <write_DAC1>
  write_DAC1(DAC_MUTE2, &mute2_data_DAC1);
 8000bfa:	4926      	ldr	r1, [pc, #152]	; (8000c94 <main+0x184>)
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f7ff fe57 	bl	80008b0 <write_DAC1>
  write_DAC1(DAC_CTRL0, &dac_ctrl0);
 8000c02:	4925      	ldr	r1, [pc, #148]	; (8000c98 <main+0x188>)
 8000c04:	2006      	movs	r0, #6
 8000c06:	f7ff fe53 	bl	80008b0 <write_DAC1>
  write_DAC1(DAC_CTRL1, &dac_ctrl1);
 8000c0a:	4924      	ldr	r1, [pc, #144]	; (8000c9c <main+0x18c>)
 8000c0c:	2007      	movs	r0, #7
 8000c0e:	f7ff fe4f 	bl	80008b0 <write_DAC1>
  write_DAC1(DAC_CTRL2, &dac_ctrl2);
 8000c12:	4923      	ldr	r1, [pc, #140]	; (8000ca0 <main+0x190>)
 8000c14:	2008      	movs	r0, #8
 8000c16:	f7ff fe4b 	bl	80008b0 <write_DAC1>
  write_DAC1(master_volume_control, &dac1_vol);
 8000c1a:	4922      	ldr	r1, [pc, #136]	; (8000ca4 <main+0x194>)
 8000c1c:	200b      	movs	r0, #11
 8000c1e:	f7ff fe47 	bl	80008b0 <write_DAC1>


  write_DAC2(PLL_CLK_CTRL0, &pll_clk_data);
 8000c22:	491a      	ldr	r1, [pc, #104]	; (8000c8c <main+0x17c>)
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff feab 	bl	8000980 <write_DAC2>
  write_DAC2(DAC_MUTE1, &mute1_data_DAC2);
 8000c2a:	491f      	ldr	r1, [pc, #124]	; (8000ca8 <main+0x198>)
 8000c2c:	2009      	movs	r0, #9
 8000c2e:	f7ff fea7 	bl	8000980 <write_DAC2>
  write_DAC2(DAC_MUTE2, &mute2_data_DAC2);
 8000c32:	491e      	ldr	r1, [pc, #120]	; (8000cac <main+0x19c>)
 8000c34:	200a      	movs	r0, #10
 8000c36:	f7ff fea3 	bl	8000980 <write_DAC2>
  write_DAC2(DAC_CTRL0, &dac_ctrl0);
 8000c3a:	4917      	ldr	r1, [pc, #92]	; (8000c98 <main+0x188>)
 8000c3c:	2006      	movs	r0, #6
 8000c3e:	f7ff fe9f 	bl	8000980 <write_DAC2>
  write_DAC2(DAC_CTRL1, &dac_ctrl1);
 8000c42:	4916      	ldr	r1, [pc, #88]	; (8000c9c <main+0x18c>)
 8000c44:	2007      	movs	r0, #7
 8000c46:	f7ff fe9b 	bl	8000980 <write_DAC2>
  write_DAC2(DAC_CTRL2, &dac_ctrl2);
 8000c4a:	4915      	ldr	r1, [pc, #84]	; (8000ca0 <main+0x190>)
 8000c4c:	2008      	movs	r0, #8
 8000c4e:	f7ff fe97 	bl	8000980 <write_DAC2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c52:	b662      	cpsie	i
}
 8000c54:	bf00      	nop

  __enable_irq();

  // Start reception with interrupt
  HAL_UART_Receive_IT(&huart3, &receivedData, 1);
 8000c56:	2201      	movs	r2, #1
 8000c58:	4915      	ldr	r1, [pc, #84]	; (8000cb0 <main+0x1a0>)
 8000c5a:	4803      	ldr	r0, [pc, #12]	; (8000c68 <main+0x158>)
 8000c5c:	f004 fe5a 	bl	8005914 <HAL_UART_Receive_IT>
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <main+0x150>
 8000c62:	bf00      	nop
 8000c64:	200008e0 	.word	0x200008e0
 8000c68:	200002e4 	.word	0x200002e4
 8000c6c:	200008e8 	.word	0x200008e8
 8000c70:	20000928 	.word	0x20000928
 8000c74:	20000f58 	.word	0x20000f58
 8000c78:	2000011c 	.word	0x2000011c
 8000c7c:	08007e20 	.word	0x08007e20
 8000c80:	200001a0 	.word	0x200001a0
 8000c84:	08007e38 	.word	0x08007e38
 8000c88:	08007e50 	.word	0x08007e50
 8000c8c:	20000001 	.word	0x20000001
 8000c90:	20000f60 	.word	0x20000f60
 8000c94:	20000f61 	.word	0x20000f61
 8000c98:	20000002 	.word	0x20000002
 8000c9c:	20000003 	.word	0x20000003
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	20000005 	.word	0x20000005
 8000ca8:	20000f62 	.word	0x20000f62
 8000cac:	20000f63 	.word	0x20000f63
 8000cb0:	20000874 	.word	0x20000874

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b094      	sub	sp, #80	; 0x50
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	2230      	movs	r2, #48	; 0x30
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f006 fbd4 	bl	8007470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cd8:	f002 ffd0 	bl	8003c7c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <SystemClock_Config+0xd4>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a29      	ldr	r2, [pc, #164]	; (8000d88 <SystemClock_Config+0xd4>)
 8000ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <SystemClock_Config+0xd4>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf4:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <SystemClock_Config+0xd8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a24      	ldr	r2, [pc, #144]	; (8000d8c <SystemClock_Config+0xd8>)
 8000cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <SystemClock_Config+0xd8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d24:	23d8      	movs	r3, #216	; 0xd8
 8000d26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d2c:	2309      	movs	r3, #9
 8000d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d30:	f107 0320 	add.w	r3, r7, #32
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 f801 	bl	8003d3c <HAL_RCC_OscConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d40:	f000 faf8 	bl	8001334 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d44:	f002 ffaa 	bl	8003c9c <HAL_PWREx_EnableOverDrive>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d4e:	f000 faf1 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d52:	230f      	movs	r3, #15
 8000d54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d56:	2302      	movs	r3, #2
 8000d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2107      	movs	r1, #7
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fa87 	bl	8004284 <HAL_RCC_ClockConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d7c:	f000 fada 	bl	8001334 <Error_Handler>
  }
}
 8000d80:	bf00      	nop
 8000d82:	3750      	adds	r7, #80	; 0x50
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40007000 	.word	0x40007000

08000d90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0a2      	sub	sp, #136	; 0x88
 8000d94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2284      	movs	r2, #132	; 0x84
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 fb67 	bl	8007470 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
 8000da2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000da6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000da8:	2332      	movs	r3, #50	; 0x32
 8000daa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fc82 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 8000dd2:	f000 faaf 	bl	8001334 <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3788      	adds	r7, #136	; 0x88
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000df2:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000df4:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <MX_ADC1_Init+0xd4>)
 8000df6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000dfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e22:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <MX_ADC1_Init+0xd8>)
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e2e:	2203      	movs	r2, #3
 8000e30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e40:	481b      	ldr	r0, [pc, #108]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e42:	f000 fe69 	bl	8001b18 <HAL_ADC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e4c:	f000 fa72 	bl	8001334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e62:	f001 f803 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e6c:	f000 fa62 	bl	8001334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e70:	2303      	movs	r3, #3
 8000e72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e7e:	f000 fff5 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e88:	f000 fa54 	bl	8001334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e90:	2303      	movs	r3, #3
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e9a:	f000 ffe7 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ea4:	f000 fa46 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000080 	.word	0x20000080
 8000eb4:	40012000 	.word	0x40012000
 8000eb8:	0f000001 	.word	0x0f000001

08000ebc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <MX_I2C2_Init+0x78>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x80102AFF;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <MX_I2C2_Init+0x7c>)
 8000eca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ef6:	480e      	ldr	r0, [pc, #56]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ef8:	f002 f8ea 	bl	80030d0 <HAL_I2C_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f02:	f000 fa17 	bl	8001334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000f0a:	f002 fcd7 	bl	80038bc <HAL_I2CEx_ConfigAnalogFilter>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f14:	f000 fa0e 	bl	8001334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000f1c:	f002 fd19 	bl	8003952 <HAL_I2CEx_ConfigDigitalFilter>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 fa05 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000c8 	.word	0x200000c8
 8000f34:	40005800 	.word	0x40005800
 8000f38:	80102aff 	.word	0x80102aff

08000f3c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f40:	4b52      	ldr	r3, [pc, #328]	; (800108c <MX_SAI1_Init+0x150>)
 8000f42:	4a53      	ldr	r2, [pc, #332]	; (8001090 <MX_SAI1_Init+0x154>)
 8000f44:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f46:	4b51      	ldr	r3, [pc, #324]	; (800108c <MX_SAI1_Init+0x150>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f4c:	4b4f      	ldr	r3, [pc, #316]	; (800108c <MX_SAI1_Init+0x150>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000f52:	4b4e      	ldr	r3, [pc, #312]	; (800108c <MX_SAI1_Init+0x150>)
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f58:	4b4c      	ldr	r3, [pc, #304]	; (800108c <MX_SAI1_Init+0x150>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000f5e:	4b4b      	ldr	r3, [pc, #300]	; (800108c <MX_SAI1_Init+0x150>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f64:	4b49      	ldr	r3, [pc, #292]	; (800108c <MX_SAI1_Init+0x150>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f6a:	4b48      	ldr	r3, [pc, #288]	; (800108c <MX_SAI1_Init+0x150>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f70:	4b46      	ldr	r3, [pc, #280]	; (800108c <MX_SAI1_Init+0x150>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f76:	4b45      	ldr	r3, [pc, #276]	; (800108c <MX_SAI1_Init+0x150>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000f7c:	4b43      	ldr	r3, [pc, #268]	; (800108c <MX_SAI1_Init+0x150>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.Mckdiv = 2;
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <MX_SAI1_Init+0x150>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f88:	4b40      	ldr	r3, [pc, #256]	; (800108c <MX_SAI1_Init+0x150>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f8e:	4b3f      	ldr	r3, [pc, #252]	; (800108c <MX_SAI1_Init+0x150>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f94:	4b3d      	ldr	r3, [pc, #244]	; (800108c <MX_SAI1_Init+0x150>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	; (800108c <MX_SAI1_Init+0x150>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	; (800108c <MX_SAI1_Init+0x150>)
 8000fa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000fa8:	4b38      	ldr	r3, [pc, #224]	; (800108c <MX_SAI1_Init+0x150>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fae:	4b37      	ldr	r3, [pc, #220]	; (800108c <MX_SAI1_Init+0x150>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <MX_SAI1_Init+0x150>)
 8000fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fba:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000fbc:	4b33      	ldr	r3, [pc, #204]	; (800108c <MX_SAI1_Init+0x150>)
 8000fbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fc2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000fc4:	4b31      	ldr	r3, [pc, #196]	; (800108c <MX_SAI1_Init+0x150>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fca:	4b30      	ldr	r3, [pc, #192]	; (800108c <MX_SAI1_Init+0x150>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 16;
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <MX_SAI1_Init+0x150>)
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <MX_SAI1_Init+0x150>)
 8000fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fdc:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000fde:	482b      	ldr	r0, [pc, #172]	; (800108c <MX_SAI1_Init+0x150>)
 8000fe0:	f004 f8a6 	bl	8005130 <HAL_SAI_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_SAI1_Init+0xb2>
  {
    Error_Handler();
 8000fea:	f000 f9a3 	bl	8001334 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <MX_SAI1_Init+0x158>)
 8000ff0:	4a29      	ldr	r2, [pc, #164]	; (8001098 <MX_SAI1_Init+0x15c>)
 8000ff2:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <MX_SAI1_Init+0x158>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <MX_SAI1_Init+0x158>)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <MX_SAI1_Init+0x158>)
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <MX_SAI1_Init+0x158>)
 8001008:	2200      	movs	r2, #0
 800100a:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_SAI1_Init+0x158>)
 800100e:	2201      	movs	r2, #1
 8001010:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_SAI1_Init+0x158>)
 8001014:	2201      	movs	r2, #1
 8001016:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001018:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_SAI1_Init+0x158>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_SAI1_Init+0x158>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_SAI1_Init+0x158>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_SAI1_Init+0x158>)
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_SAI1_Init+0x158>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_SAI1_Init+0x158>)
 8001038:	2200      	movs	r2, #0
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 256;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_SAI1_Init+0x158>)
 800103e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_SAI1_Init+0x158>)
 8001046:	2201      	movs	r2, #1
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_SAI1_Init+0x158>)
 800104c:	2200      	movs	r2, #0
 800104e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_SAI1_Init+0x158>)
 8001052:	2200      	movs	r2, #0
 8001054:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_SAI1_Init+0x158>)
 8001058:	2200      	movs	r2, #0
 800105a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <MX_SAI1_Init+0x158>)
 800105e:	2200      	movs	r2, #0
 8001060:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_SAI1_Init+0x158>)
 8001064:	2200      	movs	r2, #0
 8001066:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 16;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_SAI1_Init+0x158>)
 800106a:	2210      	movs	r2, #16
 800106c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_SAI1_Init+0x158>)
 8001070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001074:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <MX_SAI1_Init+0x158>)
 8001078:	f004 f85a 	bl	8005130 <HAL_SAI_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_SAI1_Init+0x14a>
  {
    Error_Handler();
 8001082:	f000 f957 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000011c 	.word	0x2000011c
 8001090:	40015804 	.word	0x40015804
 8001094:	200001a0 	.word	0x200001a0
 8001098:	40015824 	.word	0x40015824

0800109c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_USART3_UART_Init+0x58>)
 80010a2:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <MX_USART3_UART_Init+0x5c>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_USART3_UART_Init+0x58>)
 80010a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_USART3_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_USART3_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_USART3_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_USART3_UART_Init+0x58>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_USART3_UART_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_USART3_UART_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_USART3_UART_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_USART3_UART_Init+0x58>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_USART3_UART_Init+0x58>)
 80010e0:	f004 fb47 	bl	8005772 <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010ea:	f000 f923 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200002e4 	.word	0x200002e4
 80010f8:	40004800 	.word	0x40004800

080010fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001102:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001106:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110a:	2206      	movs	r2, #6
 800110c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001110:	2202      	movs	r2, #2
 8001112:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111c:	2202      	movs	r2, #2
 800111e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001122:	2201      	movs	r2, #1
 8001124:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001134:	2201      	movs	r2, #1
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001140:	f002 fc53 	bl	80039ea <HAL_PCD_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800114a:	f000 f8f3 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000036c 	.word	0x2000036c

08001158 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_DMA_Init+0x48>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <MX_DMA_Init+0x48>)
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <MX_DMA_Init+0x48>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2039      	movs	r0, #57	; 0x39
 800117c:	f001 f9a1 	bl	80024c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001180:	2039      	movs	r0, #57	; 0x39
 8001182:	f001 f9ba 	bl	80024fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	203c      	movs	r0, #60	; 0x3c
 800118c:	f001 f999 	bl	80024c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001190:	203c      	movs	r0, #60	; 0x3c
 8001192:	f001 f9b2 	bl	80024fa <HAL_NVIC_EnableIRQ>

}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08e      	sub	sp, #56	; 0x38
 80011a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ba:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <MX_GPIO_Init+0x184>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a5a      	ldr	r2, [pc, #360]	; (8001328 <MX_GPIO_Init+0x184>)
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b58      	ldr	r3, [pc, #352]	; (8001328 <MX_GPIO_Init+0x184>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	623b      	str	r3, [r7, #32]
 80011d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	4b55      	ldr	r3, [pc, #340]	; (8001328 <MX_GPIO_Init+0x184>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a54      	ldr	r2, [pc, #336]	; (8001328 <MX_GPIO_Init+0x184>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b52      	ldr	r3, [pc, #328]	; (8001328 <MX_GPIO_Init+0x184>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ea:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <MX_GPIO_Init+0x184>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <MX_GPIO_Init+0x184>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <MX_GPIO_Init+0x184>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	4b49      	ldr	r3, [pc, #292]	; (8001328 <MX_GPIO_Init+0x184>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a48      	ldr	r2, [pc, #288]	; (8001328 <MX_GPIO_Init+0x184>)
 8001208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b46      	ldr	r3, [pc, #280]	; (8001328 <MX_GPIO_Init+0x184>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b43      	ldr	r3, [pc, #268]	; (8001328 <MX_GPIO_Init+0x184>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a42      	ldr	r2, [pc, #264]	; (8001328 <MX_GPIO_Init+0x184>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b40      	ldr	r3, [pc, #256]	; (8001328 <MX_GPIO_Init+0x184>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <MX_GPIO_Init+0x184>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a3c      	ldr	r2, [pc, #240]	; (8001328 <MX_GPIO_Init+0x184>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b3a      	ldr	r3, [pc, #232]	; (8001328 <MX_GPIO_Init+0x184>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <MX_GPIO_Init+0x184>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a36      	ldr	r2, [pc, #216]	; (8001328 <MX_GPIO_Init+0x184>)
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b34      	ldr	r3, [pc, #208]	; (8001328 <MX_GPIO_Init+0x184>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001262:	4b31      	ldr	r3, [pc, #196]	; (8001328 <MX_GPIO_Init+0x184>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a30      	ldr	r2, [pc, #192]	; (8001328 <MX_GPIO_Init+0x184>)
 8001268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <MX_GPIO_Init+0x184>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001280:	482a      	ldr	r0, [pc, #168]	; (800132c <MX_GPIO_Init+0x188>)
 8001282:	f001 ff0b 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2140      	movs	r1, #64	; 0x40
 800128a:	4829      	ldr	r0, [pc, #164]	; (8001330 <MX_GPIO_Init+0x18c>)
 800128c:	f001 ff06 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a2:	230b      	movs	r3, #11
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	4619      	mov	r1, r3
 80012ac:	481f      	ldr	r0, [pc, #124]	; (800132c <MX_GPIO_Init+0x188>)
 80012ae:	f001 fd49 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80012b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012b8:	2311      	movs	r3, #17
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	4818      	ldr	r0, [pc, #96]	; (800132c <MX_GPIO_Init+0x188>)
 80012cc:	f001 fd3a 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4812      	ldr	r0, [pc, #72]	; (8001330 <MX_GPIO_Init+0x18c>)
 80012e8:	f001 fd2c 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <MX_GPIO_Init+0x18c>)
 8001300:	f001 fd20 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	4619      	mov	r1, r3
 800131a:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_GPIO_Init+0x188>)
 800131c:	f001 fd12 	bl	8002d44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	; 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	40020400 	.word	0x40020400
 8001330:	40021800 	.word	0x40021800

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b5b0      	push	{r4, r5, r7, lr}
 8001336:	b09a      	sub	sp, #104	; 0x68
 8001338:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800133a:	b672      	cpsid	i
}
 800133c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char str[100] = "Error handler!\r\n";
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <Error_Handler+0x48>)
 8001340:	1d3c      	adds	r4, r7, #4
 8001342:	461d      	mov	r5, r3
 8001344:	6828      	ldr	r0, [r5, #0]
 8001346:	6869      	ldr	r1, [r5, #4]
 8001348:	68aa      	ldr	r2, [r5, #8]
 800134a:	68eb      	ldr	r3, [r5, #12]
 800134c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134e:	7c2b      	ldrb	r3, [r5, #16]
 8001350:	7023      	strb	r3, [r4, #0]
 8001352:	f107 0315 	add.w	r3, r7, #21
 8001356:	2253      	movs	r2, #83	; 0x53
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f006 f888 	bl	8007470 <memset>
  HAL_UART_Transmit(&huart3, str, strlen((char*)str), HAL_MAX_DELAY);
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ff54 	bl	8000210 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	1d39      	adds	r1, r7, #4
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <Error_Handler+0x4c>)
 8001374:	f004 fa4b 	bl	800580e <HAL_UART_Transmit>

  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x44>
 800137a:	bf00      	nop
 800137c:	08007e60 	.word	0x08007e60
 8001380:	200002e4 	.word	0x200002e4

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_MspInit+0x44>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_MspInit+0x44>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_MspInit+0x44>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_MspInit+0x44>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_MspInit+0x44>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_MspInit+0x44>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a15      	ldr	r2, [pc, #84]	; (8001440 <HAL_ADC_MspInit+0x74>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d123      	bne.n	8001436 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_ADC_MspInit+0x78>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <HAL_ADC_MspInit+0x78>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_ADC_MspInit+0x78>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_ADC_MspInit+0x78>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_ADC_MspInit+0x78>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_ADC_MspInit+0x78>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 800141e:	2319      	movs	r3, #25
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001422:	2303      	movs	r3, #3
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <HAL_ADC_MspInit+0x7c>)
 8001432:	f001 fc87 	bl	8002d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40012000 	.word	0x40012000
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000

0800144c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0aa      	sub	sp, #168	; 0xa8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2284      	movs	r2, #132	; 0x84
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f005 ffff 	bl	8007470 <memset>
  if(hi2c->Instance==I2C2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a21      	ldr	r2, [pc, #132]	; (80014fc <HAL_I2C_MspInit+0xb0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d13b      	bne.n	80014f4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800147c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001480:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001482:	2300      	movs	r3, #0
 8001484:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4618      	mov	r0, r3
 800148c:	f003 f920 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001496:	f7ff ff4d 	bl	8001334 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_I2C_MspInit+0xb4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a18      	ldr	r2, [pc, #96]	; (8001500 <HAL_I2C_MspInit+0xb4>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_I2C_MspInit+0xb4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014b2:	2303      	movs	r3, #3
 80014b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b8:	2312      	movs	r3, #18
 80014ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014ca:	2304      	movs	r3, #4
 80014cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014d4:	4619      	mov	r1, r3
 80014d6:	480b      	ldr	r0, [pc, #44]	; (8001504 <HAL_I2C_MspInit+0xb8>)
 80014d8:	f001 fc34 	bl	8002d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_I2C_MspInit+0xb4>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_I2C_MspInit+0xb4>)
 80014e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014e6:	6413      	str	r3, [r2, #64]	; 0x40
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_I2C_MspInit+0xb4>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014f4:	bf00      	nop
 80014f6:	37a8      	adds	r7, #168	; 0xa8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40005800 	.word	0x40005800
 8001500:	40023800 	.word	0x40023800
 8001504:	40021400 	.word	0x40021400

08001508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0aa      	sub	sp, #168	; 0xa8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	2284      	movs	r2, #132	; 0x84
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f005 ffa1 	bl	8007470 <memset>
  if(huart->Instance==USART3)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <HAL_UART_MspInit+0xc4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d144      	bne.n	80015c2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800153e:	2300      	movs	r3, #0
 8001540:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	4618      	mov	r0, r3
 8001548:	f003 f8c2 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001552:	f7ff feef 	bl	8001334 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <HAL_UART_MspInit+0xc8>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_UART_MspInit+0xc8>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_UART_MspInit+0xc8>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_UART_MspInit+0xc8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_UART_MspInit+0xc8>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_UART_MspInit+0xc8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001586:	f44f 7340 	mov.w	r3, #768	; 0x300
 800158a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001594:	2301      	movs	r3, #1
 8001596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a0:	2307      	movs	r3, #7
 80015a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015aa:	4619      	mov	r1, r3
 80015ac:	4809      	ldr	r0, [pc, #36]	; (80015d4 <HAL_UART_MspInit+0xcc>)
 80015ae:	f001 fbc9 	bl	8002d44 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2027      	movs	r0, #39	; 0x27
 80015b8:	f000 ff83 	bl	80024c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015bc:	2027      	movs	r0, #39	; 0x27
 80015be:	f000 ff9c 	bl	80024fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	37a8      	adds	r7, #168	; 0xa8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40004800 	.word	0x40004800
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020c00 	.word	0x40020c00

080015d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0ac      	sub	sp, #176	; 0xb0
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f0:	f107 0318 	add.w	r3, r7, #24
 80015f4:	2284      	movs	r2, #132	; 0x84
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f005 ff39 	bl	8007470 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001606:	d159      	bne.n	80016bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001608:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800160c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001614:	f107 0318 	add.w	r3, r7, #24
 8001618:	4618      	mov	r0, r3
 800161a:	f003 f859 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001624:	f7ff fe86 	bl	8001334 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_PCD_MspInit+0xec>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <HAL_PCD_MspInit+0xec>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6313      	str	r3, [r2, #48]	; 0x30
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <HAL_PCD_MspInit+0xec>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001640:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800165a:	230a      	movs	r3, #10
 800165c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001664:	4619      	mov	r1, r3
 8001666:	4818      	ldr	r0, [pc, #96]	; (80016c8 <HAL_PCD_MspInit+0xf0>)
 8001668:	f001 fb6c 	bl	8002d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800166c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001684:	4619      	mov	r1, r3
 8001686:	4810      	ldr	r0, [pc, #64]	; (80016c8 <HAL_PCD_MspInit+0xf0>)
 8001688:	f001 fb5c 	bl	8002d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_PCD_MspInit+0xec>)
 800168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001690:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <HAL_PCD_MspInit+0xec>)
 8001692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001696:	6353      	str	r3, [r2, #52]	; 0x34
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_PCD_MspInit+0xec>)
 800169a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <HAL_PCD_MspInit+0xec>)
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <HAL_PCD_MspInit+0xec>)
 80016aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ae:	6453      	str	r3, [r2, #68]	; 0x44
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_PCD_MspInit+0xec>)
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	37b0      	adds	r7, #176	; 0xb0
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000

080016cc <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a69      	ldr	r2, [pc, #420]	; (8001880 <HAL_SAI_MspInit+0x1b4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d16b      	bne.n	80017b6 <HAL_SAI_MspInit+0xea>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80016de:	4b69      	ldr	r3, [pc, #420]	; (8001884 <HAL_SAI_MspInit+0x1b8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10b      	bne.n	80016fe <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80016e6:	4b68      	ldr	r3, [pc, #416]	; (8001888 <HAL_SAI_MspInit+0x1bc>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a67      	ldr	r2, [pc, #412]	; (8001888 <HAL_SAI_MspInit+0x1bc>)
 80016ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b65      	ldr	r3, [pc, #404]	; (8001888 <HAL_SAI_MspInit+0x1bc>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80016fe:	4b61      	ldr	r3, [pc, #388]	; (8001884 <HAL_SAI_MspInit+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	4a5f      	ldr	r2, [pc, #380]	; (8001884 <HAL_SAI_MspInit+0x1b8>)
 8001706:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001708:	2304      	movs	r3, #4
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001718:	2306      	movs	r3, #6
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	485a      	ldr	r0, [pc, #360]	; (800188c <HAL_SAI_MspInit+0x1c0>)
 8001724:	f001 fb0e 	bl	8002d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001728:	2370      	movs	r3, #112	; 0x70
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001738:	2306      	movs	r3, #6
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4852      	ldr	r0, [pc, #328]	; (800188c <HAL_SAI_MspInit+0x1c0>)
 8001744:	f001 fafe 	bl	8002d44 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001748:	4b51      	ldr	r3, [pc, #324]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 800174a:	4a52      	ldr	r2, [pc, #328]	; (8001894 <HAL_SAI_MspInit+0x1c8>)
 800174c:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 800174e:	4b50      	ldr	r3, [pc, #320]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001754:	4b4e      	ldr	r3, [pc, #312]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 8001756:	2240      	movs	r2, #64	; 0x40
 8001758:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800175a:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001760:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 8001762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001766:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001768:	4b49      	ldr	r3, [pc, #292]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 800176a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800176e:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001770:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 8001772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001776:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001778:	4b45      	ldr	r3, [pc, #276]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 800177a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177e:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001780:	4b43      	ldr	r3, [pc, #268]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 8001782:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001786:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001788:	4b41      	ldr	r3, [pc, #260]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800178e:	4840      	ldr	r0, [pc, #256]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 8001790:	f000 fece 	bl	8002530 <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_SAI_MspInit+0xd2>
    {
      Error_Handler();
 800179a:	f7ff fdcb 	bl	8001334 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 80017a2:	671a      	str	r2, [r3, #112]	; 0x70
 80017a4:	4a3a      	ldr	r2, [pc, #232]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a38      	ldr	r2, [pc, #224]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 80017ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80017b0:	4a37      	ldr	r2, [pc, #220]	; (8001890 <HAL_SAI_MspInit+0x1c4>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a37      	ldr	r2, [pc, #220]	; (8001898 <HAL_SAI_MspInit+0x1cc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d15b      	bne.n	8001878 <HAL_SAI_MspInit+0x1ac>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80017c0:	4b30      	ldr	r3, [pc, #192]	; (8001884 <HAL_SAI_MspInit+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10b      	bne.n	80017e0 <HAL_SAI_MspInit+0x114>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_SAI_MspInit+0x1bc>)
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	4a2e      	ldr	r2, [pc, #184]	; (8001888 <HAL_SAI_MspInit+0x1bc>)
 80017ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017d2:	6453      	str	r3, [r2, #68]	; 0x44
 80017d4:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <HAL_SAI_MspInit+0x1bc>)
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_SAI_MspInit+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	4a27      	ldr	r2, [pc, #156]	; (8001884 <HAL_SAI_MspInit+0x1b8>)
 80017e8:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ea:	2308      	movs	r3, #8
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80017fa:	2306      	movs	r3, #6
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4821      	ldr	r0, [pc, #132]	; (800188c <HAL_SAI_MspInit+0x1c0>)
 8001806:	f001 fa9d 	bl	8002d44 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 800180c:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <HAL_SAI_MspInit+0x1d4>)
 800180e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 8001812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001816:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 8001826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182a:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 800182e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001832:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 8001836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183a:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 800183e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001842:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001850:	4812      	ldr	r0, [pc, #72]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 8001852:	f000 fe6d 	bl	8002530 <HAL_DMA_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_SAI_MspInit+0x194>
    {
      Error_Handler();
 800185c:	f7ff fd6a 	bl	8001334 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a0e      	ldr	r2, [pc, #56]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 8001864:	671a      	str	r2, [r3, #112]	; 0x70
 8001866:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 8001870:	66da      	str	r2, [r3, #108]	; 0x6c
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_SAI_MspInit+0x1d0>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40015804 	.word	0x40015804
 8001884:	20000f6c 	.word	0x20000f6c
 8001888:	40023800 	.word	0x40023800
 800188c:	40021000 	.word	0x40021000
 8001890:	20000224 	.word	0x20000224
 8001894:	40026428 	.word	0x40026428
 8001898:	40015824 	.word	0x40015824
 800189c:	20000284 	.word	0x20000284
 80018a0:	40026470 	.word	0x40026470

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f0:	f000 f8ce 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <USART3_IRQHandler+0x10>)
 80018fe:	f004 f84d 	bl	800599c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200002e4 	.word	0x200002e4

0800190c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <DMA2_Stream1_IRQHandler+0x10>)
 8001912:	f000 ffad 	bl	8002870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000224 	.word	0x20000224

08001920 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA2_Stream4_IRQHandler+0x10>)
 8001926:	f000 ffa3 	bl	8002870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000284 	.word	0x20000284

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f005 fd8c 	bl	8007480 <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20050000 	.word	0x20050000
 8001994:	00000400 	.word	0x00000400
 8001998:	20000f70 	.word	0x20000f70
 800199c:	200010c0 	.word	0x200010c0

080019a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ca:	490e      	ldr	r1, [pc, #56]	; (8001a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e0:	4c0b      	ldr	r4, [pc, #44]	; (8001a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ee:	f7ff ffd7 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f005 fd4b 	bl	800748c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7ff f88b 	bl	8000b10 <main>
  bx  lr    
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001a08:	08007fd8 	.word	0x08007fd8
  ldr r2, =_sbss
 8001a0c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001a10:	200010c0 	.word	0x200010c0

08001a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC_IRQHandler>

08001a16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	f000 fd46 	bl	80024ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f000 f805 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a26:	f7ff fcad 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fd61 	bl	8002516 <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 fd29 	bl	80024c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000010 	.word	0x20000010
 8001a8c:	2000000c 	.word	0x2000000c

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000010 	.word	0x20000010
 8001ab4:	20000f74 	.word	0x20000f74

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000f74 	.word	0x20000f74

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff ffee 	bl	8001ab8 <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d005      	beq.n	8001af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_Delay+0x44>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001af6:	bf00      	nop
 8001af8:	f7ff ffde 	bl	8001ab8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f7      	bhi.n	8001af8 <HAL_Delay+0x28>
  {
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000010 	.word	0x20000010

08001b18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e031      	b.n	8001b92 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fc48 	bl	80013cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d116      	bne.n	8001b84 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_ADC_Init+0x84>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	f043 0202 	orr.w	r2, r3, #2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fad6 	bl	8002118 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f023 0303 	bic.w	r3, r3, #3
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
 8001b82:	e001      	b.n	8001b88 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	ffffeefd 	.word	0xffffeefd

08001ba0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_Start+0x1a>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e0ad      	b.n	8001d16 <HAL_ADC_Start+0x176>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d018      	beq.n	8001c02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_ADC_Start+0x184>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a50      	ldr	r2, [pc, #320]	; (8001d28 <HAL_ADC_Start+0x188>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0c9a      	lsrs	r2, r3, #18
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001bf4:	e002      	b.n	8001bfc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f9      	bne.n	8001bf6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d175      	bne.n	8001cfc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c14:	4b45      	ldr	r3, [pc, #276]	; (8001d2c <HAL_ADC_Start+0x18c>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4a:	d106      	bne.n	8001c5a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	f023 0206 	bic.w	r2, r3, #6
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
 8001c58:	e002      	b.n	8001c60 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c70:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_ADC_Start+0x190>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d143      	bne.n	8001d14 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e03a      	b.n	8001d14 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a24      	ldr	r2, [pc, #144]	; (8001d34 <HAL_ADC_Start+0x194>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d10e      	bne.n	8001cc6 <HAL_ADC_Start+0x126>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d107      	bne.n	8001cc6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cc4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <HAL_ADC_Start+0x190>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d120      	bne.n	8001d14 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_ADC_Start+0x198>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d11b      	bne.n	8001d14 <HAL_ADC_Start+0x174>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d114      	bne.n	8001d14 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	e00b      	b.n	8001d14 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f043 0210 	orr.w	r2, r3, #16
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	f043 0201 	orr.w	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008
 8001d28:	431bde83 	.word	0x431bde83
 8001d2c:	fffff8fe 	.word	0xfffff8fe
 8001d30:	40012300 	.word	0x40012300
 8001d34:	40012000 	.word	0x40012000
 8001d38:	40012200 	.word	0x40012200

08001d3c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d58:	d113      	bne.n	8001d82 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d68:	d10b      	bne.n	8001d82 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f043 0220 	orr.w	r2, r3, #32
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e063      	b.n	8001e4a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d82:	f7ff fe99 	bl	8001ab8 <HAL_GetTick>
 8001d86:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d88:	e021      	b.n	8001dce <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d01d      	beq.n	8001dce <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_ADC_PollForConversion+0x6c>
 8001d98:	f7ff fe8e 	bl	8001ab8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d212      	bcs.n	8001dce <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d00b      	beq.n	8001dce <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f043 0204 	orr.w	r2, r3, #4
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e03d      	b.n	8001e4a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d1d6      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0212 	mvn.w	r2, #18
 8001de4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d123      	bne.n	8001e48 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d11f      	bne.n	8001e48 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d111      	bne.n	8001e48 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1c>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e136      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x28a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b09      	cmp	r3, #9
 8001e96:	d93a      	bls.n	8001f0e <HAL_ADC_ConfigChannel+0xa2>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ea0:	d035      	beq.n	8001f0e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68d9      	ldr	r1, [r3, #12]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b1e      	subs	r3, #30
 8001eb8:	2207      	movs	r2, #7
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a8d      	ldr	r2, [pc, #564]	; (8002104 <HAL_ADC_ConfigChannel+0x298>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10a      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68d9      	ldr	r1, [r3, #12]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	061a      	lsls	r2, r3, #24
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee6:	e035      	b.n	8001f54 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68d9      	ldr	r1, [r3, #12]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	4618      	mov	r0, r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4403      	add	r3, r0
 8001f00:	3b1e      	subs	r3, #30
 8001f02:	409a      	lsls	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0c:	e022      	b.n	8001f54 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6919      	ldr	r1, [r3, #16]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	2207      	movs	r2, #7
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	400a      	ands	r2, r1
 8001f30:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6919      	ldr	r1, [r3, #16]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	4603      	mov	r3, r0
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4403      	add	r3, r0
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b06      	cmp	r3, #6
 8001f5a:	d824      	bhi.n	8001fa6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b05      	subs	r3, #5
 8001f6e:	221f      	movs	r2, #31
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43da      	mvns	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	3b05      	subs	r3, #5
 8001f98:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	635a      	str	r2, [r3, #52]	; 0x34
 8001fa4:	e04c      	b.n	8002040 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d824      	bhi.n	8001ff8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b23      	subs	r3, #35	; 0x23
 8001fc0:	221f      	movs	r2, #31
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	400a      	ands	r2, r1
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b23      	subs	r3, #35	; 0x23
 8001fea:	fa00 f203 	lsl.w	r2, r0, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff6:	e023      	b.n	8002040 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	3b41      	subs	r3, #65	; 0x41
 800200a:	221f      	movs	r2, #31
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43da      	mvns	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	400a      	ands	r2, r1
 8002018:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	4618      	mov	r0, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3b41      	subs	r3, #65	; 0x41
 8002034:	fa00 f203 	lsl.w	r2, r0, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a30      	ldr	r2, [pc, #192]	; (8002108 <HAL_ADC_ConfigChannel+0x29c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10a      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1f4>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002052:	d105      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_ADC_ConfigChannel+0x2a0>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a2c      	ldr	r2, [pc, #176]	; (800210c <HAL_ADC_ConfigChannel+0x2a0>)
 800205a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800205e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a28      	ldr	r2, [pc, #160]	; (8002108 <HAL_ADC_ConfigChannel+0x29c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10f      	bne.n	800208a <HAL_ADC_ConfigChannel+0x21e>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b12      	cmp	r3, #18
 8002070:	d10b      	bne.n	800208a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002072:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_ADC_ConfigChannel+0x2a0>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a25      	ldr	r2, [pc, #148]	; (800210c <HAL_ADC_ConfigChannel+0x2a0>)
 8002078:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800207c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_ADC_ConfigChannel+0x2a0>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_ADC_ConfigChannel+0x2a0>)
 8002084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002088:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <HAL_ADC_ConfigChannel+0x29c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d12b      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x280>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <HAL_ADC_ConfigChannel+0x298>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d003      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0x23a>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b11      	cmp	r3, #17
 80020a4:	d122      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_ADC_ConfigChannel+0x2a0>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4a18      	ldr	r2, [pc, #96]	; (800210c <HAL_ADC_ConfigChannel+0x2a0>)
 80020ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020b0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <HAL_ADC_ConfigChannel+0x2a0>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a15      	ldr	r2, [pc, #84]	; (800210c <HAL_ADC_ConfigChannel+0x2a0>)
 80020b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020bc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_ADC_ConfigChannel+0x298>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d111      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_ADC_ConfigChannel+0x2a4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a11      	ldr	r2, [pc, #68]	; (8002114 <HAL_ADC_ConfigChannel+0x2a8>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	0c9a      	lsrs	r2, r3, #18
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020de:	e002      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f9      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	10000012 	.word	0x10000012
 8002108:	40012000 	.word	0x40012000
 800210c:	40012300 	.word	0x40012300
 8002110:	20000008 	.word	0x20000008
 8002114:	431bde83 	.word	0x431bde83

08002118 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002120:	4b78      	ldr	r3, [pc, #480]	; (8002304 <ADC_Init+0x1ec>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a77      	ldr	r2, [pc, #476]	; (8002304 <ADC_Init+0x1ec>)
 8002126:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800212a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800212c:	4b75      	ldr	r3, [pc, #468]	; (8002304 <ADC_Init+0x1ec>)
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4973      	ldr	r1, [pc, #460]	; (8002304 <ADC_Init+0x1ec>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	021a      	lsls	r2, r3, #8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800216c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6899      	ldr	r1, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	4a58      	ldr	r2, [pc, #352]	; (8002308 <ADC_Init+0x1f0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d022      	beq.n	80021f2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6899      	ldr	r1, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6899      	ldr	r1, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	e00f      	b.n	8002212 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002200:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002210:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0202 	bic.w	r2, r2, #2
 8002220:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6899      	ldr	r1, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	005a      	lsls	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01b      	beq.n	8002278 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800225e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6859      	ldr	r1, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	3b01      	subs	r3, #1
 800226c:	035a      	lsls	r2, r3, #13
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	e007      	b.n	8002288 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002286:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	051a      	lsls	r2, r3, #20
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6899      	ldr	r1, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022ca:	025a      	lsls	r2, r3, #9
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6899      	ldr	r1, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	029a      	lsls	r2, r3, #10
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	609a      	str	r2, [r3, #8]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40012300 	.word	0x40012300
 8002308:	0f000001 	.word	0x0f000001

0800230c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <__NVIC_SetPriorityGrouping+0x40>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002328:	4013      	ands	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	4313      	orrs	r3, r2
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <__NVIC_SetPriorityGrouping+0x40>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00
 8002350:	05fa0000 	.word	0x05fa0000

08002354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <__NVIC_GetPriorityGrouping+0x18>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	f003 0307 	and.w	r3, r3, #7
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	2b00      	cmp	r3, #0
 8002380:	db0b      	blt.n	800239a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	4907      	ldr	r1, [pc, #28]	; (80023a8 <__NVIC_EnableIRQ+0x38>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	2001      	movs	r0, #1
 8002392:	fa00 f202 	lsl.w	r2, r0, r2
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db0a      	blt.n	80023d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	490c      	ldr	r1, [pc, #48]	; (80023f8 <__NVIC_SetPriority+0x4c>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	440b      	add	r3, r1
 80023d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d4:	e00a      	b.n	80023ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4908      	ldr	r1, [pc, #32]	; (80023fc <__NVIC_SetPriority+0x50>)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3b04      	subs	r3, #4
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	440b      	add	r3, r1
 80023ea:	761a      	strb	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000e100 	.word	0xe000e100
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f1c3 0307 	rsb	r3, r3, #7
 800241a:	2b04      	cmp	r3, #4
 800241c:	bf28      	it	cs
 800241e:	2304      	movcs	r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3304      	adds	r3, #4
 8002426:	2b06      	cmp	r3, #6
 8002428:	d902      	bls.n	8002430 <NVIC_EncodePriority+0x30>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3b03      	subs	r3, #3
 800242e:	e000      	b.n	8002432 <NVIC_EncodePriority+0x32>
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	401a      	ands	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43d9      	mvns	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	4313      	orrs	r3, r2
         );
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	; 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002478:	d301      	bcc.n	800247e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247a:	2301      	movs	r3, #1
 800247c:	e00f      	b.n	800249e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <SysTick_Config+0x40>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002486:	210f      	movs	r1, #15
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f7ff ff8e 	bl	80023ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <SysTick_Config+0x40>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <SysTick_Config+0x40>)
 8002498:	2207      	movs	r2, #7
 800249a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	e000e010 	.word	0xe000e010

080024ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff29 	bl	800230c <__NVIC_SetPriorityGrouping>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d4:	f7ff ff3e 	bl	8002354 <__NVIC_GetPriorityGrouping>
 80024d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	6978      	ldr	r0, [r7, #20]
 80024e0:	f7ff ff8e 	bl	8002400 <NVIC_EncodePriority>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff5d 	bl	80023ac <__NVIC_SetPriority>
}
 80024f2:	bf00      	nop
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff31 	bl	8002370 <__NVIC_EnableIRQ>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ffa2 	bl	8002468 <SysTick_Config>
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff fabc 	bl	8001ab8 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e099      	b.n	8002680 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800256c:	e00f      	b.n	800258e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800256e:	f7ff faa3 	bl	8001ab8 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b05      	cmp	r3, #5
 800257a:	d908      	bls.n	800258e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2203      	movs	r2, #3
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e078      	b.n	8002680 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e8      	bne.n	800256e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4b38      	ldr	r3, [pc, #224]	; (8002688 <HAL_DMA_Init+0x158>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d107      	bne.n	80025f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4313      	orrs	r3, r2
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f023 0307 	bic.w	r3, r3, #7
 800260e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	2b04      	cmp	r3, #4
 8002620:	d117      	bne.n	8002652 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00e      	beq.n	8002652 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fb09 	bl	8002c4c <DMA_CheckFifoParam>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2240      	movs	r2, #64	; 0x40
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800264e:	2301      	movs	r3, #1
 8002650:	e016      	b.n	8002680 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fac0 	bl	8002be0 <DMA_CalcBaseAndBitshift>
 8002660:	4603      	mov	r3, r0
 8002662:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	223f      	movs	r2, #63	; 0x3f
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	f010803f 	.word	0xf010803f

0800268c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_DMA_Start_IT+0x26>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e048      	b.n	8002744 <HAL_DMA_Start_IT+0xb8>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d137      	bne.n	8002736 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fa52 	bl	8002b84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	223f      	movs	r2, #63	; 0x3f
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0216 	orr.w	r2, r2, #22
 80026fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800270a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0208 	orr.w	r2, r2, #8
 8002722:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e005      	b.n	8002742 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800273e:	2302      	movs	r3, #2
 8002740:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002742:	7dfb      	ldrb	r3, [r7, #23]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800275a:	f7ff f9ad 	bl	8001ab8 <HAL_GetTick>
 800275e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d008      	beq.n	800277e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e052      	b.n	8002824 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0216 	bic.w	r2, r2, #22
 800278c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800279c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <HAL_DMA_Abort+0x62>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0208 	bic.w	r2, r2, #8
 80027bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ce:	e013      	b.n	80027f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d0:	f7ff f972 	bl	8001ab8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d90c      	bls.n	80027f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2203      	movs	r2, #3
 80027e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e015      	b.n	8002824 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1e4      	bne.n	80027d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280a:	223f      	movs	r2, #63	; 0x3f
 800280c:	409a      	lsls	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d004      	beq.n	800284a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e00c      	b.n	8002864 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2205      	movs	r2, #5
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800287c:	4b8e      	ldr	r3, [pc, #568]	; (8002ab8 <HAL_DMA_IRQHandler+0x248>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a8e      	ldr	r2, [pc, #568]	; (8002abc <HAL_DMA_IRQHandler+0x24c>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0a9b      	lsrs	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	2208      	movs	r2, #8
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01a      	beq.n	80028dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0204 	bic.w	r2, r2, #4
 80028c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	2208      	movs	r2, #8
 80028ca:	409a      	lsls	r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	2201      	movs	r2, #1
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d012      	beq.n	8002912 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2201      	movs	r2, #1
 8002900:	409a      	lsls	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	f043 0202 	orr.w	r2, r3, #2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2204      	movs	r2, #4
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d012      	beq.n	8002948 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00b      	beq.n	8002948 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	2204      	movs	r2, #4
 8002936:	409a      	lsls	r2, r3
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	f043 0204 	orr.w	r2, r3, #4
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	2210      	movs	r2, #16
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d043      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d03c      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	2210      	movs	r2, #16
 800296c:	409a      	lsls	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d018      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d108      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d024      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
 800299e:	e01f      	b.n	80029e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01b      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
 80029b0:	e016      	b.n	80029e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0208 	bic.w	r2, r2, #8
 80029ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	2220      	movs	r2, #32
 80029e6:	409a      	lsls	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 808f 	beq.w	8002b10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8087 	beq.w	8002b10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	2220      	movs	r2, #32
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d136      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0216 	bic.w	r2, r2, #22
 8002a28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d103      	bne.n	8002a4a <HAL_DMA_IRQHandler+0x1da>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0208 	bic.w	r2, r2, #8
 8002a58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	223f      	movs	r2, #63	; 0x3f
 8002a60:	409a      	lsls	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d07e      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
        }
        return;
 8002a86:	e079      	b.n	8002b7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01d      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10d      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d031      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
 8002ab4:	e02c      	b.n	8002b10 <HAL_DMA_IRQHandler+0x2a0>
 8002ab6:	bf00      	nop
 8002ab8:	20000008 	.word	0x20000008
 8002abc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d023      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
 8002ad0:	e01e      	b.n	8002b10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10f      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0210 	bic.w	r2, r2, #16
 8002aee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d032      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d022      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2205      	movs	r2, #5
 8002b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d307      	bcc.n	8002b58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f2      	bne.n	8002b3c <HAL_DMA_IRQHandler+0x2cc>
 8002b56:	e000      	b.n	8002b5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
 8002b7a:	e000      	b.n	8002b7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b7c:	bf00      	nop
    }
  }
}
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d108      	bne.n	8002bc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bc2:	e007      	b.n	8002bd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3b10      	subs	r3, #16
 8002bf0:	4a13      	ldr	r2, [pc, #76]	; (8002c40 <DMA_CalcBaseAndBitshift+0x60>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <DMA_CalcBaseAndBitshift+0x64>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d908      	bls.n	8002c20 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <DMA_CalcBaseAndBitshift+0x68>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	1d1a      	adds	r2, r3, #4
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	659a      	str	r2, [r3, #88]	; 0x58
 8002c1e:	e006      	b.n	8002c2e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <DMA_CalcBaseAndBitshift+0x68>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	aaaaaaab 	.word	0xaaaaaaab
 8002c44:	08007e8c 	.word	0x08007e8c
 8002c48:	fffffc00 	.word	0xfffffc00

08002c4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11f      	bne.n	8002ca6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d856      	bhi.n	8002d1a <DMA_CheckFifoParam+0xce>
 8002c6c:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <DMA_CheckFifoParam+0x28>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c97 	.word	0x08002c97
 8002c7c:	08002c85 	.word	0x08002c85
 8002c80:	08002d1b 	.word	0x08002d1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d046      	beq.n	8002d1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c94:	e043      	b.n	8002d1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c9e:	d140      	bne.n	8002d22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca4:	e03d      	b.n	8002d22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cae:	d121      	bne.n	8002cf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d837      	bhi.n	8002d26 <DMA_CheckFifoParam+0xda>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <DMA_CheckFifoParam+0x70>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cd3 	.word	0x08002cd3
 8002cc4:	08002ccd 	.word	0x08002ccd
 8002cc8:	08002ce5 	.word	0x08002ce5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	e030      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d025      	beq.n	8002d2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce2:	e022      	b.n	8002d2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cec:	d11f      	bne.n	8002d2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cf2:	e01c      	b.n	8002d2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d903      	bls.n	8002d02 <DMA_CheckFifoParam+0xb6>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d003      	beq.n	8002d08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d00:	e018      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      break;
 8002d06:	e015      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      break;
 8002d18:	e00b      	b.n	8002d32 <DMA_CheckFifoParam+0xe6>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e00a      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e008      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e006      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
 8002d28:	e004      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e002      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d32:	bf00      	nop
    }
  } 
  
  return status; 
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e175      	b.n	8003050 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f040 8164 	bne.w	800304a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d005      	beq.n	8002d9a <HAL_GPIO_Init+0x56>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d130      	bne.n	8002dfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 0201 	and.w	r2, r3, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d017      	beq.n	8002e38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d123      	bne.n	8002e8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	08da      	lsrs	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3208      	adds	r2, #8
 8002e86:	69b9      	ldr	r1, [r7, #24]
 8002e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0203 	and.w	r2, r3, #3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80be 	beq.w	800304a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ece:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_GPIO_Init+0x324>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4a65      	ldr	r2, [pc, #404]	; (8003068 <HAL_GPIO_Init+0x324>)
 8002ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_GPIO_Init+0x324>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ee6:	4a61      	ldr	r2, [pc, #388]	; (800306c <HAL_GPIO_Init+0x328>)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	3302      	adds	r3, #2
 8002eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	220f      	movs	r2, #15
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_GPIO_Init+0x32c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d037      	beq.n	8002f82 <HAL_GPIO_Init+0x23e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a57      	ldr	r2, [pc, #348]	; (8003074 <HAL_GPIO_Init+0x330>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d031      	beq.n	8002f7e <HAL_GPIO_Init+0x23a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a56      	ldr	r2, [pc, #344]	; (8003078 <HAL_GPIO_Init+0x334>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02b      	beq.n	8002f7a <HAL_GPIO_Init+0x236>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a55      	ldr	r2, [pc, #340]	; (800307c <HAL_GPIO_Init+0x338>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d025      	beq.n	8002f76 <HAL_GPIO_Init+0x232>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a54      	ldr	r2, [pc, #336]	; (8003080 <HAL_GPIO_Init+0x33c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01f      	beq.n	8002f72 <HAL_GPIO_Init+0x22e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a53      	ldr	r2, [pc, #332]	; (8003084 <HAL_GPIO_Init+0x340>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d019      	beq.n	8002f6e <HAL_GPIO_Init+0x22a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	; (8003088 <HAL_GPIO_Init+0x344>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_GPIO_Init+0x226>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a51      	ldr	r2, [pc, #324]	; (800308c <HAL_GPIO_Init+0x348>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00d      	beq.n	8002f66 <HAL_GPIO_Init+0x222>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <HAL_GPIO_Init+0x34c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d007      	beq.n	8002f62 <HAL_GPIO_Init+0x21e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4f      	ldr	r2, [pc, #316]	; (8003094 <HAL_GPIO_Init+0x350>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <HAL_GPIO_Init+0x21a>
 8002f5a:	2309      	movs	r3, #9
 8002f5c:	e012      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f5e:	230a      	movs	r3, #10
 8002f60:	e010      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f62:	2308      	movs	r3, #8
 8002f64:	e00e      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f66:	2307      	movs	r3, #7
 8002f68:	e00c      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f6a:	2306      	movs	r3, #6
 8002f6c:	e00a      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f6e:	2305      	movs	r3, #5
 8002f70:	e008      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f72:	2304      	movs	r3, #4
 8002f74:	e006      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f76:	2303      	movs	r3, #3
 8002f78:	e004      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e002      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f82:	2300      	movs	r3, #0
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	f002 0203 	and.w	r2, r2, #3
 8002f8a:	0092      	lsls	r2, r2, #2
 8002f8c:	4093      	lsls	r3, r2
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f94:	4935      	ldr	r1, [pc, #212]	; (800306c <HAL_GPIO_Init+0x328>)
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	3302      	adds	r3, #2
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_GPIO_Init+0x354>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fc6:	4a34      	ldr	r2, [pc, #208]	; (8003098 <HAL_GPIO_Init+0x354>)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_GPIO_Init+0x354>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff0:	4a29      	ldr	r2, [pc, #164]	; (8003098 <HAL_GPIO_Init+0x354>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_GPIO_Init+0x354>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800301a:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <HAL_GPIO_Init+0x354>)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_GPIO_Init+0x354>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003044:	4a14      	ldr	r2, [pc, #80]	; (8003098 <HAL_GPIO_Init+0x354>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3301      	adds	r3, #1
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b0f      	cmp	r3, #15
 8003054:	f67f ae86 	bls.w	8002d64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3724      	adds	r7, #36	; 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
 800306c:	40013800 	.word	0x40013800
 8003070:	40020000 	.word	0x40020000
 8003074:	40020400 	.word	0x40020400
 8003078:	40020800 	.word	0x40020800
 800307c:	40020c00 	.word	0x40020c00
 8003080:	40021000 	.word	0x40021000
 8003084:	40021400 	.word	0x40021400
 8003088:	40021800 	.word	0x40021800
 800308c:	40021c00 	.word	0x40021c00
 8003090:	40022000 	.word	0x40022000
 8003094:	40022400 	.word	0x40022400
 8003098:	40013c00 	.word	0x40013c00

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e07f      	b.n	80031e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe f9a8 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003120:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003130:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d107      	bne.n	800314a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e006      	b.n	8003158 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003156:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d104      	bne.n	800316a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003168:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_I2C_Init+0x11c>)
 8003176:	430b      	orrs	r3, r1
 8003178:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003188:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69d9      	ldr	r1, [r3, #28]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1a      	ldr	r2, [r3, #32]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	02008000 	.word	0x02008000

080031f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	4608      	mov	r0, r1
 80031fa:	4611      	mov	r1, r2
 80031fc:	461a      	mov	r2, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	817b      	strh	r3, [r7, #10]
 8003202:	460b      	mov	r3, r1
 8003204:	813b      	strh	r3, [r7, #8]
 8003206:	4613      	mov	r3, r2
 8003208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	f040 80f9 	bne.w	800340a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_I2C_Mem_Write+0x34>
 800321e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800322a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0ed      	b.n	800340c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_I2C_Mem_Write+0x4e>
 800323a:	2302      	movs	r3, #2
 800323c:	e0e6      	b.n	800340c <HAL_I2C_Mem_Write+0x21c>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003246:	f7fe fc37 	bl	8001ab8 <HAL_GetTick>
 800324a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2319      	movs	r3, #25
 8003252:	2201      	movs	r2, #1
 8003254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f961 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0d1      	b.n	800340c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2221      	movs	r2, #33	; 0x21
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2240      	movs	r2, #64	; 0x40
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003290:	88f8      	ldrh	r0, [r7, #6]
 8003292:	893a      	ldrh	r2, [r7, #8]
 8003294:	8979      	ldrh	r1, [r7, #10]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	4603      	mov	r3, r0
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f8c5 	bl	8003430 <I2C_RequestMemoryWrite>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0a9      	b.n	800340c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2bff      	cmp	r3, #255	; 0xff
 80032c0:	d90e      	bls.n	80032e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	22ff      	movs	r2, #255	; 0xff
 80032c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	8979      	ldrh	r1, [r7, #10]
 80032d0:	2300      	movs	r3, #0
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fabd 	bl	8003858 <I2C_TransferConfig>
 80032de:	e00f      	b.n	8003300 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	8979      	ldrh	r1, [r7, #10]
 80032f2:	2300      	movs	r3, #0
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 faac 	bl	8003858 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f94b 	bl	80035a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e07b      	b.n	800340c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	781a      	ldrb	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d034      	beq.n	80033b8 <HAL_I2C_Mem_Write+0x1c8>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	2b00      	cmp	r3, #0
 8003354:	d130      	bne.n	80033b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	2200      	movs	r2, #0
 800335e:	2180      	movs	r1, #128	; 0x80
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f8dd 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e04d      	b.n	800340c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	2bff      	cmp	r3, #255	; 0xff
 8003378:	d90e      	bls.n	8003398 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	22ff      	movs	r2, #255	; 0xff
 800337e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	b2da      	uxtb	r2, r3
 8003386:	8979      	ldrh	r1, [r7, #10]
 8003388:	2300      	movs	r3, #0
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fa61 	bl	8003858 <I2C_TransferConfig>
 8003396:	e00f      	b.n	80033b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	8979      	ldrh	r1, [r7, #10]
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fa50 	bl	8003858 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d19e      	bne.n	8003300 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f92a 	bl	8003620 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e01a      	b.n	800340c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2220      	movs	r2, #32
 80033dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_I2C_Mem_Write+0x224>)
 80033ea:	400b      	ands	r3, r1
 80033ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	fe00e800 	.word	0xfe00e800

08003418 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	4603      	mov	r3, r0
 8003440:	817b      	strh	r3, [r7, #10]
 8003442:	460b      	mov	r3, r1
 8003444:	813b      	strh	r3, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	8979      	ldrh	r1, [r7, #10]
 8003450:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <I2C_RequestMemoryWrite+0xa4>)
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f9fd 	bl	8003858 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	69b9      	ldr	r1, [r7, #24]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f89c 	bl	80035a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e02c      	b.n	80034cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003478:	893b      	ldrh	r3, [r7, #8]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	629a      	str	r2, [r3, #40]	; 0x28
 8003482:	e015      	b.n	80034b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003484:	893b      	ldrh	r3, [r7, #8]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	b29b      	uxth	r3, r3
 800348a:	b2da      	uxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	69b9      	ldr	r1, [r7, #24]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f882 	bl	80035a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e012      	b.n	80034cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034a6:	893b      	ldrh	r3, [r7, #8]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2200      	movs	r2, #0
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f830 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	80002000 	.word	0x80002000

080034d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d103      	bne.n	80034f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2200      	movs	r2, #0
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d007      	beq.n	8003514 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	619a      	str	r2, [r3, #24]
  }
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	e022      	b.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d01e      	beq.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe fabd 	bl	8001ab8 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d113      	bne.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e00f      	b.n	8003598 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	d0cd      	beq.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035ac:	e02c      	b.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f870 	bl	8003698 <I2C_IsErrorOccurred>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e02a      	b.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d01e      	beq.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fe fa75 	bl	8001ab8 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d113      	bne.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e007      	b.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d1cb      	bne.n	80035ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362c:	e028      	b.n	8003680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f830 	bl	8003698 <I2C_IsErrorOccurred>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e026      	b.n	8003690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fe fa39 	bl	8001ab8 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d113      	bne.n	8003680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f043 0220 	orr.w	r2, r3, #32
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e007      	b.n	8003690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b20      	cmp	r3, #32
 800368c:	d1cf      	bne.n	800362e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d068      	beq.n	8003796 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2210      	movs	r2, #16
 80036ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036cc:	e049      	b.n	8003762 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d045      	beq.n	8003762 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fe f9ef 	bl	8001ab8 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <I2C_IsErrorOccurred+0x54>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d13a      	bne.n	8003762 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800370a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370e:	d121      	bne.n	8003754 <I2C_IsErrorOccurred+0xbc>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003716:	d01d      	beq.n	8003754 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	2b20      	cmp	r3, #32
 800371c:	d01a      	beq.n	8003754 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800372c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800372e:	f7fe f9c3 	bl	8001ab8 <HAL_GetTick>
 8003732:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003734:	e00e      	b.n	8003754 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003736:	f7fe f9bf 	bl	8001ab8 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b19      	cmp	r3, #25
 8003742:	d907      	bls.n	8003754 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	f043 0320 	orr.w	r3, r3, #32
 800374a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003752:	e006      	b.n	8003762 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b20      	cmp	r3, #32
 8003760:	d1e9      	bne.n	8003736 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d003      	beq.n	8003778 <I2C_IsErrorOccurred+0xe0>
 8003770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0aa      	beq.n	80036ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800377c:	2b00      	cmp	r3, #0
 800377e:	d103      	bne.n	8003788 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2220      	movs	r2, #32
 8003786:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	f043 0304 	orr.w	r3, r3, #4
 800378e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00b      	beq.n	80037c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f043 0308 	orr.w	r3, r3, #8
 80037d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	f043 0302 	orr.w	r3, r3, #2
 80037f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01c      	beq.n	8003846 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff fe63 	bl	80034d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <I2C_IsErrorOccurred+0x1bc>)
 800381e:	400b      	ands	r3, r1
 8003820:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	431a      	orrs	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800384a:	4618      	mov	r0, r3
 800384c:	3728      	adds	r7, #40	; 0x28
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	fe00e800 	.word	0xfe00e800

08003858 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	4613      	mov	r3, r2
 8003868:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800386a:	897b      	ldrh	r3, [r7, #10]
 800386c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003870:	7a7b      	ldrb	r3, [r7, #9]
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003878:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	4313      	orrs	r3, r2
 8003882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003886:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	0d5b      	lsrs	r3, r3, #21
 8003892:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <I2C_TransferConfig+0x60>)
 8003898:	430b      	orrs	r3, r1
 800389a:	43db      	mvns	r3, r3
 800389c:	ea02 0103 	and.w	r1, r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	03ff63ff 	.word	0x03ff63ff

080038bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d138      	bne.n	8003944 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038dc:	2302      	movs	r3, #2
 80038de:	e032      	b.n	8003946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	; 0x24
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800390e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6819      	ldr	r1, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b20      	cmp	r3, #32
 8003966:	d139      	bne.n	80039dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003972:	2302      	movs	r3, #2
 8003974:	e033      	b.n	80039de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2224      	movs	r2, #36	; 0x24
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	e000      	b.n	80039de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
  }
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ec:	b08f      	sub	sp, #60	; 0x3c
 80039ee:	af0a      	add	r7, sp, #40	; 0x28
 80039f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e116      	b.n	8003c2a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd fdde 	bl	80015d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2203      	movs	r2, #3
 8003a20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 f9cc 	bl	8006dd8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	603b      	str	r3, [r7, #0]
 8003a46:	687e      	ldr	r6, [r7, #4]
 8003a48:	466d      	mov	r5, sp
 8003a4a:	f106 0410 	add.w	r4, r6, #16
 8003a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a5e:	1d33      	adds	r3, r6, #4
 8003a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a62:	6838      	ldr	r0, [r7, #0]
 8003a64:	f003 f960 	bl	8006d28 <USB_CoreInit>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e0d7      	b.n	8003c2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f003 f9ba 	bl	8006dfa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
 8003a8a:	e04a      	b.n	8003b22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a8c:	7bfa      	ldrb	r2, [r7, #15]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	333d      	adds	r3, #61	; 0x3d
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	333c      	adds	r3, #60	; 0x3c
 8003ab0:	7bfa      	ldrb	r2, [r7, #15]
 8003ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	b298      	uxth	r0, r3
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3344      	adds	r3, #68	; 0x44
 8003ac8:	4602      	mov	r2, r0
 8003aca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	3340      	adds	r3, #64	; 0x40
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	3348      	adds	r3, #72	; 0x48
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	334c      	adds	r3, #76	; 0x4c
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	3354      	adds	r3, #84	; 0x54
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	73fb      	strb	r3, [r7, #15]
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d3af      	bcc.n	8003a8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
 8003b30:	e044      	b.n	8003bbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b5a:	7bfa      	ldrb	r2, [r7, #15]
 8003b5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b5e:	7bfa      	ldrb	r2, [r7, #15]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d3b5      	bcc.n	8003b32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	687e      	ldr	r6, [r7, #4]
 8003bce:	466d      	mov	r5, sp
 8003bd0:	f106 0410 	add.w	r4, r6, #16
 8003bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003be0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003be4:	1d33      	adds	r3, r6, #4
 8003be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be8:	6838      	ldr	r0, [r7, #0]
 8003bea:	f003 f953 	bl	8006e94 <USB_DevInit>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e014      	b.n	8003c2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d102      	bne.n	8003c1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f80b 	bl	8003c34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f003 fb11 	bl	800724a <USB_DevDisconnect>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_PCDEx_ActivateLPM+0x44>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	10000003 	.word	0x10000003

08003c7c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8a:	6013      	str	r3, [r2, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40007000 	.word	0x40007000

08003c9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cca:	f7fd fef5 	bl	8001ab8 <HAL_GetTick>
 8003cce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cd0:	e009      	b.n	8003ce6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cd2:	f7fd fef1 	bl	8001ab8 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ce0:	d901      	bls.n	8003ce6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e022      	b.n	8003d2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf2:	d1ee      	bne.n	8003cd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cf4:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a0f      	ldr	r2, [pc, #60]	; (8003d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d00:	f7fd feda 	bl	8001ab8 <HAL_GetTick>
 8003d04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d06:	e009      	b.n	8003d1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d08:	f7fd fed6 	bl	8001ab8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d16:	d901      	bls.n	8003d1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e007      	b.n	8003d2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d28:	d1ee      	bne.n	8003d08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40007000 	.word	0x40007000

08003d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d44:	2300      	movs	r3, #0
 8003d46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e291      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8087 	beq.w	8003e6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d60:	4b96      	ldr	r3, [pc, #600]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 030c 	and.w	r3, r3, #12
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d00c      	beq.n	8003d86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6c:	4b93      	ldr	r3, [pc, #588]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d112      	bne.n	8003d9e <HAL_RCC_OscConfig+0x62>
 8003d78:	4b90      	ldr	r3, [pc, #576]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d84:	d10b      	bne.n	8003d9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d86:	4b8d      	ldr	r3, [pc, #564]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d06c      	beq.n	8003e6c <HAL_RCC_OscConfig+0x130>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d168      	bne.n	8003e6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e26b      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da6:	d106      	bne.n	8003db6 <HAL_RCC_OscConfig+0x7a>
 8003da8:	4b84      	ldr	r3, [pc, #528]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a83      	ldr	r2, [pc, #524]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	e02e      	b.n	8003e14 <HAL_RCC_OscConfig+0xd8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x9c>
 8003dbe:	4b7f      	ldr	r3, [pc, #508]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a7e      	ldr	r2, [pc, #504]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	4b7c      	ldr	r3, [pc, #496]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a7b      	ldr	r2, [pc, #492]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e01d      	b.n	8003e14 <HAL_RCC_OscConfig+0xd8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0xc0>
 8003de2:	4b76      	ldr	r3, [pc, #472]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a75      	ldr	r2, [pc, #468]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b73      	ldr	r3, [pc, #460]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a72      	ldr	r2, [pc, #456]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCC_OscConfig+0xd8>
 8003dfc:	4b6f      	ldr	r3, [pc, #444]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6e      	ldr	r2, [pc, #440]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b6c      	ldr	r3, [pc, #432]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6b      	ldr	r2, [pc, #428]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d013      	beq.n	8003e44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fe4c 	bl	8001ab8 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fd fe48 	bl	8001ab8 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e21f      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	4b61      	ldr	r3, [pc, #388]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0xe8>
 8003e42:	e014      	b.n	8003e6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd fe38 	bl	8001ab8 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fd fe34 	bl	8001ab8 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e20b      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5e:	4b57      	ldr	r3, [pc, #348]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x110>
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d069      	beq.n	8003f4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e7a:	4b50      	ldr	r3, [pc, #320]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e86:	4b4d      	ldr	r3, [pc, #308]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d11c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x190>
 8003e92:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d116      	bne.n	8003ecc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x17a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e1df      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	493d      	ldr	r1, [pc, #244]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eca:	e040      	b.n	8003f4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d023      	beq.n	8003f1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed4:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a38      	ldr	r2, [pc, #224]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fdea 	bl	8001ab8 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee8:	f7fd fde6 	bl	8001ab8 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e1bd      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f06:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4929      	ldr	r1, [pc, #164]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]
 8003f1a:	e018      	b.n	8003f4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1c:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a26      	ldr	r2, [pc, #152]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd fdc6 	bl	8001ab8 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f30:	f7fd fdc2 	bl	8001ab8 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e199      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d038      	beq.n	8003fcc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d019      	beq.n	8003f96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f62:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f66:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6e:	f7fd fda3 	bl	8001ab8 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f76:	f7fd fd9f 	bl	8001ab8 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e176      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x23a>
 8003f94:	e01a      	b.n	8003fcc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <HAL_RCC_OscConfig+0x280>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa2:	f7fd fd89 	bl	8001ab8 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003faa:	f7fd fd85 	bl	8001ab8 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d903      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e15c      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
 8003fbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc0:	4b91      	ldr	r3, [pc, #580]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8003fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1ee      	bne.n	8003faa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80a4 	beq.w	8004122 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fda:	4b8b      	ldr	r3, [pc, #556]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe6:	4b88      	ldr	r3, [pc, #544]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	4a87      	ldr	r2, [pc, #540]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8003fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff2:	4b85      	ldr	r3, [pc, #532]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004002:	4b82      	ldr	r3, [pc, #520]	; (800420c <HAL_RCC_OscConfig+0x4d0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d118      	bne.n	8004040 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800400e:	4b7f      	ldr	r3, [pc, #508]	; (800420c <HAL_RCC_OscConfig+0x4d0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a7e      	ldr	r2, [pc, #504]	; (800420c <HAL_RCC_OscConfig+0x4d0>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401a:	f7fd fd4d 	bl	8001ab8 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004022:	f7fd fd49 	bl	8001ab8 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b64      	cmp	r3, #100	; 0x64
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e120      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004034:	4b75      	ldr	r3, [pc, #468]	; (800420c <HAL_RCC_OscConfig+0x4d0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x31a>
 8004048:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6713      	str	r3, [r2, #112]	; 0x70
 8004054:	e02d      	b.n	80040b2 <HAL_RCC_OscConfig+0x376>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10c      	bne.n	8004078 <HAL_RCC_OscConfig+0x33c>
 800405e:	4b6a      	ldr	r3, [pc, #424]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	4a69      	ldr	r2, [pc, #420]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	6713      	str	r3, [r2, #112]	; 0x70
 800406a:	4b67      	ldr	r3, [pc, #412]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	4a66      	ldr	r2, [pc, #408]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8004070:	f023 0304 	bic.w	r3, r3, #4
 8004074:	6713      	str	r3, [r2, #112]	; 0x70
 8004076:	e01c      	b.n	80040b2 <HAL_RCC_OscConfig+0x376>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b05      	cmp	r3, #5
 800407e:	d10c      	bne.n	800409a <HAL_RCC_OscConfig+0x35e>
 8004080:	4b61      	ldr	r3, [pc, #388]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	4a60      	ldr	r2, [pc, #384]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	6713      	str	r3, [r2, #112]	; 0x70
 800408c:	4b5e      	ldr	r3, [pc, #376]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004090:	4a5d      	ldr	r2, [pc, #372]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6713      	str	r3, [r2, #112]	; 0x70
 8004098:	e00b      	b.n	80040b2 <HAL_RCC_OscConfig+0x376>
 800409a:	4b5b      	ldr	r3, [pc, #364]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a5a      	ldr	r2, [pc, #360]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	4b58      	ldr	r3, [pc, #352]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	4a57      	ldr	r2, [pc, #348]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 80040ac:	f023 0304 	bic.w	r3, r3, #4
 80040b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d015      	beq.n	80040e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ba:	f7fd fcfd 	bl	8001ab8 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fd fcf9 	bl	8001ab8 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0ce      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d8:	4b4b      	ldr	r3, [pc, #300]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ee      	beq.n	80040c2 <HAL_RCC_OscConfig+0x386>
 80040e4:	e014      	b.n	8004110 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e6:	f7fd fce7 	bl	8001ab8 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7fd fce3 	bl	8001ab8 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0b8      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004104:	4b40      	ldr	r3, [pc, #256]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ee      	bne.n	80040ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004116:	4b3c      	ldr	r3, [pc, #240]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	4a3b      	ldr	r2, [pc, #236]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 800411c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80a4 	beq.w	8004274 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b08      	cmp	r3, #8
 8004136:	d06b      	beq.n	8004210 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d149      	bne.n	80041d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004140:	4b31      	ldr	r3, [pc, #196]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a30      	ldr	r2, [pc, #192]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8004146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800414a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fd fcb4 	bl	8001ab8 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004154:	f7fd fcb0 	bl	8001ab8 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e087      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004166:	4b28      	ldr	r3, [pc, #160]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	019b      	lsls	r3, r3, #6
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	085b      	lsrs	r3, r3, #1
 800418a:	3b01      	subs	r3, #1
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	061b      	lsls	r3, r3, #24
 8004196:	4313      	orrs	r3, r2
 8004198:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 800419a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800419e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a18      	ldr	r2, [pc, #96]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 80041a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fd fc84 	bl	8001ab8 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fd fc80 	bl	8001ab8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e057      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c6:	4b10      	ldr	r3, [pc, #64]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x478>
 80041d2:	e04f      	b.n	8004274 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 80041da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fd fc6a 	bl	8001ab8 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fd fc66 	bl	8001ab8 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e03d      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fa:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_RCC_OscConfig+0x4cc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x4ac>
 8004206:	e035      	b.n	8004274 <HAL_RCC_OscConfig+0x538>
 8004208:	40023800 	.word	0x40023800
 800420c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_RCC_OscConfig+0x544>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d028      	beq.n	8004270 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d121      	bne.n	8004270 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d11a      	bne.n	8004270 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004240:	4013      	ands	r3, r2
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004246:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004248:	4293      	cmp	r3, r2
 800424a:	d111      	bne.n	8004270 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	3b01      	subs	r3, #1
 800425a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d107      	bne.n	8004270 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800

08004284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0d0      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b6a      	ldr	r3, [pc, #424]	; (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d910      	bls.n	80042cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b67      	ldr	r3, [pc, #412]	; (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 020f 	bic.w	r2, r3, #15
 80042b2:	4965      	ldr	r1, [pc, #404]	; (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b63      	ldr	r3, [pc, #396]	; (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b8      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e4:	4b59      	ldr	r3, [pc, #356]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a58      	ldr	r2, [pc, #352]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 80042ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042fc:	4b53      	ldr	r3, [pc, #332]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a52      	ldr	r2, [pc, #328]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004306:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	494d      	ldr	r1, [pc, #308]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d040      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d115      	bne.n	8004366 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d107      	bne.n	8004356 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e073      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004356:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e06b      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004366:	4b39      	ldr	r3, [pc, #228]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f023 0203 	bic.w	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4936      	ldr	r1, [pc, #216]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004374:	4313      	orrs	r3, r2
 8004376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004378:	f7fd fb9e 	bl	8001ab8 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	e00a      	b.n	8004396 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004380:	f7fd fb9a 	bl	8001ab8 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e053      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 020c 	and.w	r2, r3, #12
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d1eb      	bne.n	8004380 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a8:	4b27      	ldr	r3, [pc, #156]	; (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d210      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 020f 	bic.w	r2, r3, #15
 80043be:	4922      	ldr	r1, [pc, #136]	; (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4916      	ldr	r1, [pc, #88]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f821 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800441a:	4602      	mov	r2, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	490a      	ldr	r1, [pc, #40]	; (8004450 <HAL_RCC_ClockConfig+0x1cc>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1d0>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_RCC_ClockConfig+0x1d4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd fafa 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023c00 	.word	0x40023c00
 800444c:	40023800 	.word	0x40023800
 8004450:	08007e74 	.word	0x08007e74
 8004454:	20000008 	.word	0x20000008
 8004458:	2000000c 	.word	0x2000000c

0800445c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004460:	b094      	sub	sp, #80	; 0x50
 8004462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	647b      	str	r3, [r7, #68]	; 0x44
 8004468:	2300      	movs	r3, #0
 800446a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800446c:	2300      	movs	r3, #0
 800446e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004474:	4b79      	ldr	r3, [pc, #484]	; (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d00d      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x40>
 8004480:	2b08      	cmp	r3, #8
 8004482:	f200 80e1 	bhi.w	8004648 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x34>
 800448a:	2b04      	cmp	r3, #4
 800448c:	d003      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x3a>
 800448e:	e0db      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b73      	ldr	r3, [pc, #460]	; (8004660 <HAL_RCC_GetSysClockFreq+0x204>)
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004494:	e0db      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004496:	4b73      	ldr	r3, [pc, #460]	; (8004664 <HAL_RCC_GetSysClockFreq+0x208>)
 8004498:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800449a:	e0d8      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800449c:	4b6f      	ldr	r3, [pc, #444]	; (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80044a6:	4b6d      	ldr	r3, [pc, #436]	; (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d063      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b2:	4b6a      	ldr	r3, [pc, #424]	; (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	2200      	movs	r2, #0
 80044ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80044bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c4:	633b      	str	r3, [r7, #48]	; 0x30
 80044c6:	2300      	movs	r3, #0
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044ce:	4622      	mov	r2, r4
 80044d0:	462b      	mov	r3, r5
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f04f 0100 	mov.w	r1, #0
 80044da:	0159      	lsls	r1, r3, #5
 80044dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e0:	0150      	lsls	r0, r2, #5
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4621      	mov	r1, r4
 80044e8:	1a51      	subs	r1, r2, r1
 80044ea:	6139      	str	r1, [r7, #16]
 80044ec:	4629      	mov	r1, r5
 80044ee:	eb63 0301 	sbc.w	r3, r3, r1
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004500:	4659      	mov	r1, fp
 8004502:	018b      	lsls	r3, r1, #6
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800450a:	4651      	mov	r1, sl
 800450c:	018a      	lsls	r2, r1, #6
 800450e:	4651      	mov	r1, sl
 8004510:	ebb2 0801 	subs.w	r8, r2, r1
 8004514:	4659      	mov	r1, fp
 8004516:	eb63 0901 	sbc.w	r9, r3, r1
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800452a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800452e:	4690      	mov	r8, r2
 8004530:	4699      	mov	r9, r3
 8004532:	4623      	mov	r3, r4
 8004534:	eb18 0303 	adds.w	r3, r8, r3
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	462b      	mov	r3, r5
 800453c:	eb49 0303 	adc.w	r3, r9, r3
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800454e:	4629      	mov	r1, r5
 8004550:	024b      	lsls	r3, r1, #9
 8004552:	4621      	mov	r1, r4
 8004554:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004558:	4621      	mov	r1, r4
 800455a:	024a      	lsls	r2, r1, #9
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004562:	2200      	movs	r2, #0
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
 8004566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004568:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800456c:	f7fb fea8 	bl	80002c0 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4613      	mov	r3, r2
 8004576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004578:	e058      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457a:	4b38      	ldr	r3, [pc, #224]	; (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	099b      	lsrs	r3, r3, #6
 8004580:	2200      	movs	r2, #0
 8004582:	4618      	mov	r0, r3
 8004584:	4611      	mov	r1, r2
 8004586:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800458a:	623b      	str	r3, [r7, #32]
 800458c:	2300      	movs	r3, #0
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
 8004590:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004594:	4642      	mov	r2, r8
 8004596:	464b      	mov	r3, r9
 8004598:	f04f 0000 	mov.w	r0, #0
 800459c:	f04f 0100 	mov.w	r1, #0
 80045a0:	0159      	lsls	r1, r3, #5
 80045a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a6:	0150      	lsls	r0, r2, #5
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4641      	mov	r1, r8
 80045ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80045b2:	4649      	mov	r1, r9
 80045b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045cc:	ebb2 040a 	subs.w	r4, r2, sl
 80045d0:	eb63 050b 	sbc.w	r5, r3, fp
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	00eb      	lsls	r3, r5, #3
 80045de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e2:	00e2      	lsls	r2, r4, #3
 80045e4:	4614      	mov	r4, r2
 80045e6:	461d      	mov	r5, r3
 80045e8:	4643      	mov	r3, r8
 80045ea:	18e3      	adds	r3, r4, r3
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	464b      	mov	r3, r9
 80045f0:	eb45 0303 	adc.w	r3, r5, r3
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004602:	4629      	mov	r1, r5
 8004604:	028b      	lsls	r3, r1, #10
 8004606:	4621      	mov	r1, r4
 8004608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800460c:	4621      	mov	r1, r4
 800460e:	028a      	lsls	r2, r1, #10
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004616:	2200      	movs	r2, #0
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	61fa      	str	r2, [r7, #28]
 800461c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004620:	f7fb fe4e 	bl	80002c0 <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4613      	mov	r3, r2
 800462a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	3301      	adds	r3, #1
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800463c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800463e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004646:	e002      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetSysClockFreq+0x204>)
 800464a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800464c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800464e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004650:	4618      	mov	r0, r3
 8004652:	3750      	adds	r7, #80	; 0x50
 8004654:	46bd      	mov	sp, r7
 8004656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800
 8004660:	00f42400 	.word	0x00f42400
 8004664:	007a1200 	.word	0x007a1200

08004668 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <HAL_RCC_GetHCLKFreq+0x14>)
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000008 	.word	0x20000008

08004680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004684:	f7ff fff0 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	0a9b      	lsrs	r3, r3, #10
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4903      	ldr	r1, [pc, #12]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40023800 	.word	0x40023800
 80046a4:	08007e84 	.word	0x08007e84

080046a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046ac:	f7ff ffdc 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	0b5b      	lsrs	r3, r3, #13
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	4903      	ldr	r1, [pc, #12]	; (80046cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40023800 	.word	0x40023800
 80046cc:	08007e84 	.word	0x08007e84

080046d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d012      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046f8:	4b69      	ldr	r3, [pc, #420]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a68      	ldr	r2, [pc, #416]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004702:	6093      	str	r3, [r2, #8]
 8004704:	4b66      	ldr	r3, [pc, #408]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470c:	4964      	ldr	r1, [pc, #400]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800471a:	2301      	movs	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d017      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800472a:	4b5d      	ldr	r3, [pc, #372]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004730:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004738:	4959      	ldr	r1, [pc, #356]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004748:	d101      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800474a:	2301      	movs	r3, #1
 800474c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004756:	2301      	movs	r3, #1
 8004758:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d017      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004766:	4b4e      	ldr	r3, [pc, #312]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	494a      	ldr	r1, [pc, #296]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004784:	d101      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004786:	2301      	movs	r3, #1
 8004788:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004792:	2301      	movs	r3, #1
 8004794:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047a2:	2301      	movs	r3, #1
 80047a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 808b 	beq.w	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047b4:	4b3a      	ldr	r3, [pc, #232]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	4a39      	ldr	r2, [pc, #228]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047be:	6413      	str	r3, [r2, #64]	; 0x40
 80047c0:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047cc:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a34      	ldr	r2, [pc, #208]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d8:	f7fd f96e 	bl	8001ab8 <HAL_GetTick>
 80047dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e0:	f7fd f96a 	bl	8001ab8 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	; 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e357      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047f2:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047fe:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004806:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d035      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	429a      	cmp	r2, r3
 800481a:	d02e      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800481c:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004824:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004826:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004830:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004832:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004836:	4a1a      	ldr	r2, [pc, #104]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800483e:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004844:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b01      	cmp	r3, #1
 800484e:	d114      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fd f932 	bl	8001ab8 <HAL_GetTick>
 8004854:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004856:	e00a      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004858:	f7fd f92e 	bl	8001ab8 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e319      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0ee      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004886:	d111      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004896:	400b      	ands	r3, r1
 8004898:	4901      	ldr	r1, [pc, #4]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
 800489e:	e00b      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048a0:	40023800 	.word	0x40023800
 80048a4:	40007000 	.word	0x40007000
 80048a8:	0ffffcff 	.word	0x0ffffcff
 80048ac:	4baa      	ldr	r3, [pc, #680]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4aa9      	ldr	r2, [pc, #676]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048b6:	6093      	str	r3, [r2, #8]
 80048b8:	4ba7      	ldr	r3, [pc, #668]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c4:	49a4      	ldr	r1, [pc, #656]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d010      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048d6:	4ba0      	ldr	r3, [pc, #640]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048dc:	4a9e      	ldr	r2, [pc, #632]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048e6:	4b9c      	ldr	r3, [pc, #624]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	4999      	ldr	r1, [pc, #612]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004904:	4b94      	ldr	r3, [pc, #592]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004912:	4991      	ldr	r1, [pc, #580]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004926:	4b8c      	ldr	r3, [pc, #560]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004934:	4988      	ldr	r1, [pc, #544]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004948:	4b83      	ldr	r3, [pc, #524]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004956:	4980      	ldr	r1, [pc, #512]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800496a:	4b7b      	ldr	r3, [pc, #492]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004970:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	4977      	ldr	r1, [pc, #476]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800498c:	4b72      	ldr	r3, [pc, #456]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	f023 0203 	bic.w	r2, r3, #3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499a:	496f      	ldr	r1, [pc, #444]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049ae:	4b6a      	ldr	r3, [pc, #424]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b4:	f023 020c 	bic.w	r2, r3, #12
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	4966      	ldr	r1, [pc, #408]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049d0:	4b61      	ldr	r3, [pc, #388]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049de:	495e      	ldr	r1, [pc, #376]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049f2:	4b59      	ldr	r3, [pc, #356]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a00:	4955      	ldr	r1, [pc, #340]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a14:	4b50      	ldr	r3, [pc, #320]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	494d      	ldr	r1, [pc, #308]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a36:	4b48      	ldr	r3, [pc, #288]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a44:	4944      	ldr	r1, [pc, #272]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a58:	4b3f      	ldr	r3, [pc, #252]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a66:	493c      	ldr	r1, [pc, #240]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a7a:	4b37      	ldr	r3, [pc, #220]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a88:	4933      	ldr	r1, [pc, #204]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a9c:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aaa:	492b      	ldr	r1, [pc, #172]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d011      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004abe:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004acc:	4922      	ldr	r1, [pc, #136]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004afe:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0c:	4912      	ldr	r1, [pc, #72]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00b      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b30:	4909      	ldr	r1, [pc, #36]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d006      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 80d9 	beq.w	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b4c:	4b02      	ldr	r3, [pc, #8]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a01      	ldr	r2, [pc, #4]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b56:	e001      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5e:	f7fc ffab 	bl	8001ab8 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b66:	f7fc ffa7 	bl	8001ab8 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b64      	cmp	r3, #100	; 0x64
 8004b72:	d901      	bls.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e194      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b78:	4b6c      	ldr	r3, [pc, #432]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d021      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d11d      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b98:	4b64      	ldr	r3, [pc, #400]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ba6:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bac:	0e1b      	lsrs	r3, r3, #24
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	019a      	lsls	r2, r3, #6
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	061b      	lsls	r3, r3, #24
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	071b      	lsls	r3, r3, #28
 8004bcc:	4957      	ldr	r1, [pc, #348]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d004      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be8:	d00a      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d02e      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfe:	d129      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c00:	4b4a      	ldr	r3, [pc, #296]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c0e:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c14:	0f1b      	lsrs	r3, r3, #28
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	019a      	lsls	r2, r3, #6
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	061b      	lsls	r3, r3, #24
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	071b      	lsls	r3, r3, #28
 8004c34:	493d      	ldr	r1, [pc, #244]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c3c:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c42:	f023 021f 	bic.w	r2, r3, #31
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	4937      	ldr	r1, [pc, #220]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01d      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c60:	4b32      	ldr	r3, [pc, #200]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c66:	0e1b      	lsrs	r3, r3, #24
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c6e:	4b2f      	ldr	r3, [pc, #188]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c74:	0f1b      	lsrs	r3, r3, #28
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	019a      	lsls	r2, r3, #6
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	041b      	lsls	r3, r3, #16
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	061b      	lsls	r3, r3, #24
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	071b      	lsls	r3, r3, #28
 8004c94:	4925      	ldr	r1, [pc, #148]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d011      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	019a      	lsls	r2, r3, #6
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	061b      	lsls	r3, r3, #24
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	071b      	lsls	r3, r3, #28
 8004cc4:	4919      	ldr	r1, [pc, #100]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ccc:	4b17      	ldr	r3, [pc, #92]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a16      	ldr	r2, [pc, #88]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd8:	f7fc feee 	bl	8001ab8 <HAL_GetTick>
 8004cdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ce0:	f7fc feea 	bl	8001ab8 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b64      	cmp	r3, #100	; 0x64
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e0d7      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	f040 80cd 	bne.w	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d12:	f7fc fed1 	bl	8001ab8 <HAL_GetTick>
 8004d16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d18:	e00a      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d1a:	f7fc fecd 	bl	8001ab8 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b64      	cmp	r3, #100	; 0x64
 8004d26:	d903      	bls.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e0ba      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004d2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d30:	4b5e      	ldr	r3, [pc, #376]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d3c:	d0ed      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d02e      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d12a      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d66:	4b51      	ldr	r3, [pc, #324]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d74:	4b4d      	ldr	r3, [pc, #308]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	0f1b      	lsrs	r3, r3, #28
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	019a      	lsls	r2, r3, #6
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	041b      	lsls	r3, r3, #16
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	061b      	lsls	r3, r3, #24
 8004d94:	431a      	orrs	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	071b      	lsls	r3, r3, #28
 8004d9a:	4944      	ldr	r1, [pc, #272]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004da2:	4b42      	ldr	r3, [pc, #264]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	493d      	ldr	r1, [pc, #244]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d022      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd0:	d11d      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dd2:	4b36      	ldr	r3, [pc, #216]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd8:	0e1b      	lsrs	r3, r3, #24
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004de0:	4b32      	ldr	r3, [pc, #200]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	0f1b      	lsrs	r3, r3, #28
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	019a      	lsls	r2, r3, #6
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	061b      	lsls	r3, r3, #24
 8004e00:	431a      	orrs	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	071b      	lsls	r3, r3, #28
 8004e06:	4929      	ldr	r1, [pc, #164]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d028      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e1a:	4b24      	ldr	r3, [pc, #144]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	0e1b      	lsrs	r3, r3, #24
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e28:	4b20      	ldr	r3, [pc, #128]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	0c1b      	lsrs	r3, r3, #16
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	019a      	lsls	r2, r3, #6
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	431a      	orrs	r2, r3
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	061b      	lsls	r3, r3, #24
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	071b      	lsls	r3, r3, #28
 8004e4e:	4917      	ldr	r1, [pc, #92]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e56:	4b15      	ldr	r3, [pc, #84]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	4911      	ldr	r1, [pc, #68]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a0e      	ldr	r2, [pc, #56]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e78:	f7fc fe1e 	bl	8001ab8 <HAL_GetTick>
 8004e7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e80:	f7fc fe1a 	bl	8001ab8 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	; 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e007      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9e:	d1ef      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800

08004eb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ece:	f040 808d 	bne.w	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004ed2:	4b93      	ldr	r3, [pc, #588]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ee0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee8:	d07c      	beq.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ef0:	d87b      	bhi.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004efe:	d039      	beq.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004f00:	e073      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004f02:	4b87      	ldr	r3, [pc, #540]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d108      	bne.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f0e:	4b84      	ldr	r3, [pc, #528]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f16:	4a83      	ldr	r2, [pc, #524]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	e007      	b.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004f20:	4b7f      	ldr	r3, [pc, #508]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f28:	4a7f      	ldr	r2, [pc, #508]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004f30:	4b7b      	ldr	r3, [pc, #492]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	0e1b      	lsrs	r3, r3, #24
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004f3e:	4b78      	ldr	r3, [pc, #480]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	099b      	lsrs	r3, r3, #6
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	fb03 f202 	mul.w	r2, r3, r2
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f56:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004f58:	4b71      	ldr	r3, [pc, #452]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	617b      	str	r3, [r7, #20]
        break;
 8004f72:	e03b      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004f74:	4b6a      	ldr	r3, [pc, #424]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d108      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f80:	4b67      	ldr	r3, [pc, #412]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f88:	4a66      	ldr	r2, [pc, #408]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	e007      	b.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004f92:	4b63      	ldr	r3, [pc, #396]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f9a:	4a63      	ldr	r2, [pc, #396]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004fa2:	4b5f      	ldr	r3, [pc, #380]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa8:	0e1b      	lsrs	r3, r3, #24
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004fb0:	4b5b      	ldr	r3, [pc, #364]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb6:	099b      	lsrs	r3, r3, #6
 8004fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	fb03 f202 	mul.w	r2, r3, r2
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004fca:	4b55      	ldr	r3, [pc, #340]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe0:	617b      	str	r3, [r7, #20]
        break;
 8004fe2:	e003      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004fe4:	4b51      	ldr	r3, [pc, #324]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004fe6:	617b      	str	r3, [r7, #20]
        break;
 8004fe8:	e000      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8004fea:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff2:	f040 808d 	bne.w	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004ff6:	4b4a      	ldr	r3, [pc, #296]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ffc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005004:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800500c:	d07c      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005014:	d87b      	bhi.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d004      	beq.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005022:	d039      	beq.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005024:	e073      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005026:	4b3e      	ldr	r3, [pc, #248]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d108      	bne.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005032:	4b3b      	ldr	r3, [pc, #236]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800503a:	4a3a      	ldr	r2, [pc, #232]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	e007      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005044:	4b36      	ldr	r3, [pc, #216]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800504c:	4a36      	ldr	r2, [pc, #216]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800504e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005052:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005054:	4b32      	ldr	r3, [pc, #200]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	0e1b      	lsrs	r3, r3, #24
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005062:	4b2f      	ldr	r3, [pc, #188]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	099b      	lsrs	r3, r3, #6
 800506a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	fb03 f202 	mul.w	r2, r3, r2
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	fbb2 f3f3 	udiv	r3, r2, r3
 800507a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800507c:	4b28      	ldr	r3, [pc, #160]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800507e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005082:	0a1b      	lsrs	r3, r3, #8
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	3301      	adds	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
        break;
 8005096:	e03b      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005098:	4b21      	ldr	r3, [pc, #132]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d108      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050a4:	4b1e      	ldr	r3, [pc, #120]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ac:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	e007      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80050b6:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050be:	4a1a      	ldr	r2, [pc, #104]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80050c6:	4b16      	ldr	r3, [pc, #88]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80050c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050cc:	0e1b      	lsrs	r3, r3, #24
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80050d4:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80050d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050da:	099b      	lsrs	r3, r3, #6
 80050dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	fb03 f202 	mul.w	r2, r3, r2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80050ee:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80050f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f4:	f003 031f 	and.w	r3, r3, #31
 80050f8:	3301      	adds	r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	617b      	str	r3, [r7, #20]
        break;
 8005106:	e003      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005108:	4b08      	ldr	r3, [pc, #32]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800510a:	617b      	str	r3, [r7, #20]
        break;
 800510c:	e000      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800510e:	bf00      	nop
      }
    }
  }

  return frequency;
 8005110:	697b      	ldr	r3, [r7, #20]
}
 8005112:	4618      	mov	r0, r3
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40023800 	.word	0x40023800
 8005124:	00f42400 	.word	0x00f42400
 8005128:	007a1200 	.word	0x007a1200
 800512c:	00bb8000 	.word	0x00bb8000

08005130 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e156      	b.n	80053fc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fc fab2 	bl	80016cc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fa55 	bl	8005620 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d00c      	beq.n	8005198 <HAL_SAI_Init+0x68>
 800517e:	2b02      	cmp	r3, #2
 8005180:	d80d      	bhi.n	800519e <HAL_SAI_Init+0x6e>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_SAI_Init+0x5c>
 8005186:	2b01      	cmp	r3, #1
 8005188:	d003      	beq.n	8005192 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800518a:	e008      	b.n	800519e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
      break;
 8005190:	e006      	b.n	80051a0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005192:	2310      	movs	r3, #16
 8005194:	61fb      	str	r3, [r7, #28]
      break;
 8005196:	e003      	b.n	80051a0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005198:	2320      	movs	r3, #32
 800519a:	61fb      	str	r3, [r7, #28]
      break;
 800519c:	e000      	b.n	80051a0 <HAL_SAI_Init+0x70>
      break;
 800519e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d81e      	bhi.n	80051e6 <HAL_SAI_Init+0xb6>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <HAL_SAI_Init+0x80>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051c1 	.word	0x080051c1
 80051b4:	080051c7 	.word	0x080051c7
 80051b8:	080051cf 	.word	0x080051cf
 80051bc:	080051d7 	.word	0x080051d7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
    }
    break;
 80051c4:	e010      	b.n	80051e8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80051c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ca:	617b      	str	r3, [r7, #20]
    }
    break;
 80051cc:	e00c      	b.n	80051e8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80051ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051d2:	617b      	str	r3, [r7, #20]
    }
    break;
 80051d4:	e008      	b.n	80051e8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80051d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051da:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
    }
    break;
 80051e4:	e000      	b.n	80051e8 <HAL_SAI_Init+0xb8>
    default:
      break;
 80051e6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a85      	ldr	r2, [pc, #532]	; (8005404 <HAL_SAI_Init+0x2d4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_SAI_Init+0xcc>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a84      	ldr	r2, [pc, #528]	; (8005408 <HAL_SAI_Init+0x2d8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80051fc:	4a83      	ldr	r2, [pc, #524]	; (800540c <HAL_SAI_Init+0x2dc>)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e002      	b.n	800520a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005204:	4a82      	ldr	r2, [pc, #520]	; (8005410 <HAL_SAI_Init+0x2e0>)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d04c      	beq.n	80052ac <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a7a      	ldr	r2, [pc, #488]	; (8005404 <HAL_SAI_Init+0x2d4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <HAL_SAI_Init+0xfa>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a78      	ldr	r2, [pc, #480]	; (8005408 <HAL_SAI_Init+0x2d8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d104      	bne.n	8005234 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800522a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800522e:	f7ff fe3f 	bl	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005232:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a76      	ldr	r2, [pc, #472]	; (8005414 <HAL_SAI_Init+0x2e4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_SAI_Init+0x118>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a75      	ldr	r2, [pc, #468]	; (8005418 <HAL_SAI_Init+0x2e8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d104      	bne.n	8005252 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005248:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800524c:	f7ff fe30 	bl	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005250:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	461a      	mov	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	025b      	lsls	r3, r3, #9
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4a6b      	ldr	r2, [pc, #428]	; (800541c <HAL_SAI_Init+0x2ec>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	08da      	lsrs	r2, r3, #3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005278:	68f9      	ldr	r1, [r7, #12]
 800527a:	4b68      	ldr	r3, [pc, #416]	; (800541c <HAL_SAI_Init+0x2ec>)
 800527c:	fba3 2301 	umull	r2, r3, r3, r1
 8005280:	08da      	lsrs	r2, r3, #3
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	1aca      	subs	r2, r1, r3
 800528c:	2a08      	cmp	r2, #8
 800528e:	d904      	bls.n	800529a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d104      	bne.n	80052ac <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	085a      	lsrs	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_SAI_Init+0x18c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d109      	bne.n	80052d0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_SAI_Init+0x198>
 80052c4:	2300      	movs	r3, #0
 80052c6:	e001      	b.n	80052cc <HAL_SAI_Init+0x19c>
 80052c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	e008      	b.n	80052e2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d102      	bne.n	80052de <HAL_SAI_Init+0x1ae>
 80052d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052dc:	e000      	b.n	80052e0 <HAL_SAI_Init+0x1b0>
 80052de:	2300      	movs	r3, #0
 80052e0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6819      	ldr	r1, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b4c      	ldr	r3, [pc, #304]	; (8005420 <HAL_SAI_Init+0x2f0>)
 80052ee:	400b      	ands	r3, r1
 80052f0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6819      	ldr	r1, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005306:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	431a      	orrs	r2, r3
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800531a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005326:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	051b      	lsls	r3, r3, #20
 800532e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b38      	ldr	r3, [pc, #224]	; (8005424 <HAL_SAI_Init+0x2f4>)
 8005344:	400b      	ands	r3, r1
 8005346:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6859      	ldr	r1, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b2d      	ldr	r3, [pc, #180]	; (8005428 <HAL_SAI_Init+0x2f8>)
 8005372:	400b      	ands	r3, r1
 8005374:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6899      	ldr	r1, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005386:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800538c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005392:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	3b01      	subs	r3, #1
 800539a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800539c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68d9      	ldr	r1, [r3, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	f24f 0320 	movw	r3, #61472	; 0xf020
 80053b4:	400b      	ands	r3, r1
 80053b6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68d9      	ldr	r1, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053cc:	041b      	lsls	r3, r3, #16
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d4:	3b01      	subs	r3, #1
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3720      	adds	r7, #32
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40015804 	.word	0x40015804
 8005408:	40015824 	.word	0x40015824
 800540c:	40015800 	.word	0x40015800
 8005410:	40015c00 	.word	0x40015c00
 8005414:	40015c04 	.word	0x40015c04
 8005418:	40015c24 	.word	0x40015c24
 800541c:	cccccccd 	.word	0xcccccccd
 8005420:	ff05c010 	.word	0xff05c010
 8005424:	ffff1ff0 	.word	0xffff1ff0
 8005428:	fff88000 	.word	0xfff88000

0800542c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800543a:	f7fc fb3d 	bl	8001ab8 <HAL_GetTick>
 800543e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_SAI_Transmit_DMA+0x20>
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e093      	b.n	8005578 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	f040 808c 	bne.w	8005576 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_SAI_Transmit_DMA+0x40>
 8005468:	2302      	movs	r3, #2
 800546a:	e085      	b.n	8005578 <HAL_SAI_Transmit_DMA+0x14c>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	88fa      	ldrh	r2, [r7, #6]
 800547e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	88fa      	ldrh	r2, [r7, #6]
 8005486:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2212      	movs	r2, #18
 8005496:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549e:	4a38      	ldr	r2, [pc, #224]	; (8005580 <HAL_SAI_Transmit_DMA+0x154>)
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a6:	4a37      	ldr	r2, [pc, #220]	; (8005584 <HAL_SAI_Transmit_DMA+0x158>)
 80054a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ae:	4a36      	ldr	r2, [pc, #216]	; (8005588 <HAL_SAI_Transmit_DMA+0x15c>)
 80054b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b6:	2200      	movs	r2, #0
 80054b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c2:	4619      	mov	r1, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	331c      	adds	r3, #28
 80054ca:	461a      	mov	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80054d2:	f7fd f8db 	bl	800268c <HAL_DMA_Start_IT>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e047      	b.n	8005578 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80054e8:	2100      	movs	r1, #0
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f862 	bl	80055b4 <SAI_InterruptFlag>
 80054f0:	4601      	mov	r1, r0
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800550e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005510:	e015      	b.n	800553e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005512:	f7fc fad1 	bl	8001ab8 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005520:	d90d      	bls.n	800553e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005528:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e01c      	b.n	8005578 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0e2      	beq.n	8005512 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d107      	bne.n	800556a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005568:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	e000      	b.n	8005578 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8005576:	2302      	movs	r3, #2
  }
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	080056f1 	.word	0x080056f1
 8005584:	08005691 	.word	0x08005691
 8005588:	0800570d 	.word	0x0800570d

0800558c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80055be:	2301      	movs	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d103      	bne.n	80055d0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f043 0308 	orr.w	r3, r3, #8
 80055ce:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d10b      	bne.n	80055f0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d003      	beq.n	80055e8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d103      	bne.n	80055f0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f043 0310 	orr.w	r3, r3, #16
 80055ee:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d003      	beq.n	8005600 <SAI_InterruptFlag+0x4c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d104      	bne.n	800560a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e003      	b.n	8005612 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f043 0304 	orr.w	r3, r3, #4
 8005610:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005612:	68fb      	ldr	r3, [r7, #12]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005628:	4b17      	ldr	r3, [pc, #92]	; (8005688 <SAI_Disable+0x68>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a17      	ldr	r2, [pc, #92]	; (800568c <SAI_Disable+0x6c>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	0b1b      	lsrs	r3, r3, #12
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800564a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1e5a      	subs	r2, r3, #1
 8005650:	60fa      	str	r2, [r7, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10a      	bne.n	800566c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800565c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	72fb      	strb	r3, [r7, #11]
      break;
 800566a:	e006      	b.n	800567a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e8      	bne.n	800564c <SAI_Disable+0x2c>

  return status;
 800567a:	7afb      	ldrb	r3, [r7, #11]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	20000008 	.word	0x20000008
 800568c:	95cbec1b 	.word	0x95cbec1b

08005690 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a6:	d01c      	beq.n	80056e2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80056be:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80056c0:	2100      	movs	r1, #0
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff ff76 	bl	80055b4 <SAI_InterruptFlag>
 80056c8:	4603      	mov	r3, r0
 80056ca:	43d9      	mvns	r1, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	400a      	ands	r2, r1
 80056d8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7fa ffdc 	bl	80006a0 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80056e8:	bf00      	nop
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff ff44 	bl	800558c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005720:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	2b01      	cmp	r3, #1
 8005732:	d004      	beq.n	800573e <SAI_DMAError+0x32>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	2b01      	cmp	r3, #1
 800573c:	d112      	bne.n	8005764 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800574c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff ff66 	bl	8005620 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f7ff ff1b 	bl	80055a0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800576a:	bf00      	nop
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e040      	b.n	8005806 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fb feb7 	bl	8001508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2224      	movs	r2, #36	; 0x24
 800579e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0201 	bic.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fbe5 	bl	8005f80 <UART_SetConfig>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e022      	b.n	8005806 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fe3d 	bl	8006448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fec4 	bl	800658c <UART_CheckIdleState>
 8005804:	4603      	mov	r3, r0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b08a      	sub	sp, #40	; 0x28
 8005812:	af02      	add	r7, sp, #8
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	603b      	str	r3, [r7, #0]
 800581a:	4613      	mov	r3, r2
 800581c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005822:	2b20      	cmp	r3, #32
 8005824:	d171      	bne.n	800590a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_UART_Transmit+0x24>
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e06a      	b.n	800590c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2221      	movs	r2, #33	; 0x21
 8005842:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005844:	f7fc f938 	bl	8001ab8 <HAL_GetTick>
 8005848:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	88fa      	ldrh	r2, [r7, #6]
 800584e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005862:	d108      	bne.n	8005876 <HAL_UART_Transmit+0x68>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d104      	bne.n	8005876 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800586c:	2300      	movs	r3, #0
 800586e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	61bb      	str	r3, [r7, #24]
 8005874:	e003      	b.n	800587e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800587e:	e02c      	b.n	80058da <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2200      	movs	r2, #0
 8005888:	2180      	movs	r1, #128	; 0x80
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 feb5 	bl	80065fa <UART_WaitOnFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e038      	b.n	800590c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	3302      	adds	r3, #2
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	e007      	b.n	80058c8 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	781a      	ldrb	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1cc      	bne.n	8005880 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2200      	movs	r2, #0
 80058ee:	2140      	movs	r1, #64	; 0x40
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 fe82 	bl	80065fa <UART_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e005      	b.n	800590c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e000      	b.n	800590c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800590a:	2302      	movs	r3, #2
  }
}
 800590c:	4618      	mov	r0, r3
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08a      	sub	sp, #40	; 0x28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005928:	2b20      	cmp	r3, #32
 800592a:	d132      	bne.n	8005992 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_UART_Receive_IT+0x24>
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e02b      	b.n	8005994 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d018      	beq.n	8005982 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	613b      	str	r3, [r7, #16]
   return(result);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	623b      	str	r3, [r7, #32]
 8005970:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	69f9      	ldr	r1, [r7, #28]
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	61bb      	str	r3, [r7, #24]
   return(result);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e6      	bne.n	8005950 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	461a      	mov	r2, r3
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fefd 	bl	8006788 <UART_Start_Receive_IT>
 800598e:	4603      	mov	r3, r0
 8005990:	e000      	b.n	8005994 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005992:	2302      	movs	r3, #2
  }
}
 8005994:	4618      	mov	r0, r3
 8005996:	3728      	adds	r7, #40	; 0x28
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b0ba      	sub	sp, #232	; 0xe8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80059ca:	4013      	ands	r3, r2
 80059cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80059d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d115      	bne.n	8005a04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00f      	beq.n	8005a04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d009      	beq.n	8005a04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8297 	beq.w	8005f28 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
      }
      return;
 8005a02:	e291      	b.n	8005f28 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 8117 	beq.w	8005c3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a1e:	4b85      	ldr	r3, [pc, #532]	; (8005c34 <HAL_UART_IRQHandler+0x298>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 810a 	beq.w	8005c3c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d011      	beq.n	8005a58 <HAL_UART_IRQHandler+0xbc>
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2201      	movs	r2, #1
 8005a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4e:	f043 0201 	orr.w	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d011      	beq.n	8005a88 <HAL_UART_IRQHandler+0xec>
 8005a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2202      	movs	r2, #2
 8005a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7e:	f043 0204 	orr.w	r2, r3, #4
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d011      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x11c>
 8005a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aae:	f043 0202 	orr.w	r2, r3, #2
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d017      	beq.n	8005af4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d105      	bne.n	8005adc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00b      	beq.n	8005af4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aea:	f043 0208 	orr.w	r2, r3, #8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d012      	beq.n	8005b26 <HAL_UART_IRQHandler+0x18a>
 8005b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00c      	beq.n	8005b26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1c:	f043 0220 	orr.w	r2, r3, #32
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 81fd 	beq.w	8005f2c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00d      	beq.n	8005b5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	d005      	beq.n	8005b7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d04f      	beq.n	8005c1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fec8 	bl	8006914 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d141      	bne.n	8005c16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3308      	adds	r3, #8
 8005b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1d9      	bne.n	8005b92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d013      	beq.n	8005c0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bea:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <HAL_UART_IRQHandler+0x29c>)
 8005bec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fc fe1a 	bl	800282c <HAL_DMA_Abort_IT>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d017      	beq.n	8005c2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0c:	e00f      	b.n	8005c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9a0 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	e00b      	b.n	8005c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f99c 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1c:	e007      	b.n	8005c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f998 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005c2c:	e17e      	b.n	8005f2c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2e:	bf00      	nop
    return;
 8005c30:	e17c      	b.n	8005f2c <HAL_UART_IRQHandler+0x590>
 8005c32:	bf00      	nop
 8005c34:	04000120 	.word	0x04000120
 8005c38:	080069dd 	.word	0x080069dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	f040 814c 	bne.w	8005ede <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f003 0310 	and.w	r3, r3, #16
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8145 	beq.w	8005ede <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 813e 	beq.w	8005ede <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2210      	movs	r2, #16
 8005c68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c74:	2b40      	cmp	r3, #64	; 0x40
 8005c76:	f040 80b6 	bne.w	8005de6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8150 	beq.w	8005f30 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	f080 8148 	bcs.w	8005f30 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb4:	f000 8086 	beq.w	8005dc4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ce6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1da      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e1      	bne.n	8005d02 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3308      	adds	r3, #8
 8005d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e3      	bne.n	8005d3e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d94:	f023 0310 	bic.w	r3, r3, #16
 8005d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005da8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e4      	bne.n	8005d84 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fc fcc4 	bl	800274c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f8c2 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005de4:	e0a4      	b.n	8005f30 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8096 	beq.w	8005f34 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8091 	beq.w	8005f34 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e34:	647b      	str	r3, [r7, #68]	; 0x44
 8005e36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e4      	bne.n	8005e12 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	623b      	str	r3, [r7, #32]
   return(result);
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e6c:	633a      	str	r2, [r7, #48]	; 0x30
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e3      	bne.n	8005e48 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f023 0310 	bic.w	r3, r3, #16
 8005ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	69b9      	ldr	r1, [r7, #24]
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e4      	bne.n	8005e94 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f846 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005edc:	e02a      	b.n	8005f34 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d008      	beq.n	8005f08 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01c      	beq.n	8005f38 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
    }
    return;
 8005f06:	e017      	b.n	8005f38 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d012      	beq.n	8005f3a <HAL_UART_IRQHandler+0x59e>
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fd71 	bl	8006a08 <UART_EndTransmit_IT>
    return;
 8005f26:	e008      	b.n	8005f3a <HAL_UART_IRQHandler+0x59e>
      return;
 8005f28:	bf00      	nop
 8005f2a:	e006      	b.n	8005f3a <HAL_UART_IRQHandler+0x59e>
    return;
 8005f2c:	bf00      	nop
 8005f2e:	e004      	b.n	8005f3a <HAL_UART_IRQHandler+0x59e>
      return;
 8005f30:	bf00      	nop
 8005f32:	e002      	b.n	8005f3a <HAL_UART_IRQHandler+0x59e>
      return;
 8005f34:	bf00      	nop
 8005f36:	e000      	b.n	8005f3a <HAL_UART_IRQHandler+0x59e>
    return;
 8005f38:	bf00      	nop
  }

}
 8005f3a:	37e8      	adds	r7, #232	; 0xe8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4ba6      	ldr	r3, [pc, #664]	; (8006244 <UART_SetConfig+0x2c4>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	6979      	ldr	r1, [r7, #20]
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a94      	ldr	r2, [pc, #592]	; (8006248 <UART_SetConfig+0x2c8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d120      	bne.n	800603e <UART_SetConfig+0xbe>
 8005ffc:	4b93      	ldr	r3, [pc, #588]	; (800624c <UART_SetConfig+0x2cc>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	2b03      	cmp	r3, #3
 8006008:	d816      	bhi.n	8006038 <UART_SetConfig+0xb8>
 800600a:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <UART_SetConfig+0x90>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006021 	.word	0x08006021
 8006014:	0800602d 	.word	0x0800602d
 8006018:	08006027 	.word	0x08006027
 800601c:	08006033 	.word	0x08006033
 8006020:	2301      	movs	r3, #1
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e150      	b.n	80062c8 <UART_SetConfig+0x348>
 8006026:	2302      	movs	r3, #2
 8006028:	77fb      	strb	r3, [r7, #31]
 800602a:	e14d      	b.n	80062c8 <UART_SetConfig+0x348>
 800602c:	2304      	movs	r3, #4
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e14a      	b.n	80062c8 <UART_SetConfig+0x348>
 8006032:	2308      	movs	r3, #8
 8006034:	77fb      	strb	r3, [r7, #31]
 8006036:	e147      	b.n	80062c8 <UART_SetConfig+0x348>
 8006038:	2310      	movs	r3, #16
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e144      	b.n	80062c8 <UART_SetConfig+0x348>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a83      	ldr	r2, [pc, #524]	; (8006250 <UART_SetConfig+0x2d0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d132      	bne.n	80060ae <UART_SetConfig+0x12e>
 8006048:	4b80      	ldr	r3, [pc, #512]	; (800624c <UART_SetConfig+0x2cc>)
 800604a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604e:	f003 030c 	and.w	r3, r3, #12
 8006052:	2b0c      	cmp	r3, #12
 8006054:	d828      	bhi.n	80060a8 <UART_SetConfig+0x128>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0xdc>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	08006091 	.word	0x08006091
 8006060:	080060a9 	.word	0x080060a9
 8006064:	080060a9 	.word	0x080060a9
 8006068:	080060a9 	.word	0x080060a9
 800606c:	0800609d 	.word	0x0800609d
 8006070:	080060a9 	.word	0x080060a9
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060a9 	.word	0x080060a9
 800607c:	08006097 	.word	0x08006097
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060a9 	.word	0x080060a9
 800608c:	080060a3 	.word	0x080060a3
 8006090:	2300      	movs	r3, #0
 8006092:	77fb      	strb	r3, [r7, #31]
 8006094:	e118      	b.n	80062c8 <UART_SetConfig+0x348>
 8006096:	2302      	movs	r3, #2
 8006098:	77fb      	strb	r3, [r7, #31]
 800609a:	e115      	b.n	80062c8 <UART_SetConfig+0x348>
 800609c:	2304      	movs	r3, #4
 800609e:	77fb      	strb	r3, [r7, #31]
 80060a0:	e112      	b.n	80062c8 <UART_SetConfig+0x348>
 80060a2:	2308      	movs	r3, #8
 80060a4:	77fb      	strb	r3, [r7, #31]
 80060a6:	e10f      	b.n	80062c8 <UART_SetConfig+0x348>
 80060a8:	2310      	movs	r3, #16
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e10c      	b.n	80062c8 <UART_SetConfig+0x348>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a68      	ldr	r2, [pc, #416]	; (8006254 <UART_SetConfig+0x2d4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d120      	bne.n	80060fa <UART_SetConfig+0x17a>
 80060b8:	4b64      	ldr	r3, [pc, #400]	; (800624c <UART_SetConfig+0x2cc>)
 80060ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060c2:	2b30      	cmp	r3, #48	; 0x30
 80060c4:	d013      	beq.n	80060ee <UART_SetConfig+0x16e>
 80060c6:	2b30      	cmp	r3, #48	; 0x30
 80060c8:	d814      	bhi.n	80060f4 <UART_SetConfig+0x174>
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d009      	beq.n	80060e2 <UART_SetConfig+0x162>
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d810      	bhi.n	80060f4 <UART_SetConfig+0x174>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <UART_SetConfig+0x15c>
 80060d6:	2b10      	cmp	r3, #16
 80060d8:	d006      	beq.n	80060e8 <UART_SetConfig+0x168>
 80060da:	e00b      	b.n	80060f4 <UART_SetConfig+0x174>
 80060dc:	2300      	movs	r3, #0
 80060de:	77fb      	strb	r3, [r7, #31]
 80060e0:	e0f2      	b.n	80062c8 <UART_SetConfig+0x348>
 80060e2:	2302      	movs	r3, #2
 80060e4:	77fb      	strb	r3, [r7, #31]
 80060e6:	e0ef      	b.n	80062c8 <UART_SetConfig+0x348>
 80060e8:	2304      	movs	r3, #4
 80060ea:	77fb      	strb	r3, [r7, #31]
 80060ec:	e0ec      	b.n	80062c8 <UART_SetConfig+0x348>
 80060ee:	2308      	movs	r3, #8
 80060f0:	77fb      	strb	r3, [r7, #31]
 80060f2:	e0e9      	b.n	80062c8 <UART_SetConfig+0x348>
 80060f4:	2310      	movs	r3, #16
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e0e6      	b.n	80062c8 <UART_SetConfig+0x348>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a56      	ldr	r2, [pc, #344]	; (8006258 <UART_SetConfig+0x2d8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d120      	bne.n	8006146 <UART_SetConfig+0x1c6>
 8006104:	4b51      	ldr	r3, [pc, #324]	; (800624c <UART_SetConfig+0x2cc>)
 8006106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800610e:	2bc0      	cmp	r3, #192	; 0xc0
 8006110:	d013      	beq.n	800613a <UART_SetConfig+0x1ba>
 8006112:	2bc0      	cmp	r3, #192	; 0xc0
 8006114:	d814      	bhi.n	8006140 <UART_SetConfig+0x1c0>
 8006116:	2b80      	cmp	r3, #128	; 0x80
 8006118:	d009      	beq.n	800612e <UART_SetConfig+0x1ae>
 800611a:	2b80      	cmp	r3, #128	; 0x80
 800611c:	d810      	bhi.n	8006140 <UART_SetConfig+0x1c0>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <UART_SetConfig+0x1a8>
 8006122:	2b40      	cmp	r3, #64	; 0x40
 8006124:	d006      	beq.n	8006134 <UART_SetConfig+0x1b4>
 8006126:	e00b      	b.n	8006140 <UART_SetConfig+0x1c0>
 8006128:	2300      	movs	r3, #0
 800612a:	77fb      	strb	r3, [r7, #31]
 800612c:	e0cc      	b.n	80062c8 <UART_SetConfig+0x348>
 800612e:	2302      	movs	r3, #2
 8006130:	77fb      	strb	r3, [r7, #31]
 8006132:	e0c9      	b.n	80062c8 <UART_SetConfig+0x348>
 8006134:	2304      	movs	r3, #4
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	e0c6      	b.n	80062c8 <UART_SetConfig+0x348>
 800613a:	2308      	movs	r3, #8
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e0c3      	b.n	80062c8 <UART_SetConfig+0x348>
 8006140:	2310      	movs	r3, #16
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e0c0      	b.n	80062c8 <UART_SetConfig+0x348>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a44      	ldr	r2, [pc, #272]	; (800625c <UART_SetConfig+0x2dc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d125      	bne.n	800619c <UART_SetConfig+0x21c>
 8006150:	4b3e      	ldr	r3, [pc, #248]	; (800624c <UART_SetConfig+0x2cc>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800615a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800615e:	d017      	beq.n	8006190 <UART_SetConfig+0x210>
 8006160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006164:	d817      	bhi.n	8006196 <UART_SetConfig+0x216>
 8006166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800616a:	d00b      	beq.n	8006184 <UART_SetConfig+0x204>
 800616c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006170:	d811      	bhi.n	8006196 <UART_SetConfig+0x216>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <UART_SetConfig+0x1fe>
 8006176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617a:	d006      	beq.n	800618a <UART_SetConfig+0x20a>
 800617c:	e00b      	b.n	8006196 <UART_SetConfig+0x216>
 800617e:	2300      	movs	r3, #0
 8006180:	77fb      	strb	r3, [r7, #31]
 8006182:	e0a1      	b.n	80062c8 <UART_SetConfig+0x348>
 8006184:	2302      	movs	r3, #2
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e09e      	b.n	80062c8 <UART_SetConfig+0x348>
 800618a:	2304      	movs	r3, #4
 800618c:	77fb      	strb	r3, [r7, #31]
 800618e:	e09b      	b.n	80062c8 <UART_SetConfig+0x348>
 8006190:	2308      	movs	r3, #8
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e098      	b.n	80062c8 <UART_SetConfig+0x348>
 8006196:	2310      	movs	r3, #16
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e095      	b.n	80062c8 <UART_SetConfig+0x348>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2f      	ldr	r2, [pc, #188]	; (8006260 <UART_SetConfig+0x2e0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d125      	bne.n	80061f2 <UART_SetConfig+0x272>
 80061a6:	4b29      	ldr	r3, [pc, #164]	; (800624c <UART_SetConfig+0x2cc>)
 80061a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061b4:	d017      	beq.n	80061e6 <UART_SetConfig+0x266>
 80061b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ba:	d817      	bhi.n	80061ec <UART_SetConfig+0x26c>
 80061bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c0:	d00b      	beq.n	80061da <UART_SetConfig+0x25a>
 80061c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c6:	d811      	bhi.n	80061ec <UART_SetConfig+0x26c>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <UART_SetConfig+0x254>
 80061cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d0:	d006      	beq.n	80061e0 <UART_SetConfig+0x260>
 80061d2:	e00b      	b.n	80061ec <UART_SetConfig+0x26c>
 80061d4:	2301      	movs	r3, #1
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e076      	b.n	80062c8 <UART_SetConfig+0x348>
 80061da:	2302      	movs	r3, #2
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e073      	b.n	80062c8 <UART_SetConfig+0x348>
 80061e0:	2304      	movs	r3, #4
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e070      	b.n	80062c8 <UART_SetConfig+0x348>
 80061e6:	2308      	movs	r3, #8
 80061e8:	77fb      	strb	r3, [r7, #31]
 80061ea:	e06d      	b.n	80062c8 <UART_SetConfig+0x348>
 80061ec:	2310      	movs	r3, #16
 80061ee:	77fb      	strb	r3, [r7, #31]
 80061f0:	e06a      	b.n	80062c8 <UART_SetConfig+0x348>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a1b      	ldr	r2, [pc, #108]	; (8006264 <UART_SetConfig+0x2e4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d138      	bne.n	800626e <UART_SetConfig+0x2ee>
 80061fc:	4b13      	ldr	r3, [pc, #76]	; (800624c <UART_SetConfig+0x2cc>)
 80061fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006202:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006206:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800620a:	d017      	beq.n	800623c <UART_SetConfig+0x2bc>
 800620c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006210:	d82a      	bhi.n	8006268 <UART_SetConfig+0x2e8>
 8006212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006216:	d00b      	beq.n	8006230 <UART_SetConfig+0x2b0>
 8006218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621c:	d824      	bhi.n	8006268 <UART_SetConfig+0x2e8>
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <UART_SetConfig+0x2aa>
 8006222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006226:	d006      	beq.n	8006236 <UART_SetConfig+0x2b6>
 8006228:	e01e      	b.n	8006268 <UART_SetConfig+0x2e8>
 800622a:	2300      	movs	r3, #0
 800622c:	77fb      	strb	r3, [r7, #31]
 800622e:	e04b      	b.n	80062c8 <UART_SetConfig+0x348>
 8006230:	2302      	movs	r3, #2
 8006232:	77fb      	strb	r3, [r7, #31]
 8006234:	e048      	b.n	80062c8 <UART_SetConfig+0x348>
 8006236:	2304      	movs	r3, #4
 8006238:	77fb      	strb	r3, [r7, #31]
 800623a:	e045      	b.n	80062c8 <UART_SetConfig+0x348>
 800623c:	2308      	movs	r3, #8
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e042      	b.n	80062c8 <UART_SetConfig+0x348>
 8006242:	bf00      	nop
 8006244:	efff69f3 	.word	0xefff69f3
 8006248:	40011000 	.word	0x40011000
 800624c:	40023800 	.word	0x40023800
 8006250:	40004400 	.word	0x40004400
 8006254:	40004800 	.word	0x40004800
 8006258:	40004c00 	.word	0x40004c00
 800625c:	40005000 	.word	0x40005000
 8006260:	40011400 	.word	0x40011400
 8006264:	40007800 	.word	0x40007800
 8006268:	2310      	movs	r3, #16
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e02c      	b.n	80062c8 <UART_SetConfig+0x348>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a72      	ldr	r2, [pc, #456]	; (800643c <UART_SetConfig+0x4bc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d125      	bne.n	80062c4 <UART_SetConfig+0x344>
 8006278:	4b71      	ldr	r3, [pc, #452]	; (8006440 <UART_SetConfig+0x4c0>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006282:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006286:	d017      	beq.n	80062b8 <UART_SetConfig+0x338>
 8006288:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800628c:	d817      	bhi.n	80062be <UART_SetConfig+0x33e>
 800628e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006292:	d00b      	beq.n	80062ac <UART_SetConfig+0x32c>
 8006294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006298:	d811      	bhi.n	80062be <UART_SetConfig+0x33e>
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <UART_SetConfig+0x326>
 800629e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a2:	d006      	beq.n	80062b2 <UART_SetConfig+0x332>
 80062a4:	e00b      	b.n	80062be <UART_SetConfig+0x33e>
 80062a6:	2300      	movs	r3, #0
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e00d      	b.n	80062c8 <UART_SetConfig+0x348>
 80062ac:	2302      	movs	r3, #2
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e00a      	b.n	80062c8 <UART_SetConfig+0x348>
 80062b2:	2304      	movs	r3, #4
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	e007      	b.n	80062c8 <UART_SetConfig+0x348>
 80062b8:	2308      	movs	r3, #8
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e004      	b.n	80062c8 <UART_SetConfig+0x348>
 80062be:	2310      	movs	r3, #16
 80062c0:	77fb      	strb	r3, [r7, #31]
 80062c2:	e001      	b.n	80062c8 <UART_SetConfig+0x348>
 80062c4:	2310      	movs	r3, #16
 80062c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d0:	d15b      	bne.n	800638a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80062d2:	7ffb      	ldrb	r3, [r7, #31]
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d828      	bhi.n	800632a <UART_SetConfig+0x3aa>
 80062d8:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <UART_SetConfig+0x360>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	08006305 	.word	0x08006305
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	08006315 	.word	0x08006315
 80062ec:	0800632b 	.word	0x0800632b
 80062f0:	0800631b 	.word	0x0800631b
 80062f4:	0800632b 	.word	0x0800632b
 80062f8:	0800632b 	.word	0x0800632b
 80062fc:	0800632b 	.word	0x0800632b
 8006300:	08006323 	.word	0x08006323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006304:	f7fe f9bc 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 8006308:	61b8      	str	r0, [r7, #24]
        break;
 800630a:	e013      	b.n	8006334 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800630c:	f7fe f9cc 	bl	80046a8 <HAL_RCC_GetPCLK2Freq>
 8006310:	61b8      	str	r0, [r7, #24]
        break;
 8006312:	e00f      	b.n	8006334 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006314:	4b4b      	ldr	r3, [pc, #300]	; (8006444 <UART_SetConfig+0x4c4>)
 8006316:	61bb      	str	r3, [r7, #24]
        break;
 8006318:	e00c      	b.n	8006334 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631a:	f7fe f89f 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800631e:	61b8      	str	r0, [r7, #24]
        break;
 8006320:	e008      	b.n	8006334 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006326:	61bb      	str	r3, [r7, #24]
        break;
 8006328:	e004      	b.n	8006334 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	77bb      	strb	r3, [r7, #30]
        break;
 8006332:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d074      	beq.n	8006424 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	005a      	lsls	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	085b      	lsrs	r3, r3, #1
 8006344:	441a      	add	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	fbb2 f3f3 	udiv	r3, r2, r3
 800634e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b0f      	cmp	r3, #15
 8006354:	d916      	bls.n	8006384 <UART_SetConfig+0x404>
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635c:	d212      	bcs.n	8006384 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	b29b      	uxth	r3, r3
 8006362:	f023 030f 	bic.w	r3, r3, #15
 8006366:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	085b      	lsrs	r3, r3, #1
 800636c:	b29b      	uxth	r3, r3
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	b29a      	uxth	r2, r3
 8006374:	89fb      	ldrh	r3, [r7, #14]
 8006376:	4313      	orrs	r3, r2
 8006378:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	89fa      	ldrh	r2, [r7, #14]
 8006380:	60da      	str	r2, [r3, #12]
 8006382:	e04f      	b.n	8006424 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	77bb      	strb	r3, [r7, #30]
 8006388:	e04c      	b.n	8006424 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800638a:	7ffb      	ldrb	r3, [r7, #31]
 800638c:	2b08      	cmp	r3, #8
 800638e:	d828      	bhi.n	80063e2 <UART_SetConfig+0x462>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0x418>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063bd 	.word	0x080063bd
 800639c:	080063c5 	.word	0x080063c5
 80063a0:	080063cd 	.word	0x080063cd
 80063a4:	080063e3 	.word	0x080063e3
 80063a8:	080063d3 	.word	0x080063d3
 80063ac:	080063e3 	.word	0x080063e3
 80063b0:	080063e3 	.word	0x080063e3
 80063b4:	080063e3 	.word	0x080063e3
 80063b8:	080063db 	.word	0x080063db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063bc:	f7fe f960 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 80063c0:	61b8      	str	r0, [r7, #24]
        break;
 80063c2:	e013      	b.n	80063ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c4:	f7fe f970 	bl	80046a8 <HAL_RCC_GetPCLK2Freq>
 80063c8:	61b8      	str	r0, [r7, #24]
        break;
 80063ca:	e00f      	b.n	80063ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063cc:	4b1d      	ldr	r3, [pc, #116]	; (8006444 <UART_SetConfig+0x4c4>)
 80063ce:	61bb      	str	r3, [r7, #24]
        break;
 80063d0:	e00c      	b.n	80063ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063d2:	f7fe f843 	bl	800445c <HAL_RCC_GetSysClockFreq>
 80063d6:	61b8      	str	r0, [r7, #24]
        break;
 80063d8:	e008      	b.n	80063ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063de:	61bb      	str	r3, [r7, #24]
        break;
 80063e0:	e004      	b.n	80063ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	77bb      	strb	r3, [r7, #30]
        break;
 80063ea:	bf00      	nop
    }

    if (pclk != 0U)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d018      	beq.n	8006424 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	085a      	lsrs	r2, r3, #1
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	441a      	add	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	fbb2 f3f3 	udiv	r3, r2, r3
 8006404:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b0f      	cmp	r3, #15
 800640a:	d909      	bls.n	8006420 <UART_SetConfig+0x4a0>
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006412:	d205      	bcs.n	8006420 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	b29a      	uxth	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60da      	str	r2, [r3, #12]
 800641e:	e001      	b.n	8006424 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006430:	7fbb      	ldrb	r3, [r7, #30]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	40007c00 	.word	0x40007c00
 8006440:	40023800 	.word	0x40023800
 8006444:	00f42400 	.word	0x00f42400

08006448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01a      	beq.n	800655e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006546:	d10a      	bne.n	800655e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af02      	add	r7, sp, #8
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800659c:	f7fb fa8c 	bl	8001ab8 <HAL_GetTick>
 80065a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d10e      	bne.n	80065ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f81b 	bl	80065fa <UART_WaitOnFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e011      	b.n	80065f2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b09c      	sub	sp, #112	; 0x70
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	4613      	mov	r3, r2
 8006608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660a:	e0a7      	b.n	800675c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	f000 80a3 	beq.w	800675c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006616:	f7fb fa4f 	bl	8001ab8 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006622:	429a      	cmp	r2, r3
 8006624:	d302      	bcc.n	800662c <UART_WaitOnFlagUntilTimeout+0x32>
 8006626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006628:	2b00      	cmp	r3, #0
 800662a:	d13f      	bne.n	80066ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800663a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006640:	667b      	str	r3, [r7, #100]	; 0x64
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800664a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800664c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006650:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e6      	bne.n	800662c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3308      	adds	r3, #8
 8006664:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	663b      	str	r3, [r7, #96]	; 0x60
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3308      	adds	r3, #8
 800667c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800667e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006680:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800668c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e5      	bne.n	800665e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2220      	movs	r2, #32
 8006696:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e068      	b.n	800677e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d050      	beq.n	800675c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c8:	d148      	bne.n	800675c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f2:	637b      	str	r3, [r7, #52]	; 0x34
 80066f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e6      	bne.n	80066d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	613b      	str	r3, [r7, #16]
   return(result);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	66bb      	str	r3, [r7, #104]	; 0x68
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006726:	623a      	str	r2, [r7, #32]
 8006728:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	69f9      	ldr	r1, [r7, #28]
 800672c:	6a3a      	ldr	r2, [r7, #32]
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	61bb      	str	r3, [r7, #24]
   return(result);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e5      	bne.n	8006706 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e010      	b.n	800677e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69da      	ldr	r2, [r3, #28]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4013      	ands	r3, r2
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	429a      	cmp	r2, r3
 800676a:	bf0c      	ite	eq
 800676c:	2301      	moveq	r3, #1
 800676e:	2300      	movne	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	429a      	cmp	r2, r3
 8006778:	f43f af48 	beq.w	800660c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3770      	adds	r7, #112	; 0x70
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006788:	b480      	push	{r7}
 800678a:	b097      	sub	sp, #92	; 0x5c
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	88fa      	ldrh	r2, [r7, #6]
 80067a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ba:	d10e      	bne.n	80067da <UART_Start_Receive_IT+0x52>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <UART_Start_Receive_IT+0x48>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80067ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067ce:	e02d      	b.n	800682c <UART_Start_Receive_IT+0xa4>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	22ff      	movs	r2, #255	; 0xff
 80067d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067d8:	e028      	b.n	800682c <UART_Start_Receive_IT+0xa4>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10d      	bne.n	80067fe <UART_Start_Receive_IT+0x76>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d104      	bne.n	80067f4 <UART_Start_Receive_IT+0x6c>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	22ff      	movs	r2, #255	; 0xff
 80067ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067f2:	e01b      	b.n	800682c <UART_Start_Receive_IT+0xa4>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	227f      	movs	r2, #127	; 0x7f
 80067f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067fc:	e016      	b.n	800682c <UART_Start_Receive_IT+0xa4>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006806:	d10d      	bne.n	8006824 <UART_Start_Receive_IT+0x9c>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <UART_Start_Receive_IT+0x92>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	227f      	movs	r2, #127	; 0x7f
 8006814:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006818:	e008      	b.n	800682c <UART_Start_Receive_IT+0xa4>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	223f      	movs	r2, #63	; 0x3f
 800681e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006822:	e003      	b.n	800682c <UART_Start_Receive_IT+0xa4>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2222      	movs	r2, #34	; 0x22
 8006838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3308      	adds	r3, #8
 8006842:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006846:	e853 3f00 	ldrex	r3, [r3]
 800684a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	f043 0301 	orr.w	r3, r3, #1
 8006852:	657b      	str	r3, [r7, #84]	; 0x54
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3308      	adds	r3, #8
 800685a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800685c:	64ba      	str	r2, [r7, #72]	; 0x48
 800685e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800686a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e5      	bne.n	800683c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006878:	d107      	bne.n	800688a <UART_Start_Receive_IT+0x102>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4a21      	ldr	r2, [pc, #132]	; (800690c <UART_Start_Receive_IT+0x184>)
 8006886:	669a      	str	r2, [r3, #104]	; 0x68
 8006888:	e002      	b.n	8006890 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4a20      	ldr	r2, [pc, #128]	; (8006910 <UART_Start_Receive_IT+0x188>)
 800688e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d019      	beq.n	80068cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80068ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b6:	637b      	str	r3, [r7, #52]	; 0x34
 80068b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e6      	bne.n	8006898 <UART_Start_Receive_IT+0x110>
 80068ca:	e018      	b.n	80068fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	613b      	str	r3, [r7, #16]
   return(result);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f043 0320 	orr.w	r3, r3, #32
 80068e0:	653b      	str	r3, [r7, #80]	; 0x50
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ea:	623b      	str	r3, [r7, #32]
 80068ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	69f9      	ldr	r1, [r7, #28]
 80068f0:	6a3a      	ldr	r2, [r7, #32]
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e6      	bne.n	80068cc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	375c      	adds	r7, #92	; 0x5c
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	08006bc3 	.word	0x08006bc3
 8006910:	08006a5d 	.word	0x08006a5d

08006914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b095      	sub	sp, #84	; 0x54
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006930:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693a:	643b      	str	r3, [r7, #64]	; 0x40
 800693c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e6      	bne.n	800691c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	61fb      	str	r3, [r7, #28]
   return(result);
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	64bb      	str	r3, [r7, #72]	; 0x48
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800696e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006970:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e5      	bne.n	800694e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006986:	2b01      	cmp	r3, #1
 8006988:	d118      	bne.n	80069bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	60bb      	str	r3, [r7, #8]
   return(result);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f023 0310 	bic.w	r3, r3, #16
 800699e:	647b      	str	r3, [r7, #68]	; 0x44
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a8:	61bb      	str	r3, [r7, #24]
 80069aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6979      	ldr	r1, [r7, #20]
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	613b      	str	r3, [r7, #16]
   return(result);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e6      	bne.n	800698a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069d0:	bf00      	nop
 80069d2:	3754      	adds	r7, #84	; 0x54
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7ff faaa 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a24:	61fb      	str	r3, [r7, #28]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6979      	ldr	r1, [r7, #20]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e6      	bne.n	8006a10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff fa76 	bl	8005f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a54:	bf00      	nop
 8006a56:	3720      	adds	r7, #32
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b096      	sub	sp, #88	; 0x58
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a6a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a74:	2b22      	cmp	r3, #34	; 0x22
 8006a76:	f040 8098 	bne.w	8006baa <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a84:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a88:	b2d9      	uxtb	r1, r3
 8006a8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	400a      	ands	r2, r1
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d17b      	bne.n	8006bba <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e6      	bne.n	8006ac2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	623b      	str	r3, [r7, #32]
   return(result);
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b14:	633a      	str	r2, [r7, #48]	; 0x30
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e5      	bne.n	8006af4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d12e      	bne.n	8006ba2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0310 	bic.w	r3, r3, #16
 8006b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b68:	61fb      	str	r3, [r7, #28]
 8006b6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	69b9      	ldr	r1, [r7, #24]
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	617b      	str	r3, [r7, #20]
   return(result);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e6      	bne.n	8006b4a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f003 0310 	and.w	r3, r3, #16
 8006b86:	2b10      	cmp	r3, #16
 8006b88:	d103      	bne.n	8006b92 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2210      	movs	r2, #16
 8006b90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff f9e4 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ba0:	e00b      	b.n	8006bba <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7f9 ff54 	bl	8000a50 <HAL_UART_RxCpltCallback>
}
 8006ba8:	e007      	b.n	8006bba <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699a      	ldr	r2, [r3, #24]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0208 	orr.w	r2, r2, #8
 8006bb8:	619a      	str	r2, [r3, #24]
}
 8006bba:	bf00      	nop
 8006bbc:	3758      	adds	r7, #88	; 0x58
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b096      	sub	sp, #88	; 0x58
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bd0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bda:	2b22      	cmp	r3, #34	; 0x22
 8006bdc:	f040 8098 	bne.w	8006d10 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bee:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bf0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006bf4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c04:	1c9a      	adds	r2, r3, #2
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d17b      	bne.n	8006d20 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c46:	643b      	str	r3, [r7, #64]	; 0x40
 8006c48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e6      	bne.n	8006c28 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3308      	adds	r3, #8
 8006c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e5      	bne.n	8006c5a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d12e      	bne.n	8006d08 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f023 0310 	bic.w	r3, r3, #16
 8006cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6979      	ldr	r1, [r7, #20]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	613b      	str	r3, [r7, #16]
   return(result);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e6      	bne.n	8006cb0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	f003 0310 	and.w	r3, r3, #16
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	d103      	bne.n	8006cf8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2210      	movs	r2, #16
 8006cf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff f931 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d06:	e00b      	b.n	8006d20 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7f9 fea1 	bl	8000a50 <HAL_UART_RxCpltCallback>
}
 8006d0e:	e007      	b.n	8006d20 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0208 	orr.w	r2, r2, #8
 8006d1e:	619a      	str	r2, [r3, #24]
}
 8006d20:	bf00      	nop
 8006d22:	3758      	adds	r7, #88	; 0x58
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d28:	b084      	sub	sp, #16
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	f107 001c 	add.w	r0, r7, #28
 8006d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d120      	bne.n	8006d82 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	4b20      	ldr	r3, [pc, #128]	; (8006dd4 <USB_CoreInit+0xac>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d105      	bne.n	8006d76 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fa96 	bl	80072a8 <USB_CoreReset>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]
 8006d80:	e010      	b.n	8006da4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa8a 	bl	80072a8 <USB_CoreReset>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d10b      	bne.n	8006dc2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f043 0206 	orr.w	r2, r3, #6
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f043 0220 	orr.w	r2, r3, #32
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dce:	b004      	add	sp, #16
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	ffbdffbf 	.word	0xffbdffbf

08006dd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f023 0201 	bic.w	r2, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	460b      	mov	r3, r1
 8006e04:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d115      	bne.n	8006e48 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e28:	2001      	movs	r0, #1
 8006e2a:	f7fa fe51 	bl	8001ad0 <HAL_Delay>
      ms++;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3301      	adds	r3, #1
 8006e32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fa29 	bl	800728c <USB_GetMode>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d01e      	beq.n	8006e7e <USB_SetCurrentMode+0x84>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b31      	cmp	r3, #49	; 0x31
 8006e44:	d9f0      	bls.n	8006e28 <USB_SetCurrentMode+0x2e>
 8006e46:	e01a      	b.n	8006e7e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d115      	bne.n	8006e7a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	f7fa fe38 	bl	8001ad0 <HAL_Delay>
      ms++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa10 	bl	800728c <USB_GetMode>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <USB_SetCurrentMode+0x84>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b31      	cmp	r3, #49	; 0x31
 8006e76:	d9f0      	bls.n	8006e5a <USB_SetCurrentMode+0x60>
 8006e78:	e001      	b.n	8006e7e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e005      	b.n	8006e8a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b32      	cmp	r3, #50	; 0x32
 8006e82:	d101      	bne.n	8006e88 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e94:	b084      	sub	sp, #16
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b086      	sub	sp, #24
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006eae:	2300      	movs	r3, #0
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	e009      	b.n	8006ec8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	3340      	adds	r3, #64	; 0x40
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b0e      	cmp	r3, #14
 8006ecc:	d9f2      	bls.n	8006eb4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d11c      	bne.n	8006f0e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ee2:	f043 0302 	orr.w	r3, r3, #2
 8006ee6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	e005      	b.n	8006f1a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f20:	461a      	mov	r2, r3
 8006f22:	2300      	movs	r3, #0
 8006f24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f34:	461a      	mov	r2, r3
 8006f36:	680b      	ldr	r3, [r1, #0]
 8006f38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d10c      	bne.n	8006f5a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d104      	bne.n	8006f50 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f46:	2100      	movs	r1, #0
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f965 	bl	8007218 <USB_SetDevSpeed>
 8006f4e:	e008      	b.n	8006f62 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f50:	2101      	movs	r1, #1
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f960 	bl	8007218 <USB_SetDevSpeed>
 8006f58:	e003      	b.n	8006f62 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f5a:	2103      	movs	r1, #3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f95b 	bl	8007218 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f62:	2110      	movs	r1, #16
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f8f3 	bl	8007150 <USB_FlushTxFifo>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f91f 	bl	80071b8 <USB_FlushRxFifo>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f96:	461a      	mov	r2, r3
 8006f98:	2300      	movs	r3, #0
 8006f9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fa8:	2300      	movs	r3, #0
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	e043      	b.n	8007036 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc4:	d118      	bne.n	8006ff8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	e013      	b.n	800700a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	e008      	b.n	800700a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007004:	461a      	mov	r2, r3
 8007006:	2300      	movs	r3, #0
 8007008:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	461a      	mov	r2, r3
 8007018:	2300      	movs	r3, #0
 800701a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007028:	461a      	mov	r2, r3
 800702a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800702e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	3301      	adds	r3, #1
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	429a      	cmp	r2, r3
 800703c:	d3b7      	bcc.n	8006fae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800703e:	2300      	movs	r3, #0
 8007040:	613b      	str	r3, [r7, #16]
 8007042:	e043      	b.n	80070cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800705a:	d118      	bne.n	800708e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706e:	461a      	mov	r2, r3
 8007070:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	e013      	b.n	80070a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	461a      	mov	r2, r3
 8007086:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	e008      	b.n	80070a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709a:	461a      	mov	r2, r3
 800709c:	2300      	movs	r3, #0
 800709e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ac:	461a      	mov	r2, r3
 80070ae:	2300      	movs	r3, #0
 80070b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070be:	461a      	mov	r2, r3
 80070c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	3301      	adds	r3, #1
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d3b7      	bcc.n	8007044 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d105      	bne.n	8007108 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	f043 0210 	orr.w	r2, r3, #16
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <USB_DevInit+0x2b4>)
 800710e:	4313      	orrs	r3, r2
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	f043 0208 	orr.w	r2, r3, #8
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007128:	2b01      	cmp	r3, #1
 800712a:	d105      	bne.n	8007138 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	699a      	ldr	r2, [r3, #24]
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <USB_DevInit+0x2b8>)
 8007132:	4313      	orrs	r3, r2
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007138:	7dfb      	ldrb	r3, [r7, #23]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007144:	b004      	add	sp, #16
 8007146:	4770      	bx	lr
 8007148:	803c3800 	.word	0x803c3800
 800714c:	40000004 	.word	0x40000004

08007150 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3301      	adds	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4a13      	ldr	r2, [pc, #76]	; (80071b4 <USB_FlushTxFifo+0x64>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d901      	bls.n	8007170 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e01b      	b.n	80071a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	daf2      	bge.n	800715e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	019b      	lsls	r3, r3, #6
 8007180:	f043 0220 	orr.w	r2, r3, #32
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3301      	adds	r3, #1
 800718c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4a08      	ldr	r2, [pc, #32]	; (80071b4 <USB_FlushTxFifo+0x64>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d901      	bls.n	800719a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e006      	b.n	80071a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f003 0320 	and.w	r3, r3, #32
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d0f0      	beq.n	8007188 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	00030d40 	.word	0x00030d40

080071b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4a11      	ldr	r2, [pc, #68]	; (8007214 <USB_FlushRxFifo+0x5c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d901      	bls.n	80071d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e018      	b.n	8007208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	daf2      	bge.n	80071c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2210      	movs	r2, #16
 80071e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4a08      	ldr	r2, [pc, #32]	; (8007214 <USB_FlushRxFifo+0x5c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d901      	bls.n	80071fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e006      	b.n	8007208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0310 	and.w	r3, r3, #16
 8007202:	2b10      	cmp	r3, #16
 8007204:	d0f0      	beq.n	80071e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	00030d40 	.word	0x00030d40

08007218 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007238:	4313      	orrs	r3, r2
 800723a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007264:	f023 0303 	bic.w	r3, r3, #3
 8007268:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007278:	f043 0302 	orr.w	r3, r3, #2
 800727c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	f003 0301 	and.w	r3, r3, #1
}
 800729c:	4618      	mov	r0, r3
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4a13      	ldr	r2, [pc, #76]	; (800730c <USB_CoreReset+0x64>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d901      	bls.n	80072c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e01b      	b.n	80072fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	daf2      	bge.n	80072b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f043 0201 	orr.w	r2, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3301      	adds	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4a09      	ldr	r2, [pc, #36]	; (800730c <USB_CoreReset+0x64>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d901      	bls.n	80072f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e006      	b.n	80072fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d0f0      	beq.n	80072de <USB_CoreReset+0x36>

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	00030d40 	.word	0x00030d40

08007310 <atoi>:
 8007310:	220a      	movs	r2, #10
 8007312:	2100      	movs	r1, #0
 8007314:	f000 b882 	b.w	800741c <strtol>

08007318 <_strtol_l.constprop.0>:
 8007318:	2b01      	cmp	r3, #1
 800731a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800731e:	d001      	beq.n	8007324 <_strtol_l.constprop.0+0xc>
 8007320:	2b24      	cmp	r3, #36	; 0x24
 8007322:	d906      	bls.n	8007332 <_strtol_l.constprop.0+0x1a>
 8007324:	f000 f8ac 	bl	8007480 <__errno>
 8007328:	2316      	movs	r3, #22
 800732a:	6003      	str	r3, [r0, #0]
 800732c:	2000      	movs	r0, #0
 800732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007332:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007418 <_strtol_l.constprop.0+0x100>
 8007336:	460d      	mov	r5, r1
 8007338:	462e      	mov	r6, r5
 800733a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800733e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007342:	f017 0708 	ands.w	r7, r7, #8
 8007346:	d1f7      	bne.n	8007338 <_strtol_l.constprop.0+0x20>
 8007348:	2c2d      	cmp	r4, #45	; 0x2d
 800734a:	d132      	bne.n	80073b2 <_strtol_l.constprop.0+0x9a>
 800734c:	782c      	ldrb	r4, [r5, #0]
 800734e:	2701      	movs	r7, #1
 8007350:	1cb5      	adds	r5, r6, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d05b      	beq.n	800740e <_strtol_l.constprop.0+0xf6>
 8007356:	2b10      	cmp	r3, #16
 8007358:	d109      	bne.n	800736e <_strtol_l.constprop.0+0x56>
 800735a:	2c30      	cmp	r4, #48	; 0x30
 800735c:	d107      	bne.n	800736e <_strtol_l.constprop.0+0x56>
 800735e:	782c      	ldrb	r4, [r5, #0]
 8007360:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007364:	2c58      	cmp	r4, #88	; 0x58
 8007366:	d14d      	bne.n	8007404 <_strtol_l.constprop.0+0xec>
 8007368:	786c      	ldrb	r4, [r5, #1]
 800736a:	2310      	movs	r3, #16
 800736c:	3502      	adds	r5, #2
 800736e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007372:	f108 38ff 	add.w	r8, r8, #4294967295
 8007376:	f04f 0e00 	mov.w	lr, #0
 800737a:	fbb8 f9f3 	udiv	r9, r8, r3
 800737e:	4676      	mov	r6, lr
 8007380:	fb03 8a19 	mls	sl, r3, r9, r8
 8007384:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007388:	f1bc 0f09 	cmp.w	ip, #9
 800738c:	d816      	bhi.n	80073bc <_strtol_l.constprop.0+0xa4>
 800738e:	4664      	mov	r4, ip
 8007390:	42a3      	cmp	r3, r4
 8007392:	dd24      	ble.n	80073de <_strtol_l.constprop.0+0xc6>
 8007394:	f1be 3fff 	cmp.w	lr, #4294967295
 8007398:	d008      	beq.n	80073ac <_strtol_l.constprop.0+0x94>
 800739a:	45b1      	cmp	r9, r6
 800739c:	d31c      	bcc.n	80073d8 <_strtol_l.constprop.0+0xc0>
 800739e:	d101      	bne.n	80073a4 <_strtol_l.constprop.0+0x8c>
 80073a0:	45a2      	cmp	sl, r4
 80073a2:	db19      	blt.n	80073d8 <_strtol_l.constprop.0+0xc0>
 80073a4:	fb06 4603 	mla	r6, r6, r3, r4
 80073a8:	f04f 0e01 	mov.w	lr, #1
 80073ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073b0:	e7e8      	b.n	8007384 <_strtol_l.constprop.0+0x6c>
 80073b2:	2c2b      	cmp	r4, #43	; 0x2b
 80073b4:	bf04      	itt	eq
 80073b6:	782c      	ldrbeq	r4, [r5, #0]
 80073b8:	1cb5      	addeq	r5, r6, #2
 80073ba:	e7ca      	b.n	8007352 <_strtol_l.constprop.0+0x3a>
 80073bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80073c0:	f1bc 0f19 	cmp.w	ip, #25
 80073c4:	d801      	bhi.n	80073ca <_strtol_l.constprop.0+0xb2>
 80073c6:	3c37      	subs	r4, #55	; 0x37
 80073c8:	e7e2      	b.n	8007390 <_strtol_l.constprop.0+0x78>
 80073ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80073ce:	f1bc 0f19 	cmp.w	ip, #25
 80073d2:	d804      	bhi.n	80073de <_strtol_l.constprop.0+0xc6>
 80073d4:	3c57      	subs	r4, #87	; 0x57
 80073d6:	e7db      	b.n	8007390 <_strtol_l.constprop.0+0x78>
 80073d8:	f04f 3eff 	mov.w	lr, #4294967295
 80073dc:	e7e6      	b.n	80073ac <_strtol_l.constprop.0+0x94>
 80073de:	f1be 3fff 	cmp.w	lr, #4294967295
 80073e2:	d105      	bne.n	80073f0 <_strtol_l.constprop.0+0xd8>
 80073e4:	2322      	movs	r3, #34	; 0x22
 80073e6:	6003      	str	r3, [r0, #0]
 80073e8:	4646      	mov	r6, r8
 80073ea:	b942      	cbnz	r2, 80073fe <_strtol_l.constprop.0+0xe6>
 80073ec:	4630      	mov	r0, r6
 80073ee:	e79e      	b.n	800732e <_strtol_l.constprop.0+0x16>
 80073f0:	b107      	cbz	r7, 80073f4 <_strtol_l.constprop.0+0xdc>
 80073f2:	4276      	negs	r6, r6
 80073f4:	2a00      	cmp	r2, #0
 80073f6:	d0f9      	beq.n	80073ec <_strtol_l.constprop.0+0xd4>
 80073f8:	f1be 0f00 	cmp.w	lr, #0
 80073fc:	d000      	beq.n	8007400 <_strtol_l.constprop.0+0xe8>
 80073fe:	1e69      	subs	r1, r5, #1
 8007400:	6011      	str	r1, [r2, #0]
 8007402:	e7f3      	b.n	80073ec <_strtol_l.constprop.0+0xd4>
 8007404:	2430      	movs	r4, #48	; 0x30
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1b1      	bne.n	800736e <_strtol_l.constprop.0+0x56>
 800740a:	2308      	movs	r3, #8
 800740c:	e7af      	b.n	800736e <_strtol_l.constprop.0+0x56>
 800740e:	2c30      	cmp	r4, #48	; 0x30
 8007410:	d0a5      	beq.n	800735e <_strtol_l.constprop.0+0x46>
 8007412:	230a      	movs	r3, #10
 8007414:	e7ab      	b.n	800736e <_strtol_l.constprop.0+0x56>
 8007416:	bf00      	nop
 8007418:	08007e95 	.word	0x08007e95

0800741c <strtol>:
 800741c:	4613      	mov	r3, r2
 800741e:	460a      	mov	r2, r1
 8007420:	4601      	mov	r1, r0
 8007422:	4802      	ldr	r0, [pc, #8]	; (800742c <strtol+0x10>)
 8007424:	6800      	ldr	r0, [r0, #0]
 8007426:	f7ff bf77 	b.w	8007318 <_strtol_l.constprop.0>
 800742a:	bf00      	nop
 800742c:	20000060 	.word	0x20000060

08007430 <siprintf>:
 8007430:	b40e      	push	{r1, r2, r3}
 8007432:	b500      	push	{lr}
 8007434:	b09c      	sub	sp, #112	; 0x70
 8007436:	ab1d      	add	r3, sp, #116	; 0x74
 8007438:	9002      	str	r0, [sp, #8]
 800743a:	9006      	str	r0, [sp, #24]
 800743c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007440:	4809      	ldr	r0, [pc, #36]	; (8007468 <siprintf+0x38>)
 8007442:	9107      	str	r1, [sp, #28]
 8007444:	9104      	str	r1, [sp, #16]
 8007446:	4909      	ldr	r1, [pc, #36]	; (800746c <siprintf+0x3c>)
 8007448:	f853 2b04 	ldr.w	r2, [r3], #4
 800744c:	9105      	str	r1, [sp, #20]
 800744e:	6800      	ldr	r0, [r0, #0]
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	a902      	add	r1, sp, #8
 8007454:	f000 f992 	bl	800777c <_svfiprintf_r>
 8007458:	9b02      	ldr	r3, [sp, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	b01c      	add	sp, #112	; 0x70
 8007460:	f85d eb04 	ldr.w	lr, [sp], #4
 8007464:	b003      	add	sp, #12
 8007466:	4770      	bx	lr
 8007468:	20000060 	.word	0x20000060
 800746c:	ffff0208 	.word	0xffff0208

08007470 <memset>:
 8007470:	4402      	add	r2, r0
 8007472:	4603      	mov	r3, r0
 8007474:	4293      	cmp	r3, r2
 8007476:	d100      	bne.n	800747a <memset+0xa>
 8007478:	4770      	bx	lr
 800747a:	f803 1b01 	strb.w	r1, [r3], #1
 800747e:	e7f9      	b.n	8007474 <memset+0x4>

08007480 <__errno>:
 8007480:	4b01      	ldr	r3, [pc, #4]	; (8007488 <__errno+0x8>)
 8007482:	6818      	ldr	r0, [r3, #0]
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20000060 	.word	0x20000060

0800748c <__libc_init_array>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4d0d      	ldr	r5, [pc, #52]	; (80074c4 <__libc_init_array+0x38>)
 8007490:	4c0d      	ldr	r4, [pc, #52]	; (80074c8 <__libc_init_array+0x3c>)
 8007492:	1b64      	subs	r4, r4, r5
 8007494:	10a4      	asrs	r4, r4, #2
 8007496:	2600      	movs	r6, #0
 8007498:	42a6      	cmp	r6, r4
 800749a:	d109      	bne.n	80074b0 <__libc_init_array+0x24>
 800749c:	4d0b      	ldr	r5, [pc, #44]	; (80074cc <__libc_init_array+0x40>)
 800749e:	4c0c      	ldr	r4, [pc, #48]	; (80074d0 <__libc_init_array+0x44>)
 80074a0:	f000 fc6a 	bl	8007d78 <_init>
 80074a4:	1b64      	subs	r4, r4, r5
 80074a6:	10a4      	asrs	r4, r4, #2
 80074a8:	2600      	movs	r6, #0
 80074aa:	42a6      	cmp	r6, r4
 80074ac:	d105      	bne.n	80074ba <__libc_init_array+0x2e>
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b4:	4798      	blx	r3
 80074b6:	3601      	adds	r6, #1
 80074b8:	e7ee      	b.n	8007498 <__libc_init_array+0xc>
 80074ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80074be:	4798      	blx	r3
 80074c0:	3601      	adds	r6, #1
 80074c2:	e7f2      	b.n	80074aa <__libc_init_array+0x1e>
 80074c4:	08007fd0 	.word	0x08007fd0
 80074c8:	08007fd0 	.word	0x08007fd0
 80074cc:	08007fd0 	.word	0x08007fd0
 80074d0:	08007fd4 	.word	0x08007fd4

080074d4 <__retarget_lock_acquire_recursive>:
 80074d4:	4770      	bx	lr

080074d6 <__retarget_lock_release_recursive>:
 80074d6:	4770      	bx	lr

080074d8 <_free_r>:
 80074d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074da:	2900      	cmp	r1, #0
 80074dc:	d044      	beq.n	8007568 <_free_r+0x90>
 80074de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e2:	9001      	str	r0, [sp, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f1a1 0404 	sub.w	r4, r1, #4
 80074ea:	bfb8      	it	lt
 80074ec:	18e4      	addlt	r4, r4, r3
 80074ee:	f000 f8df 	bl	80076b0 <__malloc_lock>
 80074f2:	4a1e      	ldr	r2, [pc, #120]	; (800756c <_free_r+0x94>)
 80074f4:	9801      	ldr	r0, [sp, #4]
 80074f6:	6813      	ldr	r3, [r2, #0]
 80074f8:	b933      	cbnz	r3, 8007508 <_free_r+0x30>
 80074fa:	6063      	str	r3, [r4, #4]
 80074fc:	6014      	str	r4, [r2, #0]
 80074fe:	b003      	add	sp, #12
 8007500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007504:	f000 b8da 	b.w	80076bc <__malloc_unlock>
 8007508:	42a3      	cmp	r3, r4
 800750a:	d908      	bls.n	800751e <_free_r+0x46>
 800750c:	6825      	ldr	r5, [r4, #0]
 800750e:	1961      	adds	r1, r4, r5
 8007510:	428b      	cmp	r3, r1
 8007512:	bf01      	itttt	eq
 8007514:	6819      	ldreq	r1, [r3, #0]
 8007516:	685b      	ldreq	r3, [r3, #4]
 8007518:	1949      	addeq	r1, r1, r5
 800751a:	6021      	streq	r1, [r4, #0]
 800751c:	e7ed      	b.n	80074fa <_free_r+0x22>
 800751e:	461a      	mov	r2, r3
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	b10b      	cbz	r3, 8007528 <_free_r+0x50>
 8007524:	42a3      	cmp	r3, r4
 8007526:	d9fa      	bls.n	800751e <_free_r+0x46>
 8007528:	6811      	ldr	r1, [r2, #0]
 800752a:	1855      	adds	r5, r2, r1
 800752c:	42a5      	cmp	r5, r4
 800752e:	d10b      	bne.n	8007548 <_free_r+0x70>
 8007530:	6824      	ldr	r4, [r4, #0]
 8007532:	4421      	add	r1, r4
 8007534:	1854      	adds	r4, r2, r1
 8007536:	42a3      	cmp	r3, r4
 8007538:	6011      	str	r1, [r2, #0]
 800753a:	d1e0      	bne.n	80074fe <_free_r+0x26>
 800753c:	681c      	ldr	r4, [r3, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	6053      	str	r3, [r2, #4]
 8007542:	440c      	add	r4, r1
 8007544:	6014      	str	r4, [r2, #0]
 8007546:	e7da      	b.n	80074fe <_free_r+0x26>
 8007548:	d902      	bls.n	8007550 <_free_r+0x78>
 800754a:	230c      	movs	r3, #12
 800754c:	6003      	str	r3, [r0, #0]
 800754e:	e7d6      	b.n	80074fe <_free_r+0x26>
 8007550:	6825      	ldr	r5, [r4, #0]
 8007552:	1961      	adds	r1, r4, r5
 8007554:	428b      	cmp	r3, r1
 8007556:	bf04      	itt	eq
 8007558:	6819      	ldreq	r1, [r3, #0]
 800755a:	685b      	ldreq	r3, [r3, #4]
 800755c:	6063      	str	r3, [r4, #4]
 800755e:	bf04      	itt	eq
 8007560:	1949      	addeq	r1, r1, r5
 8007562:	6021      	streq	r1, [r4, #0]
 8007564:	6054      	str	r4, [r2, #4]
 8007566:	e7ca      	b.n	80074fe <_free_r+0x26>
 8007568:	b003      	add	sp, #12
 800756a:	bd30      	pop	{r4, r5, pc}
 800756c:	200010b8 	.word	0x200010b8

08007570 <sbrk_aligned>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	4e0e      	ldr	r6, [pc, #56]	; (80075ac <sbrk_aligned+0x3c>)
 8007574:	460c      	mov	r4, r1
 8007576:	6831      	ldr	r1, [r6, #0]
 8007578:	4605      	mov	r5, r0
 800757a:	b911      	cbnz	r1, 8007582 <sbrk_aligned+0x12>
 800757c:	f000 fba6 	bl	8007ccc <_sbrk_r>
 8007580:	6030      	str	r0, [r6, #0]
 8007582:	4621      	mov	r1, r4
 8007584:	4628      	mov	r0, r5
 8007586:	f000 fba1 	bl	8007ccc <_sbrk_r>
 800758a:	1c43      	adds	r3, r0, #1
 800758c:	d00a      	beq.n	80075a4 <sbrk_aligned+0x34>
 800758e:	1cc4      	adds	r4, r0, #3
 8007590:	f024 0403 	bic.w	r4, r4, #3
 8007594:	42a0      	cmp	r0, r4
 8007596:	d007      	beq.n	80075a8 <sbrk_aligned+0x38>
 8007598:	1a21      	subs	r1, r4, r0
 800759a:	4628      	mov	r0, r5
 800759c:	f000 fb96 	bl	8007ccc <_sbrk_r>
 80075a0:	3001      	adds	r0, #1
 80075a2:	d101      	bne.n	80075a8 <sbrk_aligned+0x38>
 80075a4:	f04f 34ff 	mov.w	r4, #4294967295
 80075a8:	4620      	mov	r0, r4
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	200010bc 	.word	0x200010bc

080075b0 <_malloc_r>:
 80075b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	1ccd      	adds	r5, r1, #3
 80075b6:	f025 0503 	bic.w	r5, r5, #3
 80075ba:	3508      	adds	r5, #8
 80075bc:	2d0c      	cmp	r5, #12
 80075be:	bf38      	it	cc
 80075c0:	250c      	movcc	r5, #12
 80075c2:	2d00      	cmp	r5, #0
 80075c4:	4607      	mov	r7, r0
 80075c6:	db01      	blt.n	80075cc <_malloc_r+0x1c>
 80075c8:	42a9      	cmp	r1, r5
 80075ca:	d905      	bls.n	80075d8 <_malloc_r+0x28>
 80075cc:	230c      	movs	r3, #12
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	2600      	movs	r6, #0
 80075d2:	4630      	mov	r0, r6
 80075d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076ac <_malloc_r+0xfc>
 80075dc:	f000 f868 	bl	80076b0 <__malloc_lock>
 80075e0:	f8d8 3000 	ldr.w	r3, [r8]
 80075e4:	461c      	mov	r4, r3
 80075e6:	bb5c      	cbnz	r4, 8007640 <_malloc_r+0x90>
 80075e8:	4629      	mov	r1, r5
 80075ea:	4638      	mov	r0, r7
 80075ec:	f7ff ffc0 	bl	8007570 <sbrk_aligned>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	4604      	mov	r4, r0
 80075f4:	d155      	bne.n	80076a2 <_malloc_r+0xf2>
 80075f6:	f8d8 4000 	ldr.w	r4, [r8]
 80075fa:	4626      	mov	r6, r4
 80075fc:	2e00      	cmp	r6, #0
 80075fe:	d145      	bne.n	800768c <_malloc_r+0xdc>
 8007600:	2c00      	cmp	r4, #0
 8007602:	d048      	beq.n	8007696 <_malloc_r+0xe6>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	4631      	mov	r1, r6
 8007608:	4638      	mov	r0, r7
 800760a:	eb04 0903 	add.w	r9, r4, r3
 800760e:	f000 fb5d 	bl	8007ccc <_sbrk_r>
 8007612:	4581      	cmp	r9, r0
 8007614:	d13f      	bne.n	8007696 <_malloc_r+0xe6>
 8007616:	6821      	ldr	r1, [r4, #0]
 8007618:	1a6d      	subs	r5, r5, r1
 800761a:	4629      	mov	r1, r5
 800761c:	4638      	mov	r0, r7
 800761e:	f7ff ffa7 	bl	8007570 <sbrk_aligned>
 8007622:	3001      	adds	r0, #1
 8007624:	d037      	beq.n	8007696 <_malloc_r+0xe6>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	442b      	add	r3, r5
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	f8d8 3000 	ldr.w	r3, [r8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d038      	beq.n	80076a6 <_malloc_r+0xf6>
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	42a2      	cmp	r2, r4
 8007638:	d12b      	bne.n	8007692 <_malloc_r+0xe2>
 800763a:	2200      	movs	r2, #0
 800763c:	605a      	str	r2, [r3, #4]
 800763e:	e00f      	b.n	8007660 <_malloc_r+0xb0>
 8007640:	6822      	ldr	r2, [r4, #0]
 8007642:	1b52      	subs	r2, r2, r5
 8007644:	d41f      	bmi.n	8007686 <_malloc_r+0xd6>
 8007646:	2a0b      	cmp	r2, #11
 8007648:	d917      	bls.n	800767a <_malloc_r+0xca>
 800764a:	1961      	adds	r1, r4, r5
 800764c:	42a3      	cmp	r3, r4
 800764e:	6025      	str	r5, [r4, #0]
 8007650:	bf18      	it	ne
 8007652:	6059      	strne	r1, [r3, #4]
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	bf08      	it	eq
 8007658:	f8c8 1000 	streq.w	r1, [r8]
 800765c:	5162      	str	r2, [r4, r5]
 800765e:	604b      	str	r3, [r1, #4]
 8007660:	4638      	mov	r0, r7
 8007662:	f104 060b 	add.w	r6, r4, #11
 8007666:	f000 f829 	bl	80076bc <__malloc_unlock>
 800766a:	f026 0607 	bic.w	r6, r6, #7
 800766e:	1d23      	adds	r3, r4, #4
 8007670:	1af2      	subs	r2, r6, r3
 8007672:	d0ae      	beq.n	80075d2 <_malloc_r+0x22>
 8007674:	1b9b      	subs	r3, r3, r6
 8007676:	50a3      	str	r3, [r4, r2]
 8007678:	e7ab      	b.n	80075d2 <_malloc_r+0x22>
 800767a:	42a3      	cmp	r3, r4
 800767c:	6862      	ldr	r2, [r4, #4]
 800767e:	d1dd      	bne.n	800763c <_malloc_r+0x8c>
 8007680:	f8c8 2000 	str.w	r2, [r8]
 8007684:	e7ec      	b.n	8007660 <_malloc_r+0xb0>
 8007686:	4623      	mov	r3, r4
 8007688:	6864      	ldr	r4, [r4, #4]
 800768a:	e7ac      	b.n	80075e6 <_malloc_r+0x36>
 800768c:	4634      	mov	r4, r6
 800768e:	6876      	ldr	r6, [r6, #4]
 8007690:	e7b4      	b.n	80075fc <_malloc_r+0x4c>
 8007692:	4613      	mov	r3, r2
 8007694:	e7cc      	b.n	8007630 <_malloc_r+0x80>
 8007696:	230c      	movs	r3, #12
 8007698:	603b      	str	r3, [r7, #0]
 800769a:	4638      	mov	r0, r7
 800769c:	f000 f80e 	bl	80076bc <__malloc_unlock>
 80076a0:	e797      	b.n	80075d2 <_malloc_r+0x22>
 80076a2:	6025      	str	r5, [r4, #0]
 80076a4:	e7dc      	b.n	8007660 <_malloc_r+0xb0>
 80076a6:	605b      	str	r3, [r3, #4]
 80076a8:	deff      	udf	#255	; 0xff
 80076aa:	bf00      	nop
 80076ac:	200010b8 	.word	0x200010b8

080076b0 <__malloc_lock>:
 80076b0:	4801      	ldr	r0, [pc, #4]	; (80076b8 <__malloc_lock+0x8>)
 80076b2:	f7ff bf0f 	b.w	80074d4 <__retarget_lock_acquire_recursive>
 80076b6:	bf00      	nop
 80076b8:	200010b4 	.word	0x200010b4

080076bc <__malloc_unlock>:
 80076bc:	4801      	ldr	r0, [pc, #4]	; (80076c4 <__malloc_unlock+0x8>)
 80076be:	f7ff bf0a 	b.w	80074d6 <__retarget_lock_release_recursive>
 80076c2:	bf00      	nop
 80076c4:	200010b4 	.word	0x200010b4

080076c8 <__ssputs_r>:
 80076c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076cc:	688e      	ldr	r6, [r1, #8]
 80076ce:	461f      	mov	r7, r3
 80076d0:	42be      	cmp	r6, r7
 80076d2:	680b      	ldr	r3, [r1, #0]
 80076d4:	4682      	mov	sl, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	4690      	mov	r8, r2
 80076da:	d82c      	bhi.n	8007736 <__ssputs_r+0x6e>
 80076dc:	898a      	ldrh	r2, [r1, #12]
 80076de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076e2:	d026      	beq.n	8007732 <__ssputs_r+0x6a>
 80076e4:	6965      	ldr	r5, [r4, #20]
 80076e6:	6909      	ldr	r1, [r1, #16]
 80076e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076ec:	eba3 0901 	sub.w	r9, r3, r1
 80076f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076f4:	1c7b      	adds	r3, r7, #1
 80076f6:	444b      	add	r3, r9
 80076f8:	106d      	asrs	r5, r5, #1
 80076fa:	429d      	cmp	r5, r3
 80076fc:	bf38      	it	cc
 80076fe:	461d      	movcc	r5, r3
 8007700:	0553      	lsls	r3, r2, #21
 8007702:	d527      	bpl.n	8007754 <__ssputs_r+0x8c>
 8007704:	4629      	mov	r1, r5
 8007706:	f7ff ff53 	bl	80075b0 <_malloc_r>
 800770a:	4606      	mov	r6, r0
 800770c:	b360      	cbz	r0, 8007768 <__ssputs_r+0xa0>
 800770e:	6921      	ldr	r1, [r4, #16]
 8007710:	464a      	mov	r2, r9
 8007712:	f000 faeb 	bl	8007cec <memcpy>
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800771c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007720:	81a3      	strh	r3, [r4, #12]
 8007722:	6126      	str	r6, [r4, #16]
 8007724:	6165      	str	r5, [r4, #20]
 8007726:	444e      	add	r6, r9
 8007728:	eba5 0509 	sub.w	r5, r5, r9
 800772c:	6026      	str	r6, [r4, #0]
 800772e:	60a5      	str	r5, [r4, #8]
 8007730:	463e      	mov	r6, r7
 8007732:	42be      	cmp	r6, r7
 8007734:	d900      	bls.n	8007738 <__ssputs_r+0x70>
 8007736:	463e      	mov	r6, r7
 8007738:	6820      	ldr	r0, [r4, #0]
 800773a:	4632      	mov	r2, r6
 800773c:	4641      	mov	r1, r8
 800773e:	f000 faab 	bl	8007c98 <memmove>
 8007742:	68a3      	ldr	r3, [r4, #8]
 8007744:	1b9b      	subs	r3, r3, r6
 8007746:	60a3      	str	r3, [r4, #8]
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	4433      	add	r3, r6
 800774c:	6023      	str	r3, [r4, #0]
 800774e:	2000      	movs	r0, #0
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	462a      	mov	r2, r5
 8007756:	f000 fad7 	bl	8007d08 <_realloc_r>
 800775a:	4606      	mov	r6, r0
 800775c:	2800      	cmp	r0, #0
 800775e:	d1e0      	bne.n	8007722 <__ssputs_r+0x5a>
 8007760:	6921      	ldr	r1, [r4, #16]
 8007762:	4650      	mov	r0, sl
 8007764:	f7ff feb8 	bl	80074d8 <_free_r>
 8007768:	230c      	movs	r3, #12
 800776a:	f8ca 3000 	str.w	r3, [sl]
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	f04f 30ff 	mov.w	r0, #4294967295
 800777a:	e7e9      	b.n	8007750 <__ssputs_r+0x88>

0800777c <_svfiprintf_r>:
 800777c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007780:	4698      	mov	r8, r3
 8007782:	898b      	ldrh	r3, [r1, #12]
 8007784:	061b      	lsls	r3, r3, #24
 8007786:	b09d      	sub	sp, #116	; 0x74
 8007788:	4607      	mov	r7, r0
 800778a:	460d      	mov	r5, r1
 800778c:	4614      	mov	r4, r2
 800778e:	d50e      	bpl.n	80077ae <_svfiprintf_r+0x32>
 8007790:	690b      	ldr	r3, [r1, #16]
 8007792:	b963      	cbnz	r3, 80077ae <_svfiprintf_r+0x32>
 8007794:	2140      	movs	r1, #64	; 0x40
 8007796:	f7ff ff0b 	bl	80075b0 <_malloc_r>
 800779a:	6028      	str	r0, [r5, #0]
 800779c:	6128      	str	r0, [r5, #16]
 800779e:	b920      	cbnz	r0, 80077aa <_svfiprintf_r+0x2e>
 80077a0:	230c      	movs	r3, #12
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	e0d0      	b.n	800794c <_svfiprintf_r+0x1d0>
 80077aa:	2340      	movs	r3, #64	; 0x40
 80077ac:	616b      	str	r3, [r5, #20]
 80077ae:	2300      	movs	r3, #0
 80077b0:	9309      	str	r3, [sp, #36]	; 0x24
 80077b2:	2320      	movs	r3, #32
 80077b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80077bc:	2330      	movs	r3, #48	; 0x30
 80077be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007964 <_svfiprintf_r+0x1e8>
 80077c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077c6:	f04f 0901 	mov.w	r9, #1
 80077ca:	4623      	mov	r3, r4
 80077cc:	469a      	mov	sl, r3
 80077ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d2:	b10a      	cbz	r2, 80077d8 <_svfiprintf_r+0x5c>
 80077d4:	2a25      	cmp	r2, #37	; 0x25
 80077d6:	d1f9      	bne.n	80077cc <_svfiprintf_r+0x50>
 80077d8:	ebba 0b04 	subs.w	fp, sl, r4
 80077dc:	d00b      	beq.n	80077f6 <_svfiprintf_r+0x7a>
 80077de:	465b      	mov	r3, fp
 80077e0:	4622      	mov	r2, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	4638      	mov	r0, r7
 80077e6:	f7ff ff6f 	bl	80076c8 <__ssputs_r>
 80077ea:	3001      	adds	r0, #1
 80077ec:	f000 80a9 	beq.w	8007942 <_svfiprintf_r+0x1c6>
 80077f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f2:	445a      	add	r2, fp
 80077f4:	9209      	str	r2, [sp, #36]	; 0x24
 80077f6:	f89a 3000 	ldrb.w	r3, [sl]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80a1 	beq.w	8007942 <_svfiprintf_r+0x1c6>
 8007800:	2300      	movs	r3, #0
 8007802:	f04f 32ff 	mov.w	r2, #4294967295
 8007806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800780a:	f10a 0a01 	add.w	sl, sl, #1
 800780e:	9304      	str	r3, [sp, #16]
 8007810:	9307      	str	r3, [sp, #28]
 8007812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007816:	931a      	str	r3, [sp, #104]	; 0x68
 8007818:	4654      	mov	r4, sl
 800781a:	2205      	movs	r2, #5
 800781c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007820:	4850      	ldr	r0, [pc, #320]	; (8007964 <_svfiprintf_r+0x1e8>)
 8007822:	f7f8 fcfd 	bl	8000220 <memchr>
 8007826:	9a04      	ldr	r2, [sp, #16]
 8007828:	b9d8      	cbnz	r0, 8007862 <_svfiprintf_r+0xe6>
 800782a:	06d0      	lsls	r0, r2, #27
 800782c:	bf44      	itt	mi
 800782e:	2320      	movmi	r3, #32
 8007830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007834:	0711      	lsls	r1, r2, #28
 8007836:	bf44      	itt	mi
 8007838:	232b      	movmi	r3, #43	; 0x2b
 800783a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800783e:	f89a 3000 	ldrb.w	r3, [sl]
 8007842:	2b2a      	cmp	r3, #42	; 0x2a
 8007844:	d015      	beq.n	8007872 <_svfiprintf_r+0xf6>
 8007846:	9a07      	ldr	r2, [sp, #28]
 8007848:	4654      	mov	r4, sl
 800784a:	2000      	movs	r0, #0
 800784c:	f04f 0c0a 	mov.w	ip, #10
 8007850:	4621      	mov	r1, r4
 8007852:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007856:	3b30      	subs	r3, #48	; 0x30
 8007858:	2b09      	cmp	r3, #9
 800785a:	d94d      	bls.n	80078f8 <_svfiprintf_r+0x17c>
 800785c:	b1b0      	cbz	r0, 800788c <_svfiprintf_r+0x110>
 800785e:	9207      	str	r2, [sp, #28]
 8007860:	e014      	b.n	800788c <_svfiprintf_r+0x110>
 8007862:	eba0 0308 	sub.w	r3, r0, r8
 8007866:	fa09 f303 	lsl.w	r3, r9, r3
 800786a:	4313      	orrs	r3, r2
 800786c:	9304      	str	r3, [sp, #16]
 800786e:	46a2      	mov	sl, r4
 8007870:	e7d2      	b.n	8007818 <_svfiprintf_r+0x9c>
 8007872:	9b03      	ldr	r3, [sp, #12]
 8007874:	1d19      	adds	r1, r3, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	9103      	str	r1, [sp, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	bfbb      	ittet	lt
 800787e:	425b      	neglt	r3, r3
 8007880:	f042 0202 	orrlt.w	r2, r2, #2
 8007884:	9307      	strge	r3, [sp, #28]
 8007886:	9307      	strlt	r3, [sp, #28]
 8007888:	bfb8      	it	lt
 800788a:	9204      	strlt	r2, [sp, #16]
 800788c:	7823      	ldrb	r3, [r4, #0]
 800788e:	2b2e      	cmp	r3, #46	; 0x2e
 8007890:	d10c      	bne.n	80078ac <_svfiprintf_r+0x130>
 8007892:	7863      	ldrb	r3, [r4, #1]
 8007894:	2b2a      	cmp	r3, #42	; 0x2a
 8007896:	d134      	bne.n	8007902 <_svfiprintf_r+0x186>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	1d1a      	adds	r2, r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	9203      	str	r2, [sp, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bfb8      	it	lt
 80078a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80078a8:	3402      	adds	r4, #2
 80078aa:	9305      	str	r3, [sp, #20]
 80078ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007974 <_svfiprintf_r+0x1f8>
 80078b0:	7821      	ldrb	r1, [r4, #0]
 80078b2:	2203      	movs	r2, #3
 80078b4:	4650      	mov	r0, sl
 80078b6:	f7f8 fcb3 	bl	8000220 <memchr>
 80078ba:	b138      	cbz	r0, 80078cc <_svfiprintf_r+0x150>
 80078bc:	9b04      	ldr	r3, [sp, #16]
 80078be:	eba0 000a 	sub.w	r0, r0, sl
 80078c2:	2240      	movs	r2, #64	; 0x40
 80078c4:	4082      	lsls	r2, r0
 80078c6:	4313      	orrs	r3, r2
 80078c8:	3401      	adds	r4, #1
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d0:	4825      	ldr	r0, [pc, #148]	; (8007968 <_svfiprintf_r+0x1ec>)
 80078d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078d6:	2206      	movs	r2, #6
 80078d8:	f7f8 fca2 	bl	8000220 <memchr>
 80078dc:	2800      	cmp	r0, #0
 80078de:	d038      	beq.n	8007952 <_svfiprintf_r+0x1d6>
 80078e0:	4b22      	ldr	r3, [pc, #136]	; (800796c <_svfiprintf_r+0x1f0>)
 80078e2:	bb1b      	cbnz	r3, 800792c <_svfiprintf_r+0x1b0>
 80078e4:	9b03      	ldr	r3, [sp, #12]
 80078e6:	3307      	adds	r3, #7
 80078e8:	f023 0307 	bic.w	r3, r3, #7
 80078ec:	3308      	adds	r3, #8
 80078ee:	9303      	str	r3, [sp, #12]
 80078f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f2:	4433      	add	r3, r6
 80078f4:	9309      	str	r3, [sp, #36]	; 0x24
 80078f6:	e768      	b.n	80077ca <_svfiprintf_r+0x4e>
 80078f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80078fc:	460c      	mov	r4, r1
 80078fe:	2001      	movs	r0, #1
 8007900:	e7a6      	b.n	8007850 <_svfiprintf_r+0xd4>
 8007902:	2300      	movs	r3, #0
 8007904:	3401      	adds	r4, #1
 8007906:	9305      	str	r3, [sp, #20]
 8007908:	4619      	mov	r1, r3
 800790a:	f04f 0c0a 	mov.w	ip, #10
 800790e:	4620      	mov	r0, r4
 8007910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007914:	3a30      	subs	r2, #48	; 0x30
 8007916:	2a09      	cmp	r2, #9
 8007918:	d903      	bls.n	8007922 <_svfiprintf_r+0x1a6>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0c6      	beq.n	80078ac <_svfiprintf_r+0x130>
 800791e:	9105      	str	r1, [sp, #20]
 8007920:	e7c4      	b.n	80078ac <_svfiprintf_r+0x130>
 8007922:	fb0c 2101 	mla	r1, ip, r1, r2
 8007926:	4604      	mov	r4, r0
 8007928:	2301      	movs	r3, #1
 800792a:	e7f0      	b.n	800790e <_svfiprintf_r+0x192>
 800792c:	ab03      	add	r3, sp, #12
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	462a      	mov	r2, r5
 8007932:	4b0f      	ldr	r3, [pc, #60]	; (8007970 <_svfiprintf_r+0x1f4>)
 8007934:	a904      	add	r1, sp, #16
 8007936:	4638      	mov	r0, r7
 8007938:	f3af 8000 	nop.w
 800793c:	1c42      	adds	r2, r0, #1
 800793e:	4606      	mov	r6, r0
 8007940:	d1d6      	bne.n	80078f0 <_svfiprintf_r+0x174>
 8007942:	89ab      	ldrh	r3, [r5, #12]
 8007944:	065b      	lsls	r3, r3, #25
 8007946:	f53f af2d 	bmi.w	80077a4 <_svfiprintf_r+0x28>
 800794a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800794c:	b01d      	add	sp, #116	; 0x74
 800794e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007952:	ab03      	add	r3, sp, #12
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	462a      	mov	r2, r5
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <_svfiprintf_r+0x1f4>)
 800795a:	a904      	add	r1, sp, #16
 800795c:	4638      	mov	r0, r7
 800795e:	f000 f879 	bl	8007a54 <_printf_i>
 8007962:	e7eb      	b.n	800793c <_svfiprintf_r+0x1c0>
 8007964:	08007f95 	.word	0x08007f95
 8007968:	08007f9f 	.word	0x08007f9f
 800796c:	00000000 	.word	0x00000000
 8007970:	080076c9 	.word	0x080076c9
 8007974:	08007f9b 	.word	0x08007f9b

08007978 <_printf_common>:
 8007978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	4616      	mov	r6, r2
 800797e:	4699      	mov	r9, r3
 8007980:	688a      	ldr	r2, [r1, #8]
 8007982:	690b      	ldr	r3, [r1, #16]
 8007984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007988:	4293      	cmp	r3, r2
 800798a:	bfb8      	it	lt
 800798c:	4613      	movlt	r3, r2
 800798e:	6033      	str	r3, [r6, #0]
 8007990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007994:	4607      	mov	r7, r0
 8007996:	460c      	mov	r4, r1
 8007998:	b10a      	cbz	r2, 800799e <_printf_common+0x26>
 800799a:	3301      	adds	r3, #1
 800799c:	6033      	str	r3, [r6, #0]
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	0699      	lsls	r1, r3, #26
 80079a2:	bf42      	ittt	mi
 80079a4:	6833      	ldrmi	r3, [r6, #0]
 80079a6:	3302      	addmi	r3, #2
 80079a8:	6033      	strmi	r3, [r6, #0]
 80079aa:	6825      	ldr	r5, [r4, #0]
 80079ac:	f015 0506 	ands.w	r5, r5, #6
 80079b0:	d106      	bne.n	80079c0 <_printf_common+0x48>
 80079b2:	f104 0a19 	add.w	sl, r4, #25
 80079b6:	68e3      	ldr	r3, [r4, #12]
 80079b8:	6832      	ldr	r2, [r6, #0]
 80079ba:	1a9b      	subs	r3, r3, r2
 80079bc:	42ab      	cmp	r3, r5
 80079be:	dc26      	bgt.n	8007a0e <_printf_common+0x96>
 80079c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079c4:	1e13      	subs	r3, r2, #0
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	bf18      	it	ne
 80079ca:	2301      	movne	r3, #1
 80079cc:	0692      	lsls	r2, r2, #26
 80079ce:	d42b      	bmi.n	8007a28 <_printf_common+0xb0>
 80079d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079d4:	4649      	mov	r1, r9
 80079d6:	4638      	mov	r0, r7
 80079d8:	47c0      	blx	r8
 80079da:	3001      	adds	r0, #1
 80079dc:	d01e      	beq.n	8007a1c <_printf_common+0xa4>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	6922      	ldr	r2, [r4, #16]
 80079e2:	f003 0306 	and.w	r3, r3, #6
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	bf02      	ittt	eq
 80079ea:	68e5      	ldreq	r5, [r4, #12]
 80079ec:	6833      	ldreq	r3, [r6, #0]
 80079ee:	1aed      	subeq	r5, r5, r3
 80079f0:	68a3      	ldr	r3, [r4, #8]
 80079f2:	bf0c      	ite	eq
 80079f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079f8:	2500      	movne	r5, #0
 80079fa:	4293      	cmp	r3, r2
 80079fc:	bfc4      	itt	gt
 80079fe:	1a9b      	subgt	r3, r3, r2
 8007a00:	18ed      	addgt	r5, r5, r3
 8007a02:	2600      	movs	r6, #0
 8007a04:	341a      	adds	r4, #26
 8007a06:	42b5      	cmp	r5, r6
 8007a08:	d11a      	bne.n	8007a40 <_printf_common+0xc8>
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	e008      	b.n	8007a20 <_printf_common+0xa8>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4652      	mov	r2, sl
 8007a12:	4649      	mov	r1, r9
 8007a14:	4638      	mov	r0, r7
 8007a16:	47c0      	blx	r8
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d103      	bne.n	8007a24 <_printf_common+0xac>
 8007a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a24:	3501      	adds	r5, #1
 8007a26:	e7c6      	b.n	80079b6 <_printf_common+0x3e>
 8007a28:	18e1      	adds	r1, r4, r3
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	2030      	movs	r0, #48	; 0x30
 8007a2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a32:	4422      	add	r2, r4
 8007a34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a3c:	3302      	adds	r3, #2
 8007a3e:	e7c7      	b.n	80079d0 <_printf_common+0x58>
 8007a40:	2301      	movs	r3, #1
 8007a42:	4622      	mov	r2, r4
 8007a44:	4649      	mov	r1, r9
 8007a46:	4638      	mov	r0, r7
 8007a48:	47c0      	blx	r8
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d0e6      	beq.n	8007a1c <_printf_common+0xa4>
 8007a4e:	3601      	adds	r6, #1
 8007a50:	e7d9      	b.n	8007a06 <_printf_common+0x8e>
	...

08007a54 <_printf_i>:
 8007a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a58:	7e0f      	ldrb	r7, [r1, #24]
 8007a5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a5c:	2f78      	cmp	r7, #120	; 0x78
 8007a5e:	4691      	mov	r9, r2
 8007a60:	4680      	mov	r8, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	469a      	mov	sl, r3
 8007a66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a6a:	d807      	bhi.n	8007a7c <_printf_i+0x28>
 8007a6c:	2f62      	cmp	r7, #98	; 0x62
 8007a6e:	d80a      	bhi.n	8007a86 <_printf_i+0x32>
 8007a70:	2f00      	cmp	r7, #0
 8007a72:	f000 80d4 	beq.w	8007c1e <_printf_i+0x1ca>
 8007a76:	2f58      	cmp	r7, #88	; 0x58
 8007a78:	f000 80c0 	beq.w	8007bfc <_printf_i+0x1a8>
 8007a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a84:	e03a      	b.n	8007afc <_printf_i+0xa8>
 8007a86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a8a:	2b15      	cmp	r3, #21
 8007a8c:	d8f6      	bhi.n	8007a7c <_printf_i+0x28>
 8007a8e:	a101      	add	r1, pc, #4	; (adr r1, 8007a94 <_printf_i+0x40>)
 8007a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a94:	08007aed 	.word	0x08007aed
 8007a98:	08007b01 	.word	0x08007b01
 8007a9c:	08007a7d 	.word	0x08007a7d
 8007aa0:	08007a7d 	.word	0x08007a7d
 8007aa4:	08007a7d 	.word	0x08007a7d
 8007aa8:	08007a7d 	.word	0x08007a7d
 8007aac:	08007b01 	.word	0x08007b01
 8007ab0:	08007a7d 	.word	0x08007a7d
 8007ab4:	08007a7d 	.word	0x08007a7d
 8007ab8:	08007a7d 	.word	0x08007a7d
 8007abc:	08007a7d 	.word	0x08007a7d
 8007ac0:	08007c05 	.word	0x08007c05
 8007ac4:	08007b2d 	.word	0x08007b2d
 8007ac8:	08007bbf 	.word	0x08007bbf
 8007acc:	08007a7d 	.word	0x08007a7d
 8007ad0:	08007a7d 	.word	0x08007a7d
 8007ad4:	08007c27 	.word	0x08007c27
 8007ad8:	08007a7d 	.word	0x08007a7d
 8007adc:	08007b2d 	.word	0x08007b2d
 8007ae0:	08007a7d 	.word	0x08007a7d
 8007ae4:	08007a7d 	.word	0x08007a7d
 8007ae8:	08007bc7 	.word	0x08007bc7
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	1d1a      	adds	r2, r3, #4
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	602a      	str	r2, [r5, #0]
 8007af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007afc:	2301      	movs	r3, #1
 8007afe:	e09f      	b.n	8007c40 <_printf_i+0x1ec>
 8007b00:	6820      	ldr	r0, [r4, #0]
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	0607      	lsls	r7, r0, #24
 8007b06:	f103 0104 	add.w	r1, r3, #4
 8007b0a:	6029      	str	r1, [r5, #0]
 8007b0c:	d501      	bpl.n	8007b12 <_printf_i+0xbe>
 8007b0e:	681e      	ldr	r6, [r3, #0]
 8007b10:	e003      	b.n	8007b1a <_printf_i+0xc6>
 8007b12:	0646      	lsls	r6, r0, #25
 8007b14:	d5fb      	bpl.n	8007b0e <_printf_i+0xba>
 8007b16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b1a:	2e00      	cmp	r6, #0
 8007b1c:	da03      	bge.n	8007b26 <_printf_i+0xd2>
 8007b1e:	232d      	movs	r3, #45	; 0x2d
 8007b20:	4276      	negs	r6, r6
 8007b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b26:	485a      	ldr	r0, [pc, #360]	; (8007c90 <_printf_i+0x23c>)
 8007b28:	230a      	movs	r3, #10
 8007b2a:	e012      	b.n	8007b52 <_printf_i+0xfe>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	6820      	ldr	r0, [r4, #0]
 8007b30:	1d19      	adds	r1, r3, #4
 8007b32:	6029      	str	r1, [r5, #0]
 8007b34:	0605      	lsls	r5, r0, #24
 8007b36:	d501      	bpl.n	8007b3c <_printf_i+0xe8>
 8007b38:	681e      	ldr	r6, [r3, #0]
 8007b3a:	e002      	b.n	8007b42 <_printf_i+0xee>
 8007b3c:	0641      	lsls	r1, r0, #25
 8007b3e:	d5fb      	bpl.n	8007b38 <_printf_i+0xe4>
 8007b40:	881e      	ldrh	r6, [r3, #0]
 8007b42:	4853      	ldr	r0, [pc, #332]	; (8007c90 <_printf_i+0x23c>)
 8007b44:	2f6f      	cmp	r7, #111	; 0x6f
 8007b46:	bf0c      	ite	eq
 8007b48:	2308      	moveq	r3, #8
 8007b4a:	230a      	movne	r3, #10
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b52:	6865      	ldr	r5, [r4, #4]
 8007b54:	60a5      	str	r5, [r4, #8]
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	bfa2      	ittt	ge
 8007b5a:	6821      	ldrge	r1, [r4, #0]
 8007b5c:	f021 0104 	bicge.w	r1, r1, #4
 8007b60:	6021      	strge	r1, [r4, #0]
 8007b62:	b90e      	cbnz	r6, 8007b68 <_printf_i+0x114>
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	d04b      	beq.n	8007c00 <_printf_i+0x1ac>
 8007b68:	4615      	mov	r5, r2
 8007b6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b6e:	fb03 6711 	mls	r7, r3, r1, r6
 8007b72:	5dc7      	ldrb	r7, [r0, r7]
 8007b74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b78:	4637      	mov	r7, r6
 8007b7a:	42bb      	cmp	r3, r7
 8007b7c:	460e      	mov	r6, r1
 8007b7e:	d9f4      	bls.n	8007b6a <_printf_i+0x116>
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d10b      	bne.n	8007b9c <_printf_i+0x148>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	07de      	lsls	r6, r3, #31
 8007b88:	d508      	bpl.n	8007b9c <_printf_i+0x148>
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	6861      	ldr	r1, [r4, #4]
 8007b8e:	4299      	cmp	r1, r3
 8007b90:	bfde      	ittt	le
 8007b92:	2330      	movle	r3, #48	; 0x30
 8007b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b9c:	1b52      	subs	r2, r2, r5
 8007b9e:	6122      	str	r2, [r4, #16]
 8007ba0:	f8cd a000 	str.w	sl, [sp]
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	aa03      	add	r2, sp, #12
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4640      	mov	r0, r8
 8007bac:	f7ff fee4 	bl	8007978 <_printf_common>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d14a      	bne.n	8007c4a <_printf_i+0x1f6>
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	b004      	add	sp, #16
 8007bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	f043 0320 	orr.w	r3, r3, #32
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	4833      	ldr	r0, [pc, #204]	; (8007c94 <_printf_i+0x240>)
 8007bc8:	2778      	movs	r7, #120	; 0x78
 8007bca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	6829      	ldr	r1, [r5, #0]
 8007bd2:	061f      	lsls	r7, r3, #24
 8007bd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bd8:	d402      	bmi.n	8007be0 <_printf_i+0x18c>
 8007bda:	065f      	lsls	r7, r3, #25
 8007bdc:	bf48      	it	mi
 8007bde:	b2b6      	uxthmi	r6, r6
 8007be0:	07df      	lsls	r7, r3, #31
 8007be2:	bf48      	it	mi
 8007be4:	f043 0320 	orrmi.w	r3, r3, #32
 8007be8:	6029      	str	r1, [r5, #0]
 8007bea:	bf48      	it	mi
 8007bec:	6023      	strmi	r3, [r4, #0]
 8007bee:	b91e      	cbnz	r6, 8007bf8 <_printf_i+0x1a4>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	f023 0320 	bic.w	r3, r3, #32
 8007bf6:	6023      	str	r3, [r4, #0]
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	e7a7      	b.n	8007b4c <_printf_i+0xf8>
 8007bfc:	4824      	ldr	r0, [pc, #144]	; (8007c90 <_printf_i+0x23c>)
 8007bfe:	e7e4      	b.n	8007bca <_printf_i+0x176>
 8007c00:	4615      	mov	r5, r2
 8007c02:	e7bd      	b.n	8007b80 <_printf_i+0x12c>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	6826      	ldr	r6, [r4, #0]
 8007c08:	6961      	ldr	r1, [r4, #20]
 8007c0a:	1d18      	adds	r0, r3, #4
 8007c0c:	6028      	str	r0, [r5, #0]
 8007c0e:	0635      	lsls	r5, r6, #24
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	d501      	bpl.n	8007c18 <_printf_i+0x1c4>
 8007c14:	6019      	str	r1, [r3, #0]
 8007c16:	e002      	b.n	8007c1e <_printf_i+0x1ca>
 8007c18:	0670      	lsls	r0, r6, #25
 8007c1a:	d5fb      	bpl.n	8007c14 <_printf_i+0x1c0>
 8007c1c:	8019      	strh	r1, [r3, #0]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	6123      	str	r3, [r4, #16]
 8007c22:	4615      	mov	r5, r2
 8007c24:	e7bc      	b.n	8007ba0 <_printf_i+0x14c>
 8007c26:	682b      	ldr	r3, [r5, #0]
 8007c28:	1d1a      	adds	r2, r3, #4
 8007c2a:	602a      	str	r2, [r5, #0]
 8007c2c:	681d      	ldr	r5, [r3, #0]
 8007c2e:	6862      	ldr	r2, [r4, #4]
 8007c30:	2100      	movs	r1, #0
 8007c32:	4628      	mov	r0, r5
 8007c34:	f7f8 faf4 	bl	8000220 <memchr>
 8007c38:	b108      	cbz	r0, 8007c3e <_printf_i+0x1ea>
 8007c3a:	1b40      	subs	r0, r0, r5
 8007c3c:	6060      	str	r0, [r4, #4]
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	6123      	str	r3, [r4, #16]
 8007c42:	2300      	movs	r3, #0
 8007c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c48:	e7aa      	b.n	8007ba0 <_printf_i+0x14c>
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	4649      	mov	r1, r9
 8007c50:	4640      	mov	r0, r8
 8007c52:	47d0      	blx	sl
 8007c54:	3001      	adds	r0, #1
 8007c56:	d0ad      	beq.n	8007bb4 <_printf_i+0x160>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	079b      	lsls	r3, r3, #30
 8007c5c:	d413      	bmi.n	8007c86 <_printf_i+0x232>
 8007c5e:	68e0      	ldr	r0, [r4, #12]
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	4298      	cmp	r0, r3
 8007c64:	bfb8      	it	lt
 8007c66:	4618      	movlt	r0, r3
 8007c68:	e7a6      	b.n	8007bb8 <_printf_i+0x164>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4632      	mov	r2, r6
 8007c6e:	4649      	mov	r1, r9
 8007c70:	4640      	mov	r0, r8
 8007c72:	47d0      	blx	sl
 8007c74:	3001      	adds	r0, #1
 8007c76:	d09d      	beq.n	8007bb4 <_printf_i+0x160>
 8007c78:	3501      	adds	r5, #1
 8007c7a:	68e3      	ldr	r3, [r4, #12]
 8007c7c:	9903      	ldr	r1, [sp, #12]
 8007c7e:	1a5b      	subs	r3, r3, r1
 8007c80:	42ab      	cmp	r3, r5
 8007c82:	dcf2      	bgt.n	8007c6a <_printf_i+0x216>
 8007c84:	e7eb      	b.n	8007c5e <_printf_i+0x20a>
 8007c86:	2500      	movs	r5, #0
 8007c88:	f104 0619 	add.w	r6, r4, #25
 8007c8c:	e7f5      	b.n	8007c7a <_printf_i+0x226>
 8007c8e:	bf00      	nop
 8007c90:	08007fa6 	.word	0x08007fa6
 8007c94:	08007fb7 	.word	0x08007fb7

08007c98 <memmove>:
 8007c98:	4288      	cmp	r0, r1
 8007c9a:	b510      	push	{r4, lr}
 8007c9c:	eb01 0402 	add.w	r4, r1, r2
 8007ca0:	d902      	bls.n	8007ca8 <memmove+0x10>
 8007ca2:	4284      	cmp	r4, r0
 8007ca4:	4623      	mov	r3, r4
 8007ca6:	d807      	bhi.n	8007cb8 <memmove+0x20>
 8007ca8:	1e43      	subs	r3, r0, #1
 8007caa:	42a1      	cmp	r1, r4
 8007cac:	d008      	beq.n	8007cc0 <memmove+0x28>
 8007cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cb6:	e7f8      	b.n	8007caa <memmove+0x12>
 8007cb8:	4402      	add	r2, r0
 8007cba:	4601      	mov	r1, r0
 8007cbc:	428a      	cmp	r2, r1
 8007cbe:	d100      	bne.n	8007cc2 <memmove+0x2a>
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cca:	e7f7      	b.n	8007cbc <memmove+0x24>

08007ccc <_sbrk_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4d06      	ldr	r5, [pc, #24]	; (8007ce8 <_sbrk_r+0x1c>)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	602b      	str	r3, [r5, #0]
 8007cd8:	f7f9 fe2c 	bl	8001934 <_sbrk>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_sbrk_r+0x1a>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_sbrk_r+0x1a>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	200010b0 	.word	0x200010b0

08007cec <memcpy>:
 8007cec:	440a      	add	r2, r1
 8007cee:	4291      	cmp	r1, r2
 8007cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cf4:	d100      	bne.n	8007cf8 <memcpy+0xc>
 8007cf6:	4770      	bx	lr
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d02:	4291      	cmp	r1, r2
 8007d04:	d1f9      	bne.n	8007cfa <memcpy+0xe>
 8007d06:	bd10      	pop	{r4, pc}

08007d08 <_realloc_r>:
 8007d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0c:	4680      	mov	r8, r0
 8007d0e:	4614      	mov	r4, r2
 8007d10:	460e      	mov	r6, r1
 8007d12:	b921      	cbnz	r1, 8007d1e <_realloc_r+0x16>
 8007d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d18:	4611      	mov	r1, r2
 8007d1a:	f7ff bc49 	b.w	80075b0 <_malloc_r>
 8007d1e:	b92a      	cbnz	r2, 8007d2c <_realloc_r+0x24>
 8007d20:	f7ff fbda 	bl	80074d8 <_free_r>
 8007d24:	4625      	mov	r5, r4
 8007d26:	4628      	mov	r0, r5
 8007d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2c:	f000 f81b 	bl	8007d66 <_malloc_usable_size_r>
 8007d30:	4284      	cmp	r4, r0
 8007d32:	4607      	mov	r7, r0
 8007d34:	d802      	bhi.n	8007d3c <_realloc_r+0x34>
 8007d36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d3a:	d812      	bhi.n	8007d62 <_realloc_r+0x5a>
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	4640      	mov	r0, r8
 8007d40:	f7ff fc36 	bl	80075b0 <_malloc_r>
 8007d44:	4605      	mov	r5, r0
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d0ed      	beq.n	8007d26 <_realloc_r+0x1e>
 8007d4a:	42bc      	cmp	r4, r7
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	4631      	mov	r1, r6
 8007d50:	bf28      	it	cs
 8007d52:	463a      	movcs	r2, r7
 8007d54:	f7ff ffca 	bl	8007cec <memcpy>
 8007d58:	4631      	mov	r1, r6
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	f7ff fbbc 	bl	80074d8 <_free_r>
 8007d60:	e7e1      	b.n	8007d26 <_realloc_r+0x1e>
 8007d62:	4635      	mov	r5, r6
 8007d64:	e7df      	b.n	8007d26 <_realloc_r+0x1e>

08007d66 <_malloc_usable_size_r>:
 8007d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d6a:	1f18      	subs	r0, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfbc      	itt	lt
 8007d70:	580b      	ldrlt	r3, [r1, r0]
 8007d72:	18c0      	addlt	r0, r0, r3
 8007d74:	4770      	bx	lr
	...

08007d78 <_init>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr

08007d84 <_fini>:
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d86:	bf00      	nop
 8007d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8a:	bc08      	pop	{r3}
 8007d8c:	469e      	mov	lr, r3
 8007d8e:	4770      	bx	lr
